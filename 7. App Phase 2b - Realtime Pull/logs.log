2024-09-11 21:39:16,025:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:39:16,025:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:39:16,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:39:16,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:44:22,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:44:22,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:44:22,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:44:22,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 21:46:46,222:INFO:Initializing load_model()
2024-09-11 21:46:46,222:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,415:INFO:Initializing load_model()
2024-09-11 21:46:47,415:INFO:load_model(model_name=model_y2_sweeperkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,427:INFO:Initializing load_model()
2024-09-11 21:46:47,427:INFO:load_model(model_name=model_y3_ballplayingdefender, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,434:INFO:Initializing load_model()
2024-09-11 21:46:47,434:INFO:load_model(model_name=model_y4_nononsensedefender, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,475:INFO:Initializing load_model()
2024-09-11 21:46:47,475:INFO:load_model(model_name=model_y5_fullback, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,481:INFO:Initializing load_model()
2024-09-11 21:46:47,481:INFO:load_model(model_name=model_y6_allactionmidfielder, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,539:INFO:Initializing load_model()
2024-09-11 21:46:47,540:INFO:load_model(model_name=model_y7_midfieldplaymaker, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,551:INFO:Initializing load_model()
2024-09-11 21:46:47,551:INFO:load_model(model_name=model_y8_traditionalwinger, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,561:INFO:Initializing load_model()
2024-09-11 21:46:47,561:INFO:load_model(model_name=model_y9_invertedwinger, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,567:INFO:Initializing load_model()
2024-09-11 21:46:47,567:INFO:load_model(model_name=model_y10_goalpoacher, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,571:INFO:Initializing load_model()
2024-09-11 21:46:47,572:INFO:load_model(model_name=model_y11_targetman, platform=None, authentication=None, verbose=True)
2024-09-11 21:46:47,593:INFO:Initializing predict_model()
2024-09-11 21:46:47,593:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026BBB95F250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['x1_goalspergame', 'x2_assists',
                                             'x3_passingacc', 'x4_longballacc',
                                             'x5_crossingacc',
                                             'x6_interceptions', 'x7_ballrecov',
                                             'x8_nowaythru', 'x9_clearance',
                                             'x10_dribbsucc', 'x11_duelwon',
                                             'x12_aerialduelwon',
                                             'x13_cleansheet',
                                             'x14_percentsaved',
                                             'y1_tradkeeper'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026BBC589A80>)
2024-09-11 21:46:47,593:INFO:Checking exceptions
2024-09-11 21:46:47,594:INFO:Preloading libraries
2024-09-11 21:46:47,594:INFO:Set up data.
2024-09-11 21:46:47,618:INFO:Set up index.
2024-09-11 22:03:16,412:INFO:Initializing load_model()
2024-09-11 22:03:16,415:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:03:23,237:INFO:Initializing load_model()
2024-09-11 22:03:23,237:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:05:53,153:INFO:Initializing load_model()
2024-09-11 22:05:53,155:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:06:02,546:INFO:Initializing load_model()
2024-09-11 22:06:02,546:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:06:25,436:INFO:Initializing load_model()
2024-09-11 22:06:25,437:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:07:33,369:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:07:33,369:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:07:33,370:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:07:33,370:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:10:58,032:INFO:Initializing load_model()
2024-09-11 22:10:58,036:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:15:14,628:INFO:Initializing load_model()
2024-09-11 22:15:14,633:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:15:19,603:INFO:Initializing load_model()
2024-09-11 22:15:19,604:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:15:23,887:INFO:Initializing load_model()
2024-09-11 22:15:23,887:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:16:13,199:INFO:Initializing load_model()
2024-09-11 22:16:13,202:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:17:46,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:17:46,552:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:17:46,552:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:17:46,552:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:18:18,201:INFO:Initializing load_model()
2024-09-11 22:18:18,204:INFO:load_model(model_name=model_y1_tradkeeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:21:21,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:21:21,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:21:21,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:21:21,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-11 22:22:50,255:INFO:Initializing load_model()
2024-09-11 22:22:50,260:INFO:load_model(model_name=model_Class_Traditional Keeper.pkl, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:25,877:INFO:Initializing load_model()
2024-09-11 22:23:25,877:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:26,959:INFO:Initializing load_model()
2024-09-11 22:23:26,959:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:26,971:INFO:Initializing load_model()
2024-09-11 22:23:26,971:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:39,897:INFO:Initializing load_model()
2024-09-11 22:23:39,897:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:39,902:INFO:Initializing load_model()
2024-09-11 22:23:39,902:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:23:39,906:INFO:Initializing load_model()
2024-09-11 22:23:39,906:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,272:INFO:Initializing load_model()
2024-09-11 22:25:05,277:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,283:INFO:Initializing load_model()
2024-09-11 22:25:05,283:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,293:INFO:Initializing load_model()
2024-09-11 22:25:05,293:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,405:INFO:Initializing load_model()
2024-09-11 22:25:05,407:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,426:INFO:Initializing load_model()
2024-09-11 22:25:05,426:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,444:INFO:Initializing load_model()
2024-09-11 22:25:05,445:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,462:INFO:Initializing load_model()
2024-09-11 22:25:05,462:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,468:INFO:Initializing load_model()
2024-09-11 22:25:05,470:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,479:INFO:Initializing load_model()
2024-09-11 22:25:05,479:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,490:INFO:Initializing load_model()
2024-09-11 22:25:05,490:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,508:INFO:Initializing load_model()
2024-09-11 22:25:05,508:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:05,606:INFO:Initializing predict_model()
2024-09-11 22:25:05,606:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093D81D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936EF20>)
2024-09-11 22:25:05,607:INFO:Checking exceptions
2024-09-11 22:25:05,608:INFO:Preloading libraries
2024-09-11 22:25:05,608:INFO:Set up data.
2024-09-11 22:25:05,642:INFO:Set up index.
2024-09-11 22:25:05,808:INFO:Initializing predict_model()
2024-09-11 22:25:05,808:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:05,808:INFO:Checking exceptions
2024-09-11 22:25:05,808:INFO:Preloading libraries
2024-09-11 22:25:05,809:INFO:Set up data.
2024-09-11 22:25:05,828:INFO:Set up index.
2024-09-11 22:25:05,963:INFO:Initializing predict_model()
2024-09-11 22:25:05,963:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254066196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:05,964:INFO:Checking exceptions
2024-09-11 22:25:05,964:INFO:Preloading libraries
2024-09-11 22:25:05,965:INFO:Set up data.
2024-09-11 22:25:05,981:INFO:Set up index.
2024-09-11 22:25:06,189:INFO:Initializing predict_model()
2024-09-11 22:25:06,190:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:06,190:INFO:Checking exceptions
2024-09-11 22:25:06,190:INFO:Preloading libraries
2024-09-11 22:25:06,191:INFO:Set up data.
2024-09-11 22:25:06,212:INFO:Set up index.
2024-09-11 22:25:06,401:INFO:Initializing predict_model()
2024-09-11 22:25:06,402:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:06,403:INFO:Checking exceptions
2024-09-11 22:25:06,404:INFO:Preloading libraries
2024-09-11 22:25:06,404:INFO:Set up data.
2024-09-11 22:25:06,431:INFO:Set up index.
2024-09-11 22:25:06,635:INFO:Initializing predict_model()
2024-09-11 22:25:06,635:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B7ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:06,636:INFO:Checking exceptions
2024-09-11 22:25:06,636:INFO:Preloading libraries
2024-09-11 22:25:06,637:INFO:Set up data.
2024-09-11 22:25:06,662:INFO:Set up index.
2024-09-11 22:25:06,812:INFO:Initializing predict_model()
2024-09-11 22:25:06,812:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B7ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:06,812:INFO:Checking exceptions
2024-09-11 22:25:06,812:INFO:Preloading libraries
2024-09-11 22:25:06,813:INFO:Set up data.
2024-09-11 22:25:06,831:INFO:Set up index.
2024-09-11 22:25:06,962:INFO:Initializing predict_model()
2024-09-11 22:25:06,962:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:06,962:INFO:Checking exceptions
2024-09-11 22:25:06,962:INFO:Preloading libraries
2024-09-11 22:25:06,963:INFO:Set up data.
2024-09-11 22:25:06,988:INFO:Set up index.
2024-09-11 22:25:07,127:INFO:Initializing predict_model()
2024-09-11 22:25:07,128:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:07,128:INFO:Checking exceptions
2024-09-11 22:25:07,128:INFO:Preloading libraries
2024-09-11 22:25:07,129:INFO:Set up data.
2024-09-11 22:25:07,149:INFO:Set up index.
2024-09-11 22:25:07,296:INFO:Initializing predict_model()
2024-09-11 22:25:07,297:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:07,297:INFO:Checking exceptions
2024-09-11 22:25:07,297:INFO:Preloading libraries
2024-09-11 22:25:07,298:INFO:Set up data.
2024-09-11 22:25:07,324:INFO:Set up index.
2024-09-11 22:25:07,508:INFO:Initializing predict_model()
2024-09-11 22:25:07,509:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409577C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409D2DEE0>)
2024-09-11 22:25:07,509:INFO:Checking exceptions
2024-09-11 22:25:07,509:INFO:Preloading libraries
2024-09-11 22:25:07,509:INFO:Set up data.
2024-09-11 22:25:07,537:INFO:Set up index.
2024-09-11 22:25:14,500:INFO:Initializing load_model()
2024-09-11 22:25:14,500:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,504:INFO:Initializing load_model()
2024-09-11 22:25:14,505:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,509:INFO:Initializing load_model()
2024-09-11 22:25:14,509:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,567:INFO:Initializing load_model()
2024-09-11 22:25:14,568:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,586:INFO:Initializing load_model()
2024-09-11 22:25:14,586:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,605:INFO:Initializing load_model()
2024-09-11 22:25:14,605:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,622:INFO:Initializing load_model()
2024-09-11 22:25:14,622:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,629:INFO:Initializing load_model()
2024-09-11 22:25:14,629:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,636:INFO:Initializing load_model()
2024-09-11 22:25:14,639:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,645:INFO:Initializing load_model()
2024-09-11 22:25:14,645:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,650:INFO:Initializing load_model()
2024-09-11 22:25:14,650:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:25:14,722:INFO:Initializing predict_model()
2024-09-11 22:25:14,722:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A29C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D77E0>)
2024-09-11 22:25:14,722:INFO:Checking exceptions
2024-09-11 22:25:14,723:INFO:Preloading libraries
2024-09-11 22:25:14,723:INFO:Set up data.
2024-09-11 22:25:14,744:INFO:Set up index.
2024-09-11 22:25:14,880:INFO:Initializing predict_model()
2024-09-11 22:25:14,881:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A29F2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:14,881:INFO:Checking exceptions
2024-09-11 22:25:14,881:INFO:Preloading libraries
2024-09-11 22:25:14,881:INFO:Set up data.
2024-09-11 22:25:14,900:INFO:Set up index.
2024-09-11 22:25:15,042:INFO:Initializing predict_model()
2024-09-11 22:25:15,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:15,042:INFO:Checking exceptions
2024-09-11 22:25:15,043:INFO:Preloading libraries
2024-09-11 22:25:15,043:INFO:Set up data.
2024-09-11 22:25:15,064:INFO:Set up index.
2024-09-11 22:25:15,259:INFO:Initializing predict_model()
2024-09-11 22:25:15,259:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:15,259:INFO:Checking exceptions
2024-09-11 22:25:15,260:INFO:Preloading libraries
2024-09-11 22:25:15,260:INFO:Set up data.
2024-09-11 22:25:15,278:INFO:Set up index.
2024-09-11 22:25:15,473:INFO:Initializing predict_model()
2024-09-11 22:25:15,474:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:15,474:INFO:Checking exceptions
2024-09-11 22:25:15,474:INFO:Preloading libraries
2024-09-11 22:25:15,475:INFO:Set up data.
2024-09-11 22:25:15,497:INFO:Set up index.
2024-09-11 22:25:15,672:INFO:Initializing predict_model()
2024-09-11 22:25:15,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:15,673:INFO:Checking exceptions
2024-09-11 22:25:15,673:INFO:Preloading libraries
2024-09-11 22:25:15,673:INFO:Set up data.
2024-09-11 22:25:15,691:INFO:Set up index.
2024-09-11 22:25:15,851:INFO:Initializing predict_model()
2024-09-11 22:25:15,852:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDFE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:15,852:INFO:Checking exceptions
2024-09-11 22:25:15,853:INFO:Preloading libraries
2024-09-11 22:25:15,854:INFO:Set up data.
2024-09-11 22:25:15,872:INFO:Set up index.
2024-09-11 22:25:16,001:INFO:Initializing predict_model()
2024-09-11 22:25:16,002:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:16,002:INFO:Checking exceptions
2024-09-11 22:25:16,002:INFO:Preloading libraries
2024-09-11 22:25:16,003:INFO:Set up data.
2024-09-11 22:25:16,021:INFO:Set up index.
2024-09-11 22:25:16,140:INFO:Initializing predict_model()
2024-09-11 22:25:16,141:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A291D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:16,141:INFO:Checking exceptions
2024-09-11 22:25:16,141:INFO:Preloading libraries
2024-09-11 22:25:16,142:INFO:Set up data.
2024-09-11 22:25:16,160:INFO:Set up index.
2024-09-11 22:25:16,274:INFO:Initializing predict_model()
2024-09-11 22:25:16,275:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401D48810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:16,275:INFO:Checking exceptions
2024-09-11 22:25:16,275:INFO:Preloading libraries
2024-09-11 22:25:16,276:INFO:Set up data.
2024-09-11 22:25:16,292:INFO:Set up index.
2024-09-11 22:25:16,407:INFO:Initializing predict_model()
2024-09-11 22:25:16,408:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095B8E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 22:25:16,408:INFO:Checking exceptions
2024-09-11 22:25:16,408:INFO:Preloading libraries
2024-09-11 22:25:16,409:INFO:Set up data.
2024-09-11 22:25:16,425:INFO:Set up index.
2024-09-11 22:27:04,676:INFO:Initializing load_model()
2024-09-11 22:27:04,682:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,687:INFO:Initializing load_model()
2024-09-11 22:27:04,688:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,692:INFO:Initializing load_model()
2024-09-11 22:27:04,692:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,738:INFO:Initializing load_model()
2024-09-11 22:27:04,738:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,754:INFO:Initializing load_model()
2024-09-11 22:27:04,754:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,772:INFO:Initializing load_model()
2024-09-11 22:27:04,772:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,790:INFO:Initializing load_model()
2024-09-11 22:27:04,790:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,796:INFO:Initializing load_model()
2024-09-11 22:27:04,796:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,803:INFO:Initializing load_model()
2024-09-11 22:27:04,804:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,809:INFO:Initializing load_model()
2024-09-11 22:27:04,809:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:04,815:INFO:Initializing load_model()
2024-09-11 22:27:04,815:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,811:INFO:Initializing load_model()
2024-09-11 22:27:33,811:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,815:INFO:Initializing load_model()
2024-09-11 22:27:33,815:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,823:INFO:Initializing load_model()
2024-09-11 22:27:33,823:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,870:INFO:Initializing load_model()
2024-09-11 22:27:33,870:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,884:INFO:Initializing load_model()
2024-09-11 22:27:33,884:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,905:INFO:Initializing load_model()
2024-09-11 22:27:33,905:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,926:INFO:Initializing load_model()
2024-09-11 22:27:33,926:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,926:INFO:Initializing load_model()
2024-09-11 22:27:33,926:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,935:INFO:Initializing load_model()
2024-09-11 22:27:33,935:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,945:INFO:Initializing load_model()
2024-09-11 22:27:33,945:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:33,945:INFO:Initializing load_model()
2024-09-11 22:27:33,945:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:34,006:INFO:Initializing predict_model()
2024-09-11 22:27:34,006:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0C6290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A091120>)
2024-09-11 22:27:34,006:INFO:Checking exceptions
2024-09-11 22:27:34,006:INFO:Preloading libraries
2024-09-11 22:27:34,015:INFO:Set up data.
2024-09-11 22:27:34,026:INFO:Set up index.
2024-09-11 22:27:34,151:INFO:Initializing predict_model()
2024-09-11 22:27:34,151:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:34,151:INFO:Checking exceptions
2024-09-11 22:27:34,151:INFO:Preloading libraries
2024-09-11 22:27:34,159:INFO:Set up data.
2024-09-11 22:27:34,179:INFO:Set up index.
2024-09-11 22:27:34,301:INFO:Initializing predict_model()
2024-09-11 22:27:34,301:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF8B0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:34,301:INFO:Checking exceptions
2024-09-11 22:27:34,301:INFO:Preloading libraries
2024-09-11 22:27:34,301:INFO:Set up data.
2024-09-11 22:27:34,322:INFO:Set up index.
2024-09-11 22:27:34,484:INFO:Initializing predict_model()
2024-09-11 22:27:34,484:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:34,484:INFO:Checking exceptions
2024-09-11 22:27:34,484:INFO:Preloading libraries
2024-09-11 22:27:34,484:INFO:Set up data.
2024-09-11 22:27:34,504:INFO:Set up index.
2024-09-11 22:27:34,672:INFO:Initializing predict_model()
2024-09-11 22:27:34,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FD0210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:34,682:INFO:Checking exceptions
2024-09-11 22:27:34,682:INFO:Preloading libraries
2024-09-11 22:27:34,682:INFO:Set up data.
2024-09-11 22:27:34,698:INFO:Set up index.
2024-09-11 22:27:34,851:INFO:Initializing predict_model()
2024-09-11 22:27:34,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2AEED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:34,851:INFO:Checking exceptions
2024-09-11 22:27:34,851:INFO:Preloading libraries
2024-09-11 22:27:34,851:INFO:Set up data.
2024-09-11 22:27:34,869:INFO:Set up index.
2024-09-11 22:27:35,018:INFO:Initializing predict_model()
2024-09-11 22:27:35,018:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:35,018:INFO:Checking exceptions
2024-09-11 22:27:35,018:INFO:Preloading libraries
2024-09-11 22:27:35,018:INFO:Set up data.
2024-09-11 22:27:35,035:INFO:Set up index.
2024-09-11 22:27:35,163:INFO:Initializing predict_model()
2024-09-11 22:27:35,163:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A109710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:35,163:INFO:Checking exceptions
2024-09-11 22:27:35,163:INFO:Preloading libraries
2024-09-11 22:27:35,164:INFO:Set up data.
2024-09-11 22:27:35,183:INFO:Set up index.
2024-09-11 22:27:35,296:INFO:Initializing predict_model()
2024-09-11 22:27:35,296:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF8B1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:35,296:INFO:Checking exceptions
2024-09-11 22:27:35,296:INFO:Preloading libraries
2024-09-11 22:27:35,300:INFO:Set up data.
2024-09-11 22:27:35,316:INFO:Set up index.
2024-09-11 22:27:35,427:INFO:Initializing predict_model()
2024-09-11 22:27:35,427:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:35,427:INFO:Checking exceptions
2024-09-11 22:27:35,427:INFO:Preloading libraries
2024-09-11 22:27:35,427:INFO:Set up data.
2024-09-11 22:27:35,449:INFO:Set up index.
2024-09-11 22:27:35,562:INFO:Initializing predict_model()
2024-09-11 22:27:35,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CDB0EA0>)
2024-09-11 22:27:35,562:INFO:Checking exceptions
2024-09-11 22:27:35,562:INFO:Preloading libraries
2024-09-11 22:27:35,565:INFO:Set up data.
2024-09-11 22:27:35,577:INFO:Set up index.
2024-09-11 22:27:38,485:INFO:Initializing load_model()
2024-09-11 22:27:38,486:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,490:INFO:Initializing load_model()
2024-09-11 22:27:38,491:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,495:INFO:Initializing load_model()
2024-09-11 22:27:38,496:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,563:INFO:Initializing load_model()
2024-09-11 22:27:38,563:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,579:INFO:Initializing load_model()
2024-09-11 22:27:38,579:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,596:INFO:Initializing load_model()
2024-09-11 22:27:38,597:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,615:INFO:Initializing load_model()
2024-09-11 22:27:38,615:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,621:INFO:Initializing load_model()
2024-09-11 22:27:38,621:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,626:INFO:Initializing load_model()
2024-09-11 22:27:38,626:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,636:INFO:Initializing load_model()
2024-09-11 22:27:38,636:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,642:INFO:Initializing load_model()
2024-09-11 22:27:38,642:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:27:38,710:INFO:Initializing predict_model()
2024-09-11 22:27:38,711:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B36FCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A0625C0>)
2024-09-11 22:27:38,711:INFO:Checking exceptions
2024-09-11 22:27:38,711:INFO:Preloading libraries
2024-09-11 22:27:38,712:INFO:Set up data.
2024-09-11 22:27:38,729:INFO:Set up index.
2024-09-11 22:27:38,857:INFO:Initializing predict_model()
2024-09-11 22:27:38,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD49BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:38,858:INFO:Checking exceptions
2024-09-11 22:27:38,858:INFO:Preloading libraries
2024-09-11 22:27:38,858:INFO:Set up data.
2024-09-11 22:27:38,879:INFO:Set up index.
2024-09-11 22:27:39,013:INFO:Initializing predict_model()
2024-09-11 22:27:39,013:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFB490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,013:INFO:Checking exceptions
2024-09-11 22:27:39,014:INFO:Preloading libraries
2024-09-11 22:27:39,014:INFO:Set up data.
2024-09-11 22:27:39,038:INFO:Set up index.
2024-09-11 22:27:39,233:INFO:Initializing predict_model()
2024-09-11 22:27:39,233:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540661B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,233:INFO:Checking exceptions
2024-09-11 22:27:39,233:INFO:Preloading libraries
2024-09-11 22:27:39,235:INFO:Set up data.
2024-09-11 22:27:39,256:INFO:Set up index.
2024-09-11 22:27:39,459:INFO:Initializing predict_model()
2024-09-11 22:27:39,459:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A49310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,459:INFO:Checking exceptions
2024-09-11 22:27:39,460:INFO:Preloading libraries
2024-09-11 22:27:39,460:INFO:Set up data.
2024-09-11 22:27:39,478:INFO:Set up index.
2024-09-11 22:27:39,639:INFO:Initializing predict_model()
2024-09-11 22:27:39,639:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540658C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,639:INFO:Checking exceptions
2024-09-11 22:27:39,640:INFO:Preloading libraries
2024-09-11 22:27:39,640:INFO:Set up data.
2024-09-11 22:27:39,658:INFO:Set up index.
2024-09-11 22:27:39,811:INFO:Initializing predict_model()
2024-09-11 22:27:39,811:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,811:INFO:Checking exceptions
2024-09-11 22:27:39,811:INFO:Preloading libraries
2024-09-11 22:27:39,812:INFO:Set up data.
2024-09-11 22:27:39,831:INFO:Set up index.
2024-09-11 22:27:39,959:INFO:Initializing predict_model()
2024-09-11 22:27:39,959:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:39,959:INFO:Checking exceptions
2024-09-11 22:27:39,960:INFO:Preloading libraries
2024-09-11 22:27:39,961:INFO:Set up data.
2024-09-11 22:27:39,982:INFO:Set up index.
2024-09-11 22:27:40,108:INFO:Initializing predict_model()
2024-09-11 22:27:40,109:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401D48810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:40,109:INFO:Checking exceptions
2024-09-11 22:27:40,109:INFO:Preloading libraries
2024-09-11 22:27:40,110:INFO:Set up data.
2024-09-11 22:27:40,126:INFO:Set up index.
2024-09-11 22:27:40,245:INFO:Initializing predict_model()
2024-09-11 22:27:40,245:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A49310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:40,245:INFO:Checking exceptions
2024-09-11 22:27:40,246:INFO:Preloading libraries
2024-09-11 22:27:40,246:INFO:Set up data.
2024-09-11 22:27:40,264:INFO:Set up index.
2024-09-11 22:27:40,378:INFO:Initializing predict_model()
2024-09-11 22:27:40,378:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FDD6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-11 22:27:40,378:INFO:Checking exceptions
2024-09-11 22:27:40,379:INFO:Preloading libraries
2024-09-11 22:27:40,379:INFO:Set up data.
2024-09-11 22:27:40,396:INFO:Set up index.
2024-09-11 22:29:07,320:INFO:Initializing load_model()
2024-09-11 22:29:07,322:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,326:INFO:Initializing load_model()
2024-09-11 22:29:07,327:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,331:INFO:Initializing load_model()
2024-09-11 22:29:07,331:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,379:INFO:Initializing load_model()
2024-09-11 22:29:07,380:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,395:INFO:Initializing load_model()
2024-09-11 22:29:07,395:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,413:INFO:Initializing load_model()
2024-09-11 22:29:07,413:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,432:INFO:Initializing load_model()
2024-09-11 22:29:07,432:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,438:INFO:Initializing load_model()
2024-09-11 22:29:07,438:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,444:INFO:Initializing load_model()
2024-09-11 22:29:07,445:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,451:INFO:Initializing load_model()
2024-09-11 22:29:07,451:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,457:INFO:Initializing load_model()
2024-09-11 22:29:07,457:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:29:07,533:INFO:Initializing predict_model()
2024-09-11 22:29:07,534:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A109CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936FD80>)
2024-09-11 22:29:07,534:INFO:Checking exceptions
2024-09-11 22:29:07,534:INFO:Preloading libraries
2024-09-11 22:29:07,534:INFO:Set up data.
2024-09-11 22:29:07,557:INFO:Set up index.
2024-09-11 22:29:07,695:INFO:Initializing predict_model()
2024-09-11 22:29:07,697:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:07,697:INFO:Checking exceptions
2024-09-11 22:29:07,697:INFO:Preloading libraries
2024-09-11 22:29:07,698:INFO:Set up data.
2024-09-11 22:29:07,717:INFO:Set up index.
2024-09-11 22:29:07,850:INFO:Initializing predict_model()
2024-09-11 22:29:07,850:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:07,850:INFO:Checking exceptions
2024-09-11 22:29:07,850:INFO:Preloading libraries
2024-09-11 22:29:07,851:INFO:Set up data.
2024-09-11 22:29:07,869:INFO:Set up index.
2024-09-11 22:29:08,034:INFO:Initializing predict_model()
2024-09-11 22:29:08,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C71F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,035:INFO:Checking exceptions
2024-09-11 22:29:08,035:INFO:Preloading libraries
2024-09-11 22:29:08,036:INFO:Set up data.
2024-09-11 22:29:08,053:INFO:Set up index.
2024-09-11 22:29:08,232:INFO:Initializing predict_model()
2024-09-11 22:29:08,232:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,233:INFO:Checking exceptions
2024-09-11 22:29:08,233:INFO:Preloading libraries
2024-09-11 22:29:08,233:INFO:Set up data.
2024-09-11 22:29:08,253:INFO:Set up index.
2024-09-11 22:29:08,414:INFO:Initializing predict_model()
2024-09-11 22:29:08,414:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,414:INFO:Checking exceptions
2024-09-11 22:29:08,415:INFO:Preloading libraries
2024-09-11 22:29:08,415:INFO:Set up data.
2024-09-11 22:29:08,433:INFO:Set up index.
2024-09-11 22:29:08,588:INFO:Initializing predict_model()
2024-09-11 22:29:08,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,589:INFO:Checking exceptions
2024-09-11 22:29:08,590:INFO:Preloading libraries
2024-09-11 22:29:08,590:INFO:Set up data.
2024-09-11 22:29:08,609:INFO:Set up index.
2024-09-11 22:29:08,732:INFO:Initializing predict_model()
2024-09-11 22:29:08,733:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,733:INFO:Checking exceptions
2024-09-11 22:29:08,733:INFO:Preloading libraries
2024-09-11 22:29:08,734:INFO:Set up data.
2024-09-11 22:29:08,751:INFO:Set up index.
2024-09-11 22:29:08,866:INFO:Initializing predict_model()
2024-09-11 22:29:08,867:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:08,867:INFO:Checking exceptions
2024-09-11 22:29:08,867:INFO:Preloading libraries
2024-09-11 22:29:08,868:INFO:Set up data.
2024-09-11 22:29:08,885:INFO:Set up index.
2024-09-11 22:29:08,999:INFO:Initializing predict_model()
2024-09-11 22:29:08,999:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D69D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:09,000:INFO:Checking exceptions
2024-09-11 22:29:09,001:INFO:Preloading libraries
2024-09-11 22:29:09,001:INFO:Set up data.
2024-09-11 22:29:09,018:INFO:Set up index.
2024-09-11 22:29:09,131:INFO:Initializing predict_model()
2024-09-11 22:29:09,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095482D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 22:29:09,132:INFO:Checking exceptions
2024-09-11 22:29:09,132:INFO:Preloading libraries
2024-09-11 22:29:09,133:INFO:Set up data.
2024-09-11 22:29:09,151:INFO:Set up index.
2024-09-11 22:29:09,334:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:553: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  # Filter predictions based on prediction_label

2024-09-11 22:29:09,335:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if show_recommended and not show_not_recommended:

2024-09-11 22:30:35,538:INFO:Initializing load_model()
2024-09-11 22:30:35,542:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,547:INFO:Initializing load_model()
2024-09-11 22:30:35,547:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,553:INFO:Initializing load_model()
2024-09-11 22:30:35,554:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,633:INFO:Initializing load_model()
2024-09-11 22:30:35,634:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,656:INFO:Initializing load_model()
2024-09-11 22:30:35,657:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,677:INFO:Initializing load_model()
2024-09-11 22:30:35,677:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,707:INFO:Initializing load_model()
2024-09-11 22:30:35,708:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,716:INFO:Initializing load_model()
2024-09-11 22:30:35,716:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,723:INFO:Initializing load_model()
2024-09-11 22:30:35,724:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,731:INFO:Initializing load_model()
2024-09-11 22:30:35,731:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,738:INFO:Initializing load_model()
2024-09-11 22:30:35,739:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:35,802:INFO:Initializing predict_model()
2024-09-11 22:30:35,803:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A217190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A0936A0>)
2024-09-11 22:30:35,804:INFO:Checking exceptions
2024-09-11 22:30:35,805:INFO:Preloading libraries
2024-09-11 22:30:35,806:INFO:Set up data.
2024-09-11 22:30:35,834:INFO:Set up index.
2024-09-11 22:30:35,986:INFO:Initializing predict_model()
2024-09-11 22:30:35,986:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A035490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D080>)
2024-09-11 22:30:35,987:INFO:Checking exceptions
2024-09-11 22:30:35,987:INFO:Preloading libraries
2024-09-11 22:30:35,988:INFO:Set up data.
2024-09-11 22:30:36,010:INFO:Set up index.
2024-09-11 22:30:36,164:INFO:Initializing predict_model()
2024-09-11 22:30:36,164:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401D48810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:36,164:INFO:Checking exceptions
2024-09-11 22:30:36,165:INFO:Preloading libraries
2024-09-11 22:30:36,165:INFO:Set up data.
2024-09-11 22:30:36,183:INFO:Set up index.
2024-09-11 22:30:36,372:INFO:Initializing predict_model()
2024-09-11 22:30:36,373:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:36,373:INFO:Checking exceptions
2024-09-11 22:30:36,373:INFO:Preloading libraries
2024-09-11 22:30:36,374:INFO:Set up data.
2024-09-11 22:30:36,397:INFO:Set up index.
2024-09-11 22:30:36,588:INFO:Initializing predict_model()
2024-09-11 22:30:36,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF76B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:36,590:INFO:Checking exceptions
2024-09-11 22:30:36,590:INFO:Preloading libraries
2024-09-11 22:30:36,591:INFO:Set up data.
2024-09-11 22:30:36,618:INFO:Set up index.
2024-09-11 22:30:36,809:INFO:Initializing predict_model()
2024-09-11 22:30:36,809:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547AAD3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:36,810:INFO:Checking exceptions
2024-09-11 22:30:36,810:INFO:Preloading libraries
2024-09-11 22:30:36,811:INFO:Set up data.
2024-09-11 22:30:36,828:INFO:Set up index.
2024-09-11 22:30:36,997:INFO:Initializing predict_model()
2024-09-11 22:30:36,998:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F15810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:36,998:INFO:Checking exceptions
2024-09-11 22:30:36,998:INFO:Preloading libraries
2024-09-11 22:30:36,998:INFO:Set up data.
2024-09-11 22:30:37,019:INFO:Set up index.
2024-09-11 22:30:37,151:INFO:Initializing predict_model()
2024-09-11 22:30:37,151:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:37,152:INFO:Checking exceptions
2024-09-11 22:30:37,152:INFO:Preloading libraries
2024-09-11 22:30:37,153:INFO:Set up data.
2024-09-11 22:30:37,173:INFO:Set up index.
2024-09-11 22:30:37,308:INFO:Initializing predict_model()
2024-09-11 22:30:37,309:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:37,309:INFO:Checking exceptions
2024-09-11 22:30:37,309:INFO:Preloading libraries
2024-09-11 22:30:37,310:INFO:Set up data.
2024-09-11 22:30:37,331:INFO:Set up index.
2024-09-11 22:30:37,500:INFO:Initializing predict_model()
2024-09-11 22:30:37,500:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:37,500:INFO:Checking exceptions
2024-09-11 22:30:37,500:INFO:Preloading libraries
2024-09-11 22:30:37,501:INFO:Set up data.
2024-09-11 22:30:37,533:INFO:Set up index.
2024-09-11 22:30:37,677:INFO:Initializing predict_model()
2024-09-11 22:30:37,678:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:30:37,678:INFO:Checking exceptions
2024-09-11 22:30:37,678:INFO:Preloading libraries
2024-09-11 22:30:37,678:INFO:Set up data.
2024-09-11 22:30:37,697:INFO:Set up index.
2024-09-11 22:30:37,879:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:553: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:30:37,879:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:30:44,485:INFO:Initializing load_model()
2024-09-11 22:30:44,485:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,489:INFO:Initializing load_model()
2024-09-11 22:30:44,489:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,494:INFO:Initializing load_model()
2024-09-11 22:30:44,494:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,574:INFO:Initializing load_model()
2024-09-11 22:30:44,574:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,593:INFO:Initializing load_model()
2024-09-11 22:30:44,593:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,611:INFO:Initializing load_model()
2024-09-11 22:30:44,611:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,629:INFO:Initializing load_model()
2024-09-11 22:30:44,629:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,637:INFO:Initializing load_model()
2024-09-11 22:30:44,637:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,644:INFO:Initializing load_model()
2024-09-11 22:30:44,644:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,650:INFO:Initializing load_model()
2024-09-11 22:30:44,650:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,656:INFO:Initializing load_model()
2024-09-11 22:30:44,657:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:44,745:INFO:Initializing predict_model()
2024-09-11 22:30:44,746:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093E4650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B324D60>)
2024-09-11 22:30:44,746:INFO:Checking exceptions
2024-09-11 22:30:44,746:INFO:Preloading libraries
2024-09-11 22:30:44,746:INFO:Set up data.
2024-09-11 22:30:44,767:INFO:Set up index.
2024-09-11 22:30:44,913:INFO:Initializing predict_model()
2024-09-11 22:30:44,913:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:44,913:INFO:Checking exceptions
2024-09-11 22:30:44,913:INFO:Preloading libraries
2024-09-11 22:30:44,914:INFO:Set up data.
2024-09-11 22:30:44,937:INFO:Set up index.
2024-09-11 22:30:45,092:INFO:Initializing predict_model()
2024-09-11 22:30:45,092:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A035490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:45,092:INFO:Checking exceptions
2024-09-11 22:30:45,093:INFO:Preloading libraries
2024-09-11 22:30:45,093:INFO:Set up data.
2024-09-11 22:30:45,118:INFO:Set up index.
2024-09-11 22:30:45,299:INFO:Initializing predict_model()
2024-09-11 22:30:45,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:45,300:INFO:Checking exceptions
2024-09-11 22:30:45,301:INFO:Preloading libraries
2024-09-11 22:30:45,301:INFO:Set up data.
2024-09-11 22:30:45,317:INFO:Set up index.
2024-09-11 22:30:45,497:INFO:Initializing predict_model()
2024-09-11 22:30:45,497:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:45,497:INFO:Checking exceptions
2024-09-11 22:30:45,497:INFO:Preloading libraries
2024-09-11 22:30:45,498:INFO:Set up data.
2024-09-11 22:30:45,517:INFO:Set up index.
2024-09-11 22:30:45,683:INFO:Initializing predict_model()
2024-09-11 22:30:45,683:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FD7C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:45,683:INFO:Checking exceptions
2024-09-11 22:30:45,684:INFO:Preloading libraries
2024-09-11 22:30:45,685:INFO:Set up data.
2024-09-11 22:30:45,703:INFO:Set up index.
2024-09-11 22:30:45,879:INFO:Initializing predict_model()
2024-09-11 22:30:45,879:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091C74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:45,879:INFO:Checking exceptions
2024-09-11 22:30:45,880:INFO:Preloading libraries
2024-09-11 22:30:45,880:INFO:Set up data.
2024-09-11 22:30:45,907:INFO:Set up index.
2024-09-11 22:30:46,072:INFO:Initializing predict_model()
2024-09-11 22:30:46,073:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091C74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:46,073:INFO:Checking exceptions
2024-09-11 22:30:46,073:INFO:Preloading libraries
2024-09-11 22:30:46,074:INFO:Set up data.
2024-09-11 22:30:46,091:INFO:Set up index.
2024-09-11 22:30:46,222:INFO:Initializing predict_model()
2024-09-11 22:30:46,223:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091C74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:46,223:INFO:Checking exceptions
2024-09-11 22:30:46,223:INFO:Preloading libraries
2024-09-11 22:30:46,223:INFO:Set up data.
2024-09-11 22:30:46,244:INFO:Set up index.
2024-09-11 22:30:46,367:INFO:Initializing predict_model()
2024-09-11 22:30:46,367:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:46,368:INFO:Checking exceptions
2024-09-11 22:30:46,368:INFO:Preloading libraries
2024-09-11 22:30:46,369:INFO:Set up data.
2024-09-11 22:30:46,385:INFO:Set up index.
2024-09-11 22:30:46,499:INFO:Initializing predict_model()
2024-09-11 22:30:46,500:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DF61760>)
2024-09-11 22:30:46,500:INFO:Checking exceptions
2024-09-11 22:30:46,500:INFO:Preloading libraries
2024-09-11 22:30:46,501:INFO:Set up data.
2024-09-11 22:30:46,519:INFO:Set up index.
2024-09-11 22:30:46,703:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:553: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:30:46,704:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:30:53,374:INFO:Initializing load_model()
2024-09-11 22:30:53,374:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,380:INFO:Initializing load_model()
2024-09-11 22:30:53,380:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,385:INFO:Initializing load_model()
2024-09-11 22:30:53,385:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,460:INFO:Initializing load_model()
2024-09-11 22:30:53,460:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,480:INFO:Initializing load_model()
2024-09-11 22:30:53,481:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,499:INFO:Initializing load_model()
2024-09-11 22:30:53,499:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,519:INFO:Initializing load_model()
2024-09-11 22:30:53,519:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,525:INFO:Initializing load_model()
2024-09-11 22:30:53,526:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,532:INFO:Initializing load_model()
2024-09-11 22:30:53,533:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,539:INFO:Initializing load_model()
2024-09-11 22:30:53,539:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,549:INFO:Initializing load_model()
2024-09-11 22:30:53,550:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:30:53,626:INFO:Initializing predict_model()
2024-09-11 22:30:53,627:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409596290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1FF1A0>)
2024-09-11 22:30:53,627:INFO:Checking exceptions
2024-09-11 22:30:53,627:INFO:Preloading libraries
2024-09-11 22:30:53,630:INFO:Set up data.
2024-09-11 22:30:53,655:INFO:Set up index.
2024-09-11 22:30:53,795:INFO:Initializing predict_model()
2024-09-11 22:30:53,795:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:53,795:INFO:Checking exceptions
2024-09-11 22:30:53,796:INFO:Preloading libraries
2024-09-11 22:30:53,796:INFO:Set up data.
2024-09-11 22:30:53,815:INFO:Set up index.
2024-09-11 22:30:53,944:INFO:Initializing predict_model()
2024-09-11 22:30:53,944:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:53,944:INFO:Checking exceptions
2024-09-11 22:30:53,945:INFO:Preloading libraries
2024-09-11 22:30:53,945:INFO:Set up data.
2024-09-11 22:30:53,962:INFO:Set up index.
2024-09-11 22:30:54,137:INFO:Initializing predict_model()
2024-09-11 22:30:54,137:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,138:INFO:Checking exceptions
2024-09-11 22:30:54,138:INFO:Preloading libraries
2024-09-11 22:30:54,139:INFO:Set up data.
2024-09-11 22:30:54,156:INFO:Set up index.
2024-09-11 22:30:54,338:INFO:Initializing predict_model()
2024-09-11 22:30:54,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD49BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,339:INFO:Checking exceptions
2024-09-11 22:30:54,340:INFO:Preloading libraries
2024-09-11 22:30:54,340:INFO:Set up data.
2024-09-11 22:30:54,356:INFO:Set up index.
2024-09-11 22:30:54,519:INFO:Initializing predict_model()
2024-09-11 22:30:54,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB1150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,520:INFO:Checking exceptions
2024-09-11 22:30:54,520:INFO:Preloading libraries
2024-09-11 22:30:54,521:INFO:Set up data.
2024-09-11 22:30:54,538:INFO:Set up index.
2024-09-11 22:30:54,693:INFO:Initializing predict_model()
2024-09-11 22:30:54,693:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,694:INFO:Checking exceptions
2024-09-11 22:30:54,694:INFO:Preloading libraries
2024-09-11 22:30:54,695:INFO:Set up data.
2024-09-11 22:30:54,714:INFO:Set up index.
2024-09-11 22:30:54,841:INFO:Initializing predict_model()
2024-09-11 22:30:54,841:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,841:INFO:Checking exceptions
2024-09-11 22:30:54,841:INFO:Preloading libraries
2024-09-11 22:30:54,842:INFO:Set up data.
2024-09-11 22:30:54,864:INFO:Set up index.
2024-09-11 22:30:54,990:INFO:Initializing predict_model()
2024-09-11 22:30:54,990:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:54,990:INFO:Checking exceptions
2024-09-11 22:30:54,990:INFO:Preloading libraries
2024-09-11 22:30:54,991:INFO:Set up data.
2024-09-11 22:30:55,008:INFO:Set up index.
2024-09-11 22:30:55,126:INFO:Initializing predict_model()
2024-09-11 22:30:55,127:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:55,127:INFO:Checking exceptions
2024-09-11 22:30:55,128:INFO:Preloading libraries
2024-09-11 22:30:55,128:INFO:Set up data.
2024-09-11 22:30:55,144:INFO:Set up index.
2024-09-11 22:30:55,261:INFO:Initializing predict_model()
2024-09-11 22:30:55,262:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9DB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 22:30:55,262:INFO:Checking exceptions
2024-09-11 22:30:55,262:INFO:Preloading libraries
2024-09-11 22:30:55,263:INFO:Set up data.
2024-09-11 22:30:55,281:INFO:Set up index.
2024-09-11 22:30:55,468:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:553: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:30:55,469:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:33:48,594:INFO:Initializing load_model()
2024-09-11 22:33:48,596:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,604:INFO:Initializing load_model()
2024-09-11 22:33:48,604:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,610:INFO:Initializing load_model()
2024-09-11 22:33:48,610:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,667:INFO:Initializing load_model()
2024-09-11 22:33:48,667:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,683:INFO:Initializing load_model()
2024-09-11 22:33:48,684:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,701:INFO:Initializing load_model()
2024-09-11 22:33:48,701:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,722:INFO:Initializing load_model()
2024-09-11 22:33:48,722:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,727:INFO:Initializing load_model()
2024-09-11 22:33:48,728:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,736:INFO:Initializing load_model()
2024-09-11 22:33:48,736:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,742:INFO:Initializing load_model()
2024-09-11 22:33:48,742:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,749:INFO:Initializing load_model()
2024-09-11 22:33:48,749:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:48,819:INFO:Initializing predict_model()
2024-09-11 22:33:48,820:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FDC690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A093420>)
2024-09-11 22:33:48,820:INFO:Checking exceptions
2024-09-11 22:33:48,821:INFO:Preloading libraries
2024-09-11 22:33:48,821:INFO:Set up data.
2024-09-11 22:33:48,842:INFO:Set up index.
2024-09-11 22:33:49,046:INFO:Initializing predict_model()
2024-09-11 22:33:49,046:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1B20>)
2024-09-11 22:33:49,046:INFO:Checking exceptions
2024-09-11 22:33:49,046:INFO:Preloading libraries
2024-09-11 22:33:49,049:INFO:Set up data.
2024-09-11 22:33:49,076:INFO:Set up index.
2024-09-11 22:33:49,211:INFO:Initializing predict_model()
2024-09-11 22:33:49,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A49310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:49,211:INFO:Checking exceptions
2024-09-11 22:33:49,211:INFO:Preloading libraries
2024-09-11 22:33:49,215:INFO:Set up data.
2024-09-11 22:33:49,236:INFO:Set up index.
2024-09-11 22:33:49,425:INFO:Initializing predict_model()
2024-09-11 22:33:49,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A49310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:49,426:INFO:Checking exceptions
2024-09-11 22:33:49,426:INFO:Preloading libraries
2024-09-11 22:33:49,426:INFO:Set up data.
2024-09-11 22:33:49,442:INFO:Set up index.
2024-09-11 22:33:49,643:INFO:Initializing predict_model()
2024-09-11 22:33:49,643:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407D68B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:49,643:INFO:Checking exceptions
2024-09-11 22:33:49,644:INFO:Preloading libraries
2024-09-11 22:33:49,644:INFO:Set up data.
2024-09-11 22:33:49,659:INFO:Set up index.
2024-09-11 22:33:49,822:INFO:Initializing predict_model()
2024-09-11 22:33:49,822:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407D68B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:49,822:INFO:Checking exceptions
2024-09-11 22:33:49,822:INFO:Preloading libraries
2024-09-11 22:33:49,822:INFO:Set up data.
2024-09-11 22:33:49,844:INFO:Set up index.
2024-09-11 22:33:49,994:INFO:Initializing predict_model()
2024-09-11 22:33:49,994:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:49,995:INFO:Checking exceptions
2024-09-11 22:33:49,995:INFO:Preloading libraries
2024-09-11 22:33:49,996:INFO:Set up data.
2024-09-11 22:33:50,007:INFO:Set up index.
2024-09-11 22:33:50,121:INFO:Initializing predict_model()
2024-09-11 22:33:50,121:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:50,121:INFO:Checking exceptions
2024-09-11 22:33:50,121:INFO:Preloading libraries
2024-09-11 22:33:50,121:INFO:Set up data.
2024-09-11 22:33:50,142:INFO:Set up index.
2024-09-11 22:33:50,250:INFO:Initializing predict_model()
2024-09-11 22:33:50,250:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407698810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:50,250:INFO:Checking exceptions
2024-09-11 22:33:50,250:INFO:Preloading libraries
2024-09-11 22:33:50,250:INFO:Set up data.
2024-09-11 22:33:50,273:INFO:Set up index.
2024-09-11 22:33:50,396:INFO:Initializing predict_model()
2024-09-11 22:33:50,397:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254081CED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:50,397:INFO:Checking exceptions
2024-09-11 22:33:50,397:INFO:Preloading libraries
2024-09-11 22:33:50,397:INFO:Set up data.
2024-09-11 22:33:50,415:INFO:Set up index.
2024-09-11 22:33:50,529:INFO:Initializing predict_model()
2024-09-11 22:33:50,529:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E5850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:33:50,530:INFO:Checking exceptions
2024-09-11 22:33:50,530:INFO:Preloading libraries
2024-09-11 22:33:50,532:INFO:Set up data.
2024-09-11 22:33:50,548:INFO:Set up index.
2024-09-11 22:33:50,742:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:33:50,742:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  

2024-09-11 22:33:52,151:INFO:Initializing load_model()
2024-09-11 22:33:52,151:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,151:INFO:Initializing load_model()
2024-09-11 22:33:52,151:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,167:INFO:Initializing load_model()
2024-09-11 22:33:52,167:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,217:INFO:Initializing load_model()
2024-09-11 22:33:52,218:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,232:INFO:Initializing load_model()
2024-09-11 22:33:52,234:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,254:INFO:Initializing load_model()
2024-09-11 22:33:52,254:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,272:INFO:Initializing load_model()
2024-09-11 22:33:52,273:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,278:INFO:Initializing load_model()
2024-09-11 22:33:52,278:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,286:INFO:Initializing load_model()
2024-09-11 22:33:52,286:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,292:INFO:Initializing load_model()
2024-09-11 22:33:52,292:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,300:INFO:Initializing load_model()
2024-09-11 22:33:52,300:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:33:52,394:INFO:Initializing predict_model()
2024-09-11 22:33:52,395:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1004D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A091080>)
2024-09-11 22:33:52,395:INFO:Checking exceptions
2024-09-11 22:33:52,395:INFO:Preloading libraries
2024-09-11 22:33:52,396:INFO:Set up data.
2024-09-11 22:33:52,423:INFO:Set up index.
2024-09-11 22:33:52,563:INFO:Initializing predict_model()
2024-09-11 22:33:52,563:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:52,563:INFO:Checking exceptions
2024-09-11 22:33:52,564:INFO:Preloading libraries
2024-09-11 22:33:52,565:INFO:Set up data.
2024-09-11 22:33:52,586:INFO:Set up index.
2024-09-11 22:33:52,718:INFO:Initializing predict_model()
2024-09-11 22:33:52,718:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:52,718:INFO:Checking exceptions
2024-09-11 22:33:52,719:INFO:Preloading libraries
2024-09-11 22:33:52,719:INFO:Set up data.
2024-09-11 22:33:52,738:INFO:Set up index.
2024-09-11 22:33:52,914:INFO:Initializing predict_model()
2024-09-11 22:33:52,914:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:52,914:INFO:Checking exceptions
2024-09-11 22:33:52,915:INFO:Preloading libraries
2024-09-11 22:33:52,915:INFO:Set up data.
2024-09-11 22:33:52,932:INFO:Set up index.
2024-09-11 22:33:53,103:INFO:Initializing predict_model()
2024-09-11 22:33:53,103:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,104:INFO:Checking exceptions
2024-09-11 22:33:53,104:INFO:Preloading libraries
2024-09-11 22:33:53,104:INFO:Set up data.
2024-09-11 22:33:53,125:INFO:Set up index.
2024-09-11 22:33:53,287:INFO:Initializing predict_model()
2024-09-11 22:33:53,288:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,288:INFO:Checking exceptions
2024-09-11 22:33:53,288:INFO:Preloading libraries
2024-09-11 22:33:53,289:INFO:Set up data.
2024-09-11 22:33:53,306:INFO:Set up index.
2024-09-11 22:33:53,463:INFO:Initializing predict_model()
2024-09-11 22:33:53,464:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,464:INFO:Checking exceptions
2024-09-11 22:33:53,464:INFO:Preloading libraries
2024-09-11 22:33:53,465:INFO:Set up data.
2024-09-11 22:33:53,487:INFO:Set up index.
2024-09-11 22:33:53,612:INFO:Initializing predict_model()
2024-09-11 22:33:53,612:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F09350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,613:INFO:Checking exceptions
2024-09-11 22:33:53,613:INFO:Preloading libraries
2024-09-11 22:33:53,614:INFO:Set up data.
2024-09-11 22:33:53,631:INFO:Set up index.
2024-09-11 22:33:53,757:INFO:Initializing predict_model()
2024-09-11 22:33:53,758:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CF390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,758:INFO:Checking exceptions
2024-09-11 22:33:53,758:INFO:Preloading libraries
2024-09-11 22:33:53,759:INFO:Set up data.
2024-09-11 22:33:53,777:INFO:Set up index.
2024-09-11 22:33:53,894:INFO:Initializing predict_model()
2024-09-11 22:33:53,895:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:53,895:INFO:Checking exceptions
2024-09-11 22:33:53,895:INFO:Preloading libraries
2024-09-11 22:33:53,896:INFO:Set up data.
2024-09-11 22:33:53,916:INFO:Set up index.
2024-09-11 22:33:54,029:INFO:Initializing predict_model()
2024-09-11 22:33:54,030:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:33:54,030:INFO:Checking exceptions
2024-09-11 22:33:54,030:INFO:Preloading libraries
2024-09-11 22:33:54,031:INFO:Set up data.
2024-09-11 22:33:54,049:INFO:Set up index.
2024-09-11 22:33:54,236:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:33:54,238:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  

2024-09-11 22:34:06,379:INFO:Initializing load_model()
2024-09-11 22:34:06,379:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,385:INFO:Initializing load_model()
2024-09-11 22:34:06,385:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,389:INFO:Initializing load_model()
2024-09-11 22:34:06,389:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,452:INFO:Initializing load_model()
2024-09-11 22:34:06,452:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,475:INFO:Initializing load_model()
2024-09-11 22:34:06,475:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,494:INFO:Initializing load_model()
2024-09-11 22:34:06,494:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,512:INFO:Initializing load_model()
2024-09-11 22:34:06,513:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,520:INFO:Initializing load_model()
2024-09-11 22:34:06,522:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,528:INFO:Initializing load_model()
2024-09-11 22:34:06,529:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,535:INFO:Initializing load_model()
2024-09-11 22:34:06,535:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,547:INFO:Initializing load_model()
2024-09-11 22:34:06,547:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:06,651:INFO:Initializing predict_model()
2024-09-11 22:34:06,652:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099EDF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B38A700>)
2024-09-11 22:34:06,652:INFO:Checking exceptions
2024-09-11 22:34:06,652:INFO:Preloading libraries
2024-09-11 22:34:06,652:INFO:Set up data.
2024-09-11 22:34:06,676:INFO:Set up index.
2024-09-11 22:34:06,814:INFO:Initializing predict_model()
2024-09-11 22:34:06,814:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:06,814:INFO:Checking exceptions
2024-09-11 22:34:06,814:INFO:Preloading libraries
2024-09-11 22:34:06,815:INFO:Set up data.
2024-09-11 22:34:06,827:INFO:Set up index.
2024-09-11 22:34:06,965:INFO:Initializing predict_model()
2024-09-11 22:34:06,965:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:06,965:INFO:Checking exceptions
2024-09-11 22:34:06,965:INFO:Preloading libraries
2024-09-11 22:34:06,965:INFO:Set up data.
2024-09-11 22:34:06,989:INFO:Set up index.
2024-09-11 22:34:07,161:INFO:Initializing predict_model()
2024-09-11 22:34:07,161:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,161:INFO:Checking exceptions
2024-09-11 22:34:07,161:INFO:Preloading libraries
2024-09-11 22:34:07,161:INFO:Set up data.
2024-09-11 22:34:07,180:INFO:Set up index.
2024-09-11 22:34:07,355:INFO:Initializing predict_model()
2024-09-11 22:34:07,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C6D9F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,355:INFO:Checking exceptions
2024-09-11 22:34:07,355:INFO:Preloading libraries
2024-09-11 22:34:07,357:INFO:Set up data.
2024-09-11 22:34:07,378:INFO:Set up index.
2024-09-11 22:34:07,533:INFO:Initializing predict_model()
2024-09-11 22:34:07,533:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,533:INFO:Checking exceptions
2024-09-11 22:34:07,533:INFO:Preloading libraries
2024-09-11 22:34:07,533:INFO:Set up data.
2024-09-11 22:34:07,554:INFO:Set up index.
2024-09-11 22:34:07,704:INFO:Initializing predict_model()
2024-09-11 22:34:07,705:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,705:INFO:Checking exceptions
2024-09-11 22:34:07,705:INFO:Preloading libraries
2024-09-11 22:34:07,705:INFO:Set up data.
2024-09-11 22:34:07,725:INFO:Set up index.
2024-09-11 22:34:07,843:INFO:Initializing predict_model()
2024-09-11 22:34:07,843:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,843:INFO:Checking exceptions
2024-09-11 22:34:07,844:INFO:Preloading libraries
2024-09-11 22:34:07,844:INFO:Set up data.
2024-09-11 22:34:07,863:INFO:Set up index.
2024-09-11 22:34:07,986:INFO:Initializing predict_model()
2024-09-11 22:34:07,986:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9DB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:07,987:INFO:Checking exceptions
2024-09-11 22:34:07,987:INFO:Preloading libraries
2024-09-11 22:34:07,987:INFO:Set up data.
2024-09-11 22:34:08,004:INFO:Set up index.
2024-09-11 22:34:08,128:INFO:Initializing predict_model()
2024-09-11 22:34:08,128:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C6D9F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:08,128:INFO:Checking exceptions
2024-09-11 22:34:08,129:INFO:Preloading libraries
2024-09-11 22:34:08,129:INFO:Set up data.
2024-09-11 22:34:08,146:INFO:Set up index.
2024-09-11 22:34:08,269:INFO:Initializing predict_model()
2024-09-11 22:34:08,269:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E6250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 22:34:08,270:INFO:Checking exceptions
2024-09-11 22:34:08,270:INFO:Preloading libraries
2024-09-11 22:34:08,271:INFO:Set up data.
2024-09-11 22:34:08,288:INFO:Set up index.
2024-09-11 22:34:08,498:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:34:08,499:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:34:10,574:INFO:Initializing load_model()
2024-09-11 22:34:10,575:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,579:INFO:Initializing load_model()
2024-09-11 22:34:10,579:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,584:INFO:Initializing load_model()
2024-09-11 22:34:10,584:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,639:INFO:Initializing load_model()
2024-09-11 22:34:10,639:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,655:INFO:Initializing load_model()
2024-09-11 22:34:10,656:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,676:INFO:Initializing load_model()
2024-09-11 22:34:10,677:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,696:INFO:Initializing load_model()
2024-09-11 22:34:10,696:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,702:INFO:Initializing load_model()
2024-09-11 22:34:10,702:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,709:INFO:Initializing load_model()
2024-09-11 22:34:10,710:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,715:INFO:Initializing load_model()
2024-09-11 22:34:10,716:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,721:INFO:Initializing load_model()
2024-09-11 22:34:10,722:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:10,806:INFO:Initializing predict_model()
2024-09-11 22:34:10,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094B7B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F6F20>)
2024-09-11 22:34:10,807:INFO:Checking exceptions
2024-09-11 22:34:10,807:INFO:Preloading libraries
2024-09-11 22:34:10,808:INFO:Set up data.
2024-09-11 22:34:10,828:INFO:Set up index.
2024-09-11 22:34:10,956:INFO:Initializing predict_model()
2024-09-11 22:34:10,956:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05B490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:10,958:INFO:Checking exceptions
2024-09-11 22:34:10,958:INFO:Preloading libraries
2024-09-11 22:34:10,959:INFO:Set up data.
2024-09-11 22:34:10,976:INFO:Set up index.
2024-09-11 22:34:11,110:INFO:Initializing predict_model()
2024-09-11 22:34:11,110:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D69D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:11,110:INFO:Checking exceptions
2024-09-11 22:34:11,111:INFO:Preloading libraries
2024-09-11 22:34:11,111:INFO:Set up data.
2024-09-11 22:34:11,134:INFO:Set up index.
2024-09-11 22:34:11,343:INFO:Initializing predict_model()
2024-09-11 22:34:11,343:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD61CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:11,344:INFO:Checking exceptions
2024-09-11 22:34:11,344:INFO:Preloading libraries
2024-09-11 22:34:11,345:INFO:Set up data.
2024-09-11 22:34:11,366:INFO:Set up index.
2024-09-11 22:34:11,547:INFO:Initializing predict_model()
2024-09-11 22:34:11,547:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B501590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:11,548:INFO:Checking exceptions
2024-09-11 22:34:11,548:INFO:Preloading libraries
2024-09-11 22:34:11,549:INFO:Set up data.
2024-09-11 22:34:11,567:INFO:Set up index.
2024-09-11 22:34:11,731:INFO:Initializing predict_model()
2024-09-11 22:34:11,731:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:11,732:INFO:Checking exceptions
2024-09-11 22:34:11,733:INFO:Preloading libraries
2024-09-11 22:34:11,733:INFO:Set up data.
2024-09-11 22:34:11,750:INFO:Set up index.
2024-09-11 22:34:11,901:INFO:Initializing predict_model()
2024-09-11 22:34:11,902:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:11,902:INFO:Checking exceptions
2024-09-11 22:34:11,903:INFO:Preloading libraries
2024-09-11 22:34:11,903:INFO:Set up data.
2024-09-11 22:34:11,921:INFO:Set up index.
2024-09-11 22:34:12,047:INFO:Initializing predict_model()
2024-09-11 22:34:12,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B30CC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:12,048:INFO:Checking exceptions
2024-09-11 22:34:12,048:INFO:Preloading libraries
2024-09-11 22:34:12,049:INFO:Set up data.
2024-09-11 22:34:12,069:INFO:Set up index.
2024-09-11 22:34:12,197:INFO:Initializing predict_model()
2024-09-11 22:34:12,197:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540658C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:12,197:INFO:Checking exceptions
2024-09-11 22:34:12,197:INFO:Preloading libraries
2024-09-11 22:34:12,198:INFO:Set up data.
2024-09-11 22:34:12,216:INFO:Set up index.
2024-09-11 22:34:12,329:INFO:Initializing predict_model()
2024-09-11 22:34:12,329:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:12,329:INFO:Checking exceptions
2024-09-11 22:34:12,330:INFO:Preloading libraries
2024-09-11 22:34:12,330:INFO:Set up data.
2024-09-11 22:34:12,348:INFO:Set up index.
2024-09-11 22:34:12,463:INFO:Initializing predict_model()
2024-09-11 22:34:12,463:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CE7AB60>)
2024-09-11 22:34:12,464:INFO:Checking exceptions
2024-09-11 22:34:12,464:INFO:Preloading libraries
2024-09-11 22:34:12,465:INFO:Set up data.
2024-09-11 22:34:12,482:INFO:Set up index.
2024-09-11 22:34:12,665:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:34:12,665:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:34:46,492:INFO:Initializing load_model()
2024-09-11 22:34:46,494:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,498:INFO:Initializing load_model()
2024-09-11 22:34:46,499:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,504:INFO:Initializing load_model()
2024-09-11 22:34:46,505:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,558:INFO:Initializing load_model()
2024-09-11 22:34:46,558:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,574:INFO:Initializing load_model()
2024-09-11 22:34:46,576:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,594:INFO:Initializing load_model()
2024-09-11 22:34:46,595:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,612:INFO:Initializing load_model()
2024-09-11 22:34:46,612:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,612:INFO:Initializing load_model()
2024-09-11 22:34:46,612:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,629:INFO:Initializing load_model()
2024-09-11 22:34:46,629:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,635:INFO:Initializing load_model()
2024-09-11 22:34:46,636:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,643:INFO:Initializing load_model()
2024-09-11 22:34:46,643:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:34:46,716:INFO:Initializing predict_model()
2024-09-11 22:34:46,716:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409547910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F5800>)
2024-09-11 22:34:46,717:INFO:Checking exceptions
2024-09-11 22:34:46,717:INFO:Preloading libraries
2024-09-11 22:34:46,718:INFO:Set up data.
2024-09-11 22:34:46,728:INFO:Set up index.
2024-09-11 22:34:46,880:INFO:Initializing predict_model()
2024-09-11 22:34:46,880:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C6D9F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:46,880:INFO:Checking exceptions
2024-09-11 22:34:46,881:INFO:Preloading libraries
2024-09-11 22:34:46,881:INFO:Set up data.
2024-09-11 22:34:46,895:INFO:Set up index.
2024-09-11 22:34:47,042:INFO:Initializing predict_model()
2024-09-11 22:34:47,043:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A41910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:47,043:INFO:Checking exceptions
2024-09-11 22:34:47,043:INFO:Preloading libraries
2024-09-11 22:34:47,044:INFO:Set up data.
2024-09-11 22:34:47,064:INFO:Set up index.
2024-09-11 22:34:47,294:INFO:Initializing predict_model()
2024-09-11 22:34:47,294:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C71F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:47,294:INFO:Checking exceptions
2024-09-11 22:34:47,294:INFO:Preloading libraries
2024-09-11 22:34:47,301:INFO:Set up data.
2024-09-11 22:34:47,327:INFO:Set up index.
2024-09-11 22:34:47,515:INFO:Initializing predict_model()
2024-09-11 22:34:47,515:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078D7190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:47,515:INFO:Checking exceptions
2024-09-11 22:34:47,515:INFO:Preloading libraries
2024-09-11 22:34:47,515:INFO:Set up data.
2024-09-11 22:34:47,538:INFO:Set up index.
2024-09-11 22:34:47,723:INFO:Initializing predict_model()
2024-09-11 22:34:47,723:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078D7190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:47,723:INFO:Checking exceptions
2024-09-11 22:34:47,723:INFO:Preloading libraries
2024-09-11 22:34:47,725:INFO:Set up data.
2024-09-11 22:34:47,747:INFO:Set up index.
2024-09-11 22:34:47,919:INFO:Initializing predict_model()
2024-09-11 22:34:47,919:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C71F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:47,920:INFO:Checking exceptions
2024-09-11 22:34:47,920:INFO:Preloading libraries
2024-09-11 22:34:47,920:INFO:Set up data.
2024-09-11 22:34:47,942:INFO:Set up index.
2024-09-11 22:34:48,076:INFO:Initializing predict_model()
2024-09-11 22:34:48,076:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C71F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:48,076:INFO:Checking exceptions
2024-09-11 22:34:48,076:INFO:Preloading libraries
2024-09-11 22:34:48,076:INFO:Set up data.
2024-09-11 22:34:48,107:INFO:Set up index.
2024-09-11 22:34:48,280:INFO:Initializing predict_model()
2024-09-11 22:34:48,280:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF76B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:48,280:INFO:Checking exceptions
2024-09-11 22:34:48,280:INFO:Preloading libraries
2024-09-11 22:34:48,280:INFO:Set up data.
2024-09-11 22:34:48,310:INFO:Set up index.
2024-09-11 22:34:48,428:INFO:Initializing predict_model()
2024-09-11 22:34:48,428:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:48,428:INFO:Checking exceptions
2024-09-11 22:34:48,428:INFO:Preloading libraries
2024-09-11 22:34:48,428:INFO:Set up data.
2024-09-11 22:34:48,448:INFO:Set up index.
2024-09-11 22:34:48,562:INFO:Initializing predict_model()
2024-09-11 22:34:48,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661E8E0>)
2024-09-11 22:34:48,562:INFO:Checking exceptions
2024-09-11 22:34:48,562:INFO:Preloading libraries
2024-09-11 22:34:48,562:INFO:Set up data.
2024-09-11 22:34:48,583:INFO:Set up index.
2024-09-11 22:34:48,807:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:34:48,807:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:35:02,185:INFO:Initializing load_model()
2024-09-11 22:35:02,195:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,202:INFO:Initializing load_model()
2024-09-11 22:35:02,203:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,207:INFO:Initializing load_model()
2024-09-11 22:35:02,207:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,253:INFO:Initializing load_model()
2024-09-11 22:35:02,253:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,269:INFO:Initializing load_model()
2024-09-11 22:35:02,269:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,292:INFO:Initializing load_model()
2024-09-11 22:35:02,292:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,304:INFO:Initializing load_model()
2024-09-11 22:35:02,304:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,318:INFO:Initializing load_model()
2024-09-11 22:35:02,318:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,325:INFO:Initializing load_model()
2024-09-11 22:35:02,325:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,325:INFO:Initializing load_model()
2024-09-11 22:35:02,325:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,337:INFO:Initializing load_model()
2024-09-11 22:35:02,337:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:02,400:INFO:Initializing predict_model()
2024-09-11 22:35:02,400:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B494CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A093060>)
2024-09-11 22:35:02,400:INFO:Checking exceptions
2024-09-11 22:35:02,400:INFO:Preloading libraries
2024-09-11 22:35:02,410:INFO:Set up data.
2024-09-11 22:35:02,428:INFO:Set up index.
2024-09-11 22:35:02,574:INFO:Initializing predict_model()
2024-09-11 22:35:02,574:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409B928D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:02,574:INFO:Checking exceptions
2024-09-11 22:35:02,574:INFO:Preloading libraries
2024-09-11 22:35:02,574:INFO:Set up data.
2024-09-11 22:35:02,599:INFO:Set up index.
2024-09-11 22:35:02,743:INFO:Initializing predict_model()
2024-09-11 22:35:02,743:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:02,743:INFO:Checking exceptions
2024-09-11 22:35:02,743:INFO:Preloading libraries
2024-09-11 22:35:02,743:INFO:Set up data.
2024-09-11 22:35:02,764:INFO:Set up index.
2024-09-11 22:35:02,944:INFO:Initializing predict_model()
2024-09-11 22:35:02,945:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:02,945:INFO:Checking exceptions
2024-09-11 22:35:02,945:INFO:Preloading libraries
2024-09-11 22:35:02,946:INFO:Set up data.
2024-09-11 22:35:02,959:INFO:Set up index.
2024-09-11 22:35:03,146:INFO:Initializing predict_model()
2024-09-11 22:35:03,146:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,147:INFO:Checking exceptions
2024-09-11 22:35:03,147:INFO:Preloading libraries
2024-09-11 22:35:03,147:INFO:Set up data.
2024-09-11 22:35:03,164:INFO:Set up index.
2024-09-11 22:35:03,319:INFO:Initializing predict_model()
2024-09-11 22:35:03,319:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,319:INFO:Checking exceptions
2024-09-11 22:35:03,319:INFO:Preloading libraries
2024-09-11 22:35:03,319:INFO:Set up data.
2024-09-11 22:35:03,343:INFO:Set up index.
2024-09-11 22:35:03,504:INFO:Initializing predict_model()
2024-09-11 22:35:03,505:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,505:INFO:Checking exceptions
2024-09-11 22:35:03,505:INFO:Preloading libraries
2024-09-11 22:35:03,506:INFO:Set up data.
2024-09-11 22:35:03,524:INFO:Set up index.
2024-09-11 22:35:03,637:INFO:Initializing predict_model()
2024-09-11 22:35:03,637:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,637:INFO:Checking exceptions
2024-09-11 22:35:03,637:INFO:Preloading libraries
2024-09-11 22:35:03,637:INFO:Set up data.
2024-09-11 22:35:03,658:INFO:Set up index.
2024-09-11 22:35:03,770:INFO:Initializing predict_model()
2024-09-11 22:35:03,770:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,770:INFO:Checking exceptions
2024-09-11 22:35:03,780:INFO:Preloading libraries
2024-09-11 22:35:03,780:INFO:Set up data.
2024-09-11 22:35:03,798:INFO:Set up index.
2024-09-11 22:35:03,912:INFO:Initializing predict_model()
2024-09-11 22:35:03,912:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254081CED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:03,912:INFO:Checking exceptions
2024-09-11 22:35:03,912:INFO:Preloading libraries
2024-09-11 22:35:03,914:INFO:Set up data.
2024-09-11 22:35:03,929:INFO:Set up index.
2024-09-11 22:35:04,040:INFO:Initializing predict_model()
2024-09-11 22:35:04,040:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-11 22:35:04,040:INFO:Checking exceptions
2024-09-11 22:35:04,040:INFO:Preloading libraries
2024-09-11 22:35:04,040:INFO:Set up data.
2024-09-11 22:35:04,062:INFO:Set up index.
2024-09-11 22:35:04,243:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:35:04,243:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:35:05,652:INFO:Initializing load_model()
2024-09-11 22:35:05,652:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,659:INFO:Initializing load_model()
2024-09-11 22:35:05,660:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,675:INFO:Initializing load_model()
2024-09-11 22:35:05,676:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,733:INFO:Initializing load_model()
2024-09-11 22:35:05,733:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,749:INFO:Initializing load_model()
2024-09-11 22:35:05,749:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,766:INFO:Initializing load_model()
2024-09-11 22:35:05,766:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,784:INFO:Initializing load_model()
2024-09-11 22:35:05,784:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,790:INFO:Initializing load_model()
2024-09-11 22:35:05,790:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,796:INFO:Initializing load_model()
2024-09-11 22:35:05,796:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,805:INFO:Initializing load_model()
2024-09-11 22:35:05,805:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,810:INFO:Initializing load_model()
2024-09-11 22:35:05,810:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:05,881:INFO:Initializing predict_model()
2024-09-11 22:35:05,882:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B344650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936F060>)
2024-09-11 22:35:05,883:INFO:Checking exceptions
2024-09-11 22:35:05,883:INFO:Preloading libraries
2024-09-11 22:35:05,885:INFO:Set up data.
2024-09-11 22:35:05,904:INFO:Set up index.
2024-09-11 22:35:06,044:INFO:Initializing predict_model()
2024-09-11 22:35:06,044:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,044:INFO:Checking exceptions
2024-09-11 22:35:06,044:INFO:Preloading libraries
2024-09-11 22:35:06,045:INFO:Set up data.
2024-09-11 22:35:06,066:INFO:Set up index.
2024-09-11 22:35:06,201:INFO:Initializing predict_model()
2024-09-11 22:35:06,202:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254066196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,202:INFO:Checking exceptions
2024-09-11 22:35:06,202:INFO:Preloading libraries
2024-09-11 22:35:06,203:INFO:Set up data.
2024-09-11 22:35:06,222:INFO:Set up index.
2024-09-11 22:35:06,417:INFO:Initializing predict_model()
2024-09-11 22:35:06,418:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,418:INFO:Checking exceptions
2024-09-11 22:35:06,419:INFO:Preloading libraries
2024-09-11 22:35:06,420:INFO:Set up data.
2024-09-11 22:35:06,436:INFO:Set up index.
2024-09-11 22:35:06,618:INFO:Initializing predict_model()
2024-09-11 22:35:06,619:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,619:INFO:Checking exceptions
2024-09-11 22:35:06,619:INFO:Preloading libraries
2024-09-11 22:35:06,620:INFO:Set up data.
2024-09-11 22:35:06,637:INFO:Set up index.
2024-09-11 22:35:06,795:INFO:Initializing predict_model()
2024-09-11 22:35:06,796:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,796:INFO:Checking exceptions
2024-09-11 22:35:06,797:INFO:Preloading libraries
2024-09-11 22:35:06,797:INFO:Set up data.
2024-09-11 22:35:06,812:INFO:Set up index.
2024-09-11 22:35:06,966:INFO:Initializing predict_model()
2024-09-11 22:35:06,966:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:06,966:INFO:Checking exceptions
2024-09-11 22:35:06,968:INFO:Preloading libraries
2024-09-11 22:35:06,969:INFO:Set up data.
2024-09-11 22:35:06,986:INFO:Set up index.
2024-09-11 22:35:07,111:INFO:Initializing predict_model()
2024-09-11 22:35:07,111:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:07,111:INFO:Checking exceptions
2024-09-11 22:35:07,111:INFO:Preloading libraries
2024-09-11 22:35:07,113:INFO:Set up data.
2024-09-11 22:35:07,132:INFO:Set up index.
2024-09-11 22:35:07,259:INFO:Initializing predict_model()
2024-09-11 22:35:07,259:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C487950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:07,259:INFO:Checking exceptions
2024-09-11 22:35:07,260:INFO:Preloading libraries
2024-09-11 22:35:07,261:INFO:Set up data.
2024-09-11 22:35:07,278:INFO:Set up index.
2024-09-11 22:35:07,393:INFO:Initializing predict_model()
2024-09-11 22:35:07,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:07,394:INFO:Checking exceptions
2024-09-11 22:35:07,395:INFO:Preloading libraries
2024-09-11 22:35:07,395:INFO:Set up data.
2024-09-11 22:35:07,411:INFO:Set up index.
2024-09-11 22:35:07,526:INFO:Initializing predict_model()
2024-09-11 22:35:07,527:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C487950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401477060>)
2024-09-11 22:35:07,527:INFO:Checking exceptions
2024-09-11 22:35:07,528:INFO:Preloading libraries
2024-09-11 22:35:07,529:INFO:Set up data.
2024-09-11 22:35:07,545:INFO:Set up index.
2024-09-11 22:35:07,729:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:35:07,730:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:35:30,958:INFO:Initializing load_model()
2024-09-11 22:35:30,958:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:30,958:INFO:Initializing load_model()
2024-09-11 22:35:30,958:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:30,971:INFO:Initializing load_model()
2024-09-11 22:35:30,972:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,021:INFO:Initializing load_model()
2024-09-11 22:35:31,021:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,045:INFO:Initializing load_model()
2024-09-11 22:35:31,045:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,062:INFO:Initializing load_model()
2024-09-11 22:35:31,063:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,081:INFO:Initializing load_model()
2024-09-11 22:35:31,081:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,088:INFO:Initializing load_model()
2024-09-11 22:35:31,088:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,095:INFO:Initializing load_model()
2024-09-11 22:35:31,095:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,100:INFO:Initializing load_model()
2024-09-11 22:35:31,100:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,108:INFO:Initializing load_model()
2024-09-11 22:35:31,108:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:31,194:INFO:Initializing predict_model()
2024-09-11 22:35:31,212:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1DDE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A20D800>)
2024-09-11 22:35:31,212:INFO:Checking exceptions
2024-09-11 22:35:31,212:INFO:Preloading libraries
2024-09-11 22:35:31,212:INFO:Set up data.
2024-09-11 22:35:31,233:INFO:Set up index.
2024-09-11 22:35:31,356:INFO:Initializing predict_model()
2024-09-11 22:35:31,356:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254081CED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:31,356:INFO:Checking exceptions
2024-09-11 22:35:31,366:INFO:Preloading libraries
2024-09-11 22:35:31,366:INFO:Set up data.
2024-09-11 22:35:31,388:INFO:Set up index.
2024-09-11 22:35:31,537:INFO:Initializing predict_model()
2024-09-11 22:35:31,537:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:31,537:INFO:Checking exceptions
2024-09-11 22:35:31,537:INFO:Preloading libraries
2024-09-11 22:35:31,537:INFO:Set up data.
2024-09-11 22:35:31,563:INFO:Set up index.
2024-09-11 22:35:31,777:INFO:Initializing predict_model()
2024-09-11 22:35:31,777:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:31,778:INFO:Checking exceptions
2024-09-11 22:35:31,778:INFO:Preloading libraries
2024-09-11 22:35:31,778:INFO:Set up data.
2024-09-11 22:35:31,788:INFO:Set up index.
2024-09-11 22:35:31,984:INFO:Initializing predict_model()
2024-09-11 22:35:31,984:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:31,984:INFO:Checking exceptions
2024-09-11 22:35:31,984:INFO:Preloading libraries
2024-09-11 22:35:31,985:INFO:Set up data.
2024-09-11 22:35:32,008:INFO:Set up index.
2024-09-11 22:35:32,177:INFO:Initializing predict_model()
2024-09-11 22:35:32,177:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,177:INFO:Checking exceptions
2024-09-11 22:35:32,177:INFO:Preloading libraries
2024-09-11 22:35:32,177:INFO:Set up data.
2024-09-11 22:35:32,201:INFO:Set up index.
2024-09-11 22:35:32,367:INFO:Initializing predict_model()
2024-09-11 22:35:32,368:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,368:INFO:Checking exceptions
2024-09-11 22:35:32,368:INFO:Preloading libraries
2024-09-11 22:35:32,368:INFO:Set up data.
2024-09-11 22:35:32,385:INFO:Set up index.
2024-09-11 22:35:32,500:INFO:Initializing predict_model()
2024-09-11 22:35:32,500:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CF390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,501:INFO:Checking exceptions
2024-09-11 22:35:32,501:INFO:Preloading libraries
2024-09-11 22:35:32,502:INFO:Set up data.
2024-09-11 22:35:32,520:INFO:Set up index.
2024-09-11 22:35:32,634:INFO:Initializing predict_model()
2024-09-11 22:35:32,634:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254788F4050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,634:INFO:Checking exceptions
2024-09-11 22:35:32,634:INFO:Preloading libraries
2024-09-11 22:35:32,635:INFO:Set up data.
2024-09-11 22:35:32,651:INFO:Set up index.
2024-09-11 22:35:32,764:INFO:Initializing predict_model()
2024-09-11 22:35:32,764:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF94A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,764:INFO:Checking exceptions
2024-09-11 22:35:32,765:INFO:Preloading libraries
2024-09-11 22:35:32,765:INFO:Set up data.
2024-09-11 22:35:32,776:INFO:Set up index.
2024-09-11 22:35:32,890:INFO:Initializing predict_model()
2024-09-11 22:35:32,890:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-11 22:35:32,890:INFO:Checking exceptions
2024-09-11 22:35:32,890:INFO:Preloading libraries
2024-09-11 22:35:32,890:INFO:Set up data.
2024-09-11 22:35:32,912:INFO:Set up index.
2024-09-11 22:35:33,091:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:35:33,091:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:35:34,449:INFO:Initializing load_model()
2024-09-11 22:35:34,450:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,456:INFO:Initializing load_model()
2024-09-11 22:35:34,456:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,460:INFO:Initializing load_model()
2024-09-11 22:35:34,461:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,509:INFO:Initializing load_model()
2024-09-11 22:35:34,509:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,527:INFO:Initializing load_model()
2024-09-11 22:35:34,528:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,544:INFO:Initializing load_model()
2024-09-11 22:35:34,545:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,564:INFO:Initializing load_model()
2024-09-11 22:35:34,564:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,571:INFO:Initializing load_model()
2024-09-11 22:35:34,571:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,576:INFO:Initializing load_model()
2024-09-11 22:35:34,577:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,583:INFO:Initializing load_model()
2024-09-11 22:35:34,583:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,590:INFO:Initializing load_model()
2024-09-11 22:35:34,590:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:35:34,660:INFO:Initializing predict_model()
2024-09-11 22:35:34,660:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093DA9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945FC40>)
2024-09-11 22:35:34,661:INFO:Checking exceptions
2024-09-11 22:35:34,661:INFO:Preloading libraries
2024-09-11 22:35:34,662:INFO:Set up data.
2024-09-11 22:35:34,685:INFO:Set up index.
2024-09-11 22:35:34,814:INFO:Initializing predict_model()
2024-09-11 22:35:34,814:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:34,814:INFO:Checking exceptions
2024-09-11 22:35:34,814:INFO:Preloading libraries
2024-09-11 22:35:34,815:INFO:Set up data.
2024-09-11 22:35:34,831:INFO:Set up index.
2024-09-11 22:35:34,948:INFO:Initializing predict_model()
2024-09-11 22:35:34,948:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091FB390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:34,949:INFO:Checking exceptions
2024-09-11 22:35:34,949:INFO:Preloading libraries
2024-09-11 22:35:34,949:INFO:Set up data.
2024-09-11 22:35:34,965:INFO:Set up index.
2024-09-11 22:35:35,133:INFO:Initializing predict_model()
2024-09-11 22:35:35,133:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,133:INFO:Checking exceptions
2024-09-11 22:35:35,133:INFO:Preloading libraries
2024-09-11 22:35:35,134:INFO:Set up data.
2024-09-11 22:35:35,150:INFO:Set up index.
2024-09-11 22:35:35,328:INFO:Initializing predict_model()
2024-09-11 22:35:35,328:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,328:INFO:Checking exceptions
2024-09-11 22:35:35,329:INFO:Preloading libraries
2024-09-11 22:35:35,329:INFO:Set up data.
2024-09-11 22:35:35,347:INFO:Set up index.
2024-09-11 22:35:35,505:INFO:Initializing predict_model()
2024-09-11 22:35:35,505:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,506:INFO:Checking exceptions
2024-09-11 22:35:35,506:INFO:Preloading libraries
2024-09-11 22:35:35,506:INFO:Set up data.
2024-09-11 22:35:35,523:INFO:Set up index.
2024-09-11 22:35:35,679:INFO:Initializing predict_model()
2024-09-11 22:35:35,679:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,679:INFO:Checking exceptions
2024-09-11 22:35:35,679:INFO:Preloading libraries
2024-09-11 22:35:35,680:INFO:Set up data.
2024-09-11 22:35:35,700:INFO:Set up index.
2024-09-11 22:35:35,830:INFO:Initializing predict_model()
2024-09-11 22:35:35,830:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,832:INFO:Checking exceptions
2024-09-11 22:35:35,832:INFO:Preloading libraries
2024-09-11 22:35:35,833:INFO:Set up data.
2024-09-11 22:35:35,853:INFO:Set up index.
2024-09-11 22:35:35,980:INFO:Initializing predict_model()
2024-09-11 22:35:35,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F093D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:35,981:INFO:Checking exceptions
2024-09-11 22:35:35,981:INFO:Preloading libraries
2024-09-11 22:35:35,982:INFO:Set up data.
2024-09-11 22:35:36,005:INFO:Set up index.
2024-09-11 22:35:36,121:INFO:Initializing predict_model()
2024-09-11 22:35:36,122:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C21EF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:36,122:INFO:Checking exceptions
2024-09-11 22:35:36,122:INFO:Preloading libraries
2024-09-11 22:35:36,123:INFO:Set up data.
2024-09-11 22:35:36,139:INFO:Set up index.
2024-09-11 22:35:36,254:INFO:Initializing predict_model()
2024-09-11 22:35:36,255:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-11 22:35:36,255:INFO:Checking exceptions
2024-09-11 22:35:36,255:INFO:Preloading libraries
2024-09-11 22:35:36,256:INFO:Set up data.
2024-09-11 22:35:36,273:INFO:Set up index.
2024-09-11 22:35:36,475:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:35:36,476:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:39:29,883:INFO:Initializing load_model()
2024-09-11 22:39:29,885:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,888:INFO:Initializing load_model()
2024-09-11 22:39:29,888:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,895:INFO:Initializing load_model()
2024-09-11 22:39:29,895:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,950:INFO:Initializing load_model()
2024-09-11 22:39:29,950:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,966:INFO:Initializing load_model()
2024-09-11 22:39:29,966:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,986:INFO:Initializing load_model()
2024-09-11 22:39:29,986:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:29,996:INFO:Initializing load_model()
2024-09-11 22:39:29,996:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:30,012:INFO:Initializing load_model()
2024-09-11 22:39:30,012:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:30,019:INFO:Initializing load_model()
2024-09-11 22:39:30,019:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:30,025:INFO:Initializing load_model()
2024-09-11 22:39:30,025:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:30,032:INFO:Initializing load_model()
2024-09-11 22:39:30,032:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:30,104:INFO:Initializing predict_model()
2024-09-11 22:39:30,104:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409546290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F5620>)
2024-09-11 22:39:30,105:INFO:Checking exceptions
2024-09-11 22:39:30,105:INFO:Preloading libraries
2024-09-11 22:39:30,106:INFO:Set up data.
2024-09-11 22:39:30,152:INFO:Set up index.
2024-09-11 22:39:30,304:INFO:Initializing predict_model()
2024-09-11 22:39:30,304:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:30,304:INFO:Checking exceptions
2024-09-11 22:39:30,304:INFO:Preloading libraries
2024-09-11 22:39:30,304:INFO:Set up data.
2024-09-11 22:39:30,325:INFO:Set up index.
2024-09-11 22:39:30,462:INFO:Initializing predict_model()
2024-09-11 22:39:30,462:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:30,462:INFO:Checking exceptions
2024-09-11 22:39:30,462:INFO:Preloading libraries
2024-09-11 22:39:30,462:INFO:Set up data.
2024-09-11 22:39:30,479:INFO:Set up index.
2024-09-11 22:39:30,657:INFO:Initializing predict_model()
2024-09-11 22:39:30,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:30,657:INFO:Checking exceptions
2024-09-11 22:39:30,658:INFO:Preloading libraries
2024-09-11 22:39:30,658:INFO:Set up data.
2024-09-11 22:39:30,667:INFO:Set up index.
2024-09-11 22:39:30,845:INFO:Initializing predict_model()
2024-09-11 22:39:30,845:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:30,845:INFO:Checking exceptions
2024-09-11 22:39:30,845:INFO:Preloading libraries
2024-09-11 22:39:30,860:INFO:Set up data.
2024-09-11 22:39:30,876:INFO:Set up index.
2024-09-11 22:39:31,035:INFO:Initializing predict_model()
2024-09-11 22:39:31,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,035:INFO:Checking exceptions
2024-09-11 22:39:31,036:INFO:Preloading libraries
2024-09-11 22:39:31,036:INFO:Set up data.
2024-09-11 22:39:31,055:INFO:Set up index.
2024-09-11 22:39:31,213:INFO:Initializing predict_model()
2024-09-11 22:39:31,213:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,213:INFO:Checking exceptions
2024-09-11 22:39:31,213:INFO:Preloading libraries
2024-09-11 22:39:31,214:INFO:Set up data.
2024-09-11 22:39:31,228:INFO:Set up index.
2024-09-11 22:39:31,350:INFO:Initializing predict_model()
2024-09-11 22:39:31,350:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0ED750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,351:INFO:Checking exceptions
2024-09-11 22:39:31,351:INFO:Preloading libraries
2024-09-11 22:39:31,351:INFO:Set up data.
2024-09-11 22:39:31,369:INFO:Set up index.
2024-09-11 22:39:31,495:INFO:Initializing predict_model()
2024-09-11 22:39:31,495:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A036F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,495:INFO:Checking exceptions
2024-09-11 22:39:31,495:INFO:Preloading libraries
2024-09-11 22:39:31,495:INFO:Set up data.
2024-09-11 22:39:31,514:INFO:Set up index.
2024-09-11 22:39:31,631:INFO:Initializing predict_model()
2024-09-11 22:39:31,631:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,631:INFO:Checking exceptions
2024-09-11 22:39:31,631:INFO:Preloading libraries
2024-09-11 22:39:31,631:INFO:Set up data.
2024-09-11 22:39:31,647:INFO:Set up index.
2024-09-11 22:39:31,762:INFO:Initializing predict_model()
2024-09-11 22:39:31,762:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 22:39:31,762:INFO:Checking exceptions
2024-09-11 22:39:31,762:INFO:Preloading libraries
2024-09-11 22:39:31,762:INFO:Set up data.
2024-09-11 22:39:31,784:INFO:Set up index.
2024-09-11 22:39:31,983:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:39:31,984:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:39:33,409:INFO:Initializing load_model()
2024-09-11 22:39:33,409:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,414:INFO:Initializing load_model()
2024-09-11 22:39:33,415:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,420:INFO:Initializing load_model()
2024-09-11 22:39:33,420:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,467:INFO:Initializing load_model()
2024-09-11 22:39:33,468:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,484:INFO:Initializing load_model()
2024-09-11 22:39:33,484:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,503:INFO:Initializing load_model()
2024-09-11 22:39:33,504:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,521:INFO:Initializing load_model()
2024-09-11 22:39:33,522:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,529:INFO:Initializing load_model()
2024-09-11 22:39:33,530:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,536:INFO:Initializing load_model()
2024-09-11 22:39:33,537:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,545:INFO:Initializing load_model()
2024-09-11 22:39:33,546:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,552:INFO:Initializing load_model()
2024-09-11 22:39:33,552:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:39:33,634:INFO:Initializing predict_model()
2024-09-11 22:39:33,634:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540951A450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063060>)
2024-09-11 22:39:33,634:INFO:Checking exceptions
2024-09-11 22:39:33,635:INFO:Preloading libraries
2024-09-11 22:39:33,635:INFO:Set up data.
2024-09-11 22:39:33,667:INFO:Set up index.
2024-09-11 22:39:33,805:INFO:Initializing predict_model()
2024-09-11 22:39:33,805:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407834190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:33,805:INFO:Checking exceptions
2024-09-11 22:39:33,805:INFO:Preloading libraries
2024-09-11 22:39:33,806:INFO:Set up data.
2024-09-11 22:39:33,823:INFO:Set up index.
2024-09-11 22:39:33,974:INFO:Initializing predict_model()
2024-09-11 22:39:33,975:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:33,975:INFO:Checking exceptions
2024-09-11 22:39:33,975:INFO:Preloading libraries
2024-09-11 22:39:33,976:INFO:Set up data.
2024-09-11 22:39:33,996:INFO:Set up index.
2024-09-11 22:39:34,182:INFO:Initializing predict_model()
2024-09-11 22:39:34,182:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:34,182:INFO:Checking exceptions
2024-09-11 22:39:34,182:INFO:Preloading libraries
2024-09-11 22:39:34,183:INFO:Set up data.
2024-09-11 22:39:34,203:INFO:Set up index.
2024-09-11 22:39:34,385:INFO:Initializing predict_model()
2024-09-11 22:39:34,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:34,386:INFO:Checking exceptions
2024-09-11 22:39:34,386:INFO:Preloading libraries
2024-09-11 22:39:34,387:INFO:Set up data.
2024-09-11 22:39:34,404:INFO:Set up index.
2024-09-11 22:39:34,564:INFO:Initializing predict_model()
2024-09-11 22:39:34,565:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:34,566:INFO:Checking exceptions
2024-09-11 22:39:34,566:INFO:Preloading libraries
2024-09-11 22:39:34,567:INFO:Set up data.
2024-09-11 22:39:34,583:INFO:Set up index.
2024-09-11 22:39:34,739:INFO:Initializing predict_model()
2024-09-11 22:39:34,740:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC68D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:34,740:INFO:Checking exceptions
2024-09-11 22:39:34,740:INFO:Preloading libraries
2024-09-11 22:39:34,741:INFO:Set up data.
2024-09-11 22:39:34,761:INFO:Set up index.
2024-09-11 22:39:34,889:INFO:Initializing predict_model()
2024-09-11 22:39:34,890:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:34,890:INFO:Checking exceptions
2024-09-11 22:39:34,890:INFO:Preloading libraries
2024-09-11 22:39:34,891:INFO:Set up data.
2024-09-11 22:39:34,909:INFO:Set up index.
2024-09-11 22:39:35,032:INFO:Initializing predict_model()
2024-09-11 22:39:35,032:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:35,032:INFO:Checking exceptions
2024-09-11 22:39:35,033:INFO:Preloading libraries
2024-09-11 22:39:35,034:INFO:Set up data.
2024-09-11 22:39:35,051:INFO:Set up index.
2024-09-11 22:39:35,198:INFO:Initializing predict_model()
2024-09-11 22:39:35,199:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:35,199:INFO:Checking exceptions
2024-09-11 22:39:35,199:INFO:Preloading libraries
2024-09-11 22:39:35,200:INFO:Set up data.
2024-09-11 22:39:35,216:INFO:Set up index.
2024-09-11 22:39:35,372:INFO:Initializing predict_model()
2024-09-11 22:39:35,373:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF75650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401F9FA60>)
2024-09-11 22:39:35,373:INFO:Checking exceptions
2024-09-11 22:39:35,373:INFO:Preloading libraries
2024-09-11 22:39:35,374:INFO:Set up data.
2024-09-11 22:39:35,398:INFO:Set up index.
2024-09-11 22:39:35,594:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:554: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-11 22:39:35,595:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:555: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-11 22:58:40,525:INFO:Initializing load_model()
2024-09-11 22:58:40,526:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,537:INFO:Initializing load_model()
2024-09-11 22:58:40,537:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,548:INFO:Initializing load_model()
2024-09-11 22:58:40,548:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,595:INFO:Initializing load_model()
2024-09-11 22:58:40,595:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,610:INFO:Initializing load_model()
2024-09-11 22:58:40,610:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,628:INFO:Initializing load_model()
2024-09-11 22:58:40,628:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,646:INFO:Initializing load_model()
2024-09-11 22:58:40,646:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,651:INFO:Initializing load_model()
2024-09-11 22:58:40,652:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,659:INFO:Initializing load_model()
2024-09-11 22:58:40,659:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,665:INFO:Initializing load_model()
2024-09-11 22:58:40,665:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:40,672:INFO:Initializing load_model()
2024-09-11 22:58:40,672:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,323:INFO:Initializing load_model()
2024-09-11 22:58:45,323:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,329:INFO:Initializing load_model()
2024-09-11 22:58:45,329:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,335:INFO:Initializing load_model()
2024-09-11 22:58:45,335:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,404:INFO:Initializing load_model()
2024-09-11 22:58:45,404:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,422:INFO:Initializing load_model()
2024-09-11 22:58:45,423:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,443:INFO:Initializing load_model()
2024-09-11 22:58:45,443:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,464:INFO:Initializing load_model()
2024-09-11 22:58:45,464:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,471:INFO:Initializing load_model()
2024-09-11 22:58:45,472:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,478:INFO:Initializing load_model()
2024-09-11 22:58:45,478:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,485:INFO:Initializing load_model()
2024-09-11 22:58:45,486:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:45,493:INFO:Initializing load_model()
2024-09-11 22:58:45,493:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,041:INFO:Initializing load_model()
2024-09-11 22:58:50,042:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,049:INFO:Initializing load_model()
2024-09-11 22:58:50,050:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,062:INFO:Initializing load_model()
2024-09-11 22:58:50,062:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,179:INFO:Initializing load_model()
2024-09-11 22:58:50,180:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,209:INFO:Initializing load_model()
2024-09-11 22:58:50,210:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,230:INFO:Initializing load_model()
2024-09-11 22:58:50,231:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,256:INFO:Initializing load_model()
2024-09-11 22:58:50,257:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,277:INFO:Initializing load_model()
2024-09-11 22:58:50,277:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,287:INFO:Initializing load_model()
2024-09-11 22:58:50,287:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,295:INFO:Initializing load_model()
2024-09-11 22:58:50,296:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,307:INFO:Initializing load_model()
2024-09-11 22:58:50,307:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 22:58:50,414:INFO:Initializing predict_model()
2024-09-11 22:58:50,415:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1BD650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BC0E0>)
2024-09-11 22:58:50,415:INFO:Checking exceptions
2024-09-11 22:58:50,415:INFO:Preloading libraries
2024-09-11 22:58:50,416:INFO:Set up data.
2024-09-11 22:58:50,459:INFO:Set up index.
2024-09-11 22:58:50,817:INFO:Initializing predict_model()
2024-09-11 22:58:50,817:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C2B9190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:50,817:INFO:Checking exceptions
2024-09-11 22:58:50,818:INFO:Preloading libraries
2024-09-11 22:58:50,818:INFO:Set up data.
2024-09-11 22:58:50,868:INFO:Set up index.
2024-09-11 22:58:51,042:INFO:Initializing predict_model()
2024-09-11 22:58:51,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFAF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:51,043:INFO:Checking exceptions
2024-09-11 22:58:51,043:INFO:Preloading libraries
2024-09-11 22:58:51,044:INFO:Set up data.
2024-09-11 22:58:51,062:INFO:Set up index.
2024-09-11 22:58:51,239:INFO:Initializing predict_model()
2024-09-11 22:58:51,239:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540941B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:51,239:INFO:Checking exceptions
2024-09-11 22:58:51,239:INFO:Preloading libraries
2024-09-11 22:58:51,240:INFO:Set up data.
2024-09-11 22:58:51,259:INFO:Set up index.
2024-09-11 22:58:51,439:INFO:Initializing predict_model()
2024-09-11 22:58:51,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099EE510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:51,440:INFO:Checking exceptions
2024-09-11 22:58:51,440:INFO:Preloading libraries
2024-09-11 22:58:51,440:INFO:Set up data.
2024-09-11 22:58:51,463:INFO:Set up index.
2024-09-11 22:58:51,683:INFO:Initializing predict_model()
2024-09-11 22:58:51,683:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:51,684:INFO:Checking exceptions
2024-09-11 22:58:51,684:INFO:Preloading libraries
2024-09-11 22:58:51,685:INFO:Set up data.
2024-09-11 22:58:51,712:INFO:Set up index.
2024-09-11 22:58:51,873:INFO:Initializing predict_model()
2024-09-11 22:58:51,873:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:51,874:INFO:Checking exceptions
2024-09-11 22:58:51,874:INFO:Preloading libraries
2024-09-11 22:58:51,875:INFO:Set up data.
2024-09-11 22:58:51,899:INFO:Set up index.
2024-09-11 22:58:52,074:INFO:Initializing predict_model()
2024-09-11 22:58:52,074:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FD1DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:52,075:INFO:Checking exceptions
2024-09-11 22:58:52,075:INFO:Preloading libraries
2024-09-11 22:58:52,075:INFO:Set up data.
2024-09-11 22:58:52,096:INFO:Set up index.
2024-09-11 22:58:52,237:INFO:Initializing predict_model()
2024-09-11 22:58:52,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05D310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:52,237:INFO:Checking exceptions
2024-09-11 22:58:52,238:INFO:Preloading libraries
2024-09-11 22:58:52,238:INFO:Set up data.
2024-09-11 22:58:52,258:INFO:Set up index.
2024-09-11 22:58:52,493:INFO:Initializing predict_model()
2024-09-11 22:58:52,494:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05B8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:52,494:INFO:Checking exceptions
2024-09-11 22:58:52,495:INFO:Preloading libraries
2024-09-11 22:58:52,496:INFO:Set up data.
2024-09-11 22:58:52,533:INFO:Set up index.
2024-09-11 22:58:52,706:INFO:Initializing predict_model()
2024-09-11 22:58:52,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063240>)
2024-09-11 22:58:52,707:INFO:Checking exceptions
2024-09-11 22:58:52,707:INFO:Preloading libraries
2024-09-11 22:58:52,707:INFO:Set up data.
2024-09-11 22:58:52,727:INFO:Set up index.
2024-09-11 23:01:19,419:INFO:Initializing load_model()
2024-09-11 23:01:19,421:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,425:INFO:Initializing load_model()
2024-09-11 23:01:19,426:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,432:INFO:Initializing load_model()
2024-09-11 23:01:19,433:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,505:INFO:Initializing load_model()
2024-09-11 23:01:19,505:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,554:INFO:Initializing load_model()
2024-09-11 23:01:19,554:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,581:INFO:Initializing load_model()
2024-09-11 23:01:19,582:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,599:INFO:Initializing load_model()
2024-09-11 23:01:19,599:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,607:INFO:Initializing load_model()
2024-09-11 23:01:19,607:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,615:INFO:Initializing load_model()
2024-09-11 23:01:19,616:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,625:INFO:Initializing load_model()
2024-09-11 23:01:19,625:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,635:INFO:Initializing load_model()
2024-09-11 23:01:19,635:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:19,724:INFO:Initializing predict_model()
2024-09-11 23:01:19,725:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0DC690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936E520>)
2024-09-11 23:01:19,726:INFO:Checking exceptions
2024-09-11 23:01:19,726:INFO:Preloading libraries
2024-09-11 23:01:19,727:INFO:Set up data.
2024-09-11 23:01:19,757:INFO:Set up index.
2024-09-11 23:01:19,941:INFO:Initializing predict_model()
2024-09-11 23:01:19,941:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FD7990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:19,941:INFO:Checking exceptions
2024-09-11 23:01:19,941:INFO:Preloading libraries
2024-09-11 23:01:19,942:INFO:Set up data.
2024-09-11 23:01:19,961:INFO:Set up index.
2024-09-11 23:01:20,096:INFO:Initializing predict_model()
2024-09-11 23:01:20,096:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:20,096:INFO:Checking exceptions
2024-09-11 23:01:20,097:INFO:Preloading libraries
2024-09-11 23:01:20,097:INFO:Set up data.
2024-09-11 23:01:20,115:INFO:Set up index.
2024-09-11 23:01:20,287:INFO:Initializing predict_model()
2024-09-11 23:01:20,288:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F093D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:20,289:INFO:Checking exceptions
2024-09-11 23:01:20,289:INFO:Preloading libraries
2024-09-11 23:01:20,289:INFO:Set up data.
2024-09-11 23:01:20,309:INFO:Set up index.
2024-09-11 23:01:20,509:INFO:Initializing predict_model()
2024-09-11 23:01:20,509:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:20,510:INFO:Checking exceptions
2024-09-11 23:01:20,510:INFO:Preloading libraries
2024-09-11 23:01:20,510:INFO:Set up data.
2024-09-11 23:01:20,539:INFO:Set up index.
2024-09-11 23:01:20,740:INFO:Initializing predict_model()
2024-09-11 23:01:20,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:20,741:INFO:Checking exceptions
2024-09-11 23:01:20,741:INFO:Preloading libraries
2024-09-11 23:01:20,741:INFO:Set up data.
2024-09-11 23:01:20,766:INFO:Set up index.
2024-09-11 23:01:20,981:INFO:Initializing predict_model()
2024-09-11 23:01:20,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254098233D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:20,981:INFO:Checking exceptions
2024-09-11 23:01:20,981:INFO:Preloading libraries
2024-09-11 23:01:20,981:INFO:Set up data.
2024-09-11 23:01:21,018:INFO:Set up index.
2024-09-11 23:01:21,161:INFO:Initializing predict_model()
2024-09-11 23:01:21,161:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1DCC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:21,162:INFO:Checking exceptions
2024-09-11 23:01:21,162:INFO:Preloading libraries
2024-09-11 23:01:21,162:INFO:Set up data.
2024-09-11 23:01:21,186:INFO:Set up index.
2024-09-11 23:01:21,342:INFO:Initializing predict_model()
2024-09-11 23:01:21,343:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:21,344:INFO:Checking exceptions
2024-09-11 23:01:21,345:INFO:Preloading libraries
2024-09-11 23:01:21,345:INFO:Set up data.
2024-09-11 23:01:21,369:INFO:Set up index.
2024-09-11 23:01:21,585:INFO:Initializing predict_model()
2024-09-11 23:01:21,585:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A41910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:21,585:INFO:Checking exceptions
2024-09-11 23:01:21,586:INFO:Preloading libraries
2024-09-11 23:01:21,587:INFO:Set up data.
2024-09-11 23:01:21,628:INFO:Set up index.
2024-09-11 23:01:21,827:INFO:Initializing predict_model()
2024-09-11 23:01:21,827:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A41910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540769FBA0>)
2024-09-11 23:01:21,827:INFO:Checking exceptions
2024-09-11 23:01:21,827:INFO:Preloading libraries
2024-09-11 23:01:21,828:INFO:Set up data.
2024-09-11 23:01:21,854:INFO:Set up index.
2024-09-11 23:01:26,916:INFO:Initializing load_model()
2024-09-11 23:01:26,918:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:26,924:INFO:Initializing load_model()
2024-09-11 23:01:26,925:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:26,929:INFO:Initializing load_model()
2024-09-11 23:01:26,929:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:26,985:INFO:Initializing load_model()
2024-09-11 23:01:26,985:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,001:INFO:Initializing load_model()
2024-09-11 23:01:27,001:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,020:INFO:Initializing load_model()
2024-09-11 23:01:27,020:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,038:INFO:Initializing load_model()
2024-09-11 23:01:27,038:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,044:INFO:Initializing load_model()
2024-09-11 23:01:27,044:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,050:INFO:Initializing load_model()
2024-09-11 23:01:27,050:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,057:INFO:Initializing load_model()
2024-09-11 23:01:27,057:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:01:27,063:INFO:Initializing load_model()
2024-09-11 23:01:27,064:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,014:INFO:Initializing load_model()
2024-09-11 23:26:50,016:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,020:INFO:Initializing load_model()
2024-09-11 23:26:50,020:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,031:INFO:Initializing load_model()
2024-09-11 23:26:50,031:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,111:INFO:Initializing load_model()
2024-09-11 23:26:50,111:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,128:INFO:Initializing load_model()
2024-09-11 23:26:50,129:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,147:INFO:Initializing load_model()
2024-09-11 23:26:50,147:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,178:INFO:Initializing load_model()
2024-09-11 23:26:50,178:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,194:INFO:Initializing load_model()
2024-09-11 23:26:50,194:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,209:INFO:Initializing load_model()
2024-09-11 23:26:50,210:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,216:INFO:Initializing load_model()
2024-09-11 23:26:50,216:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,230:INFO:Initializing load_model()
2024-09-11 23:26:50,230:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:26:50,278:INFO:Initializing predict_model()
2024-09-11 23:26:50,278:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945EB60>)
2024-09-11 23:26:50,279:INFO:Checking exceptions
2024-09-11 23:26:50,279:INFO:Preloading libraries
2024-09-11 23:26:50,279:INFO:Set up data.
2024-09-11 23:26:50,304:INFO:Set up index.
2024-09-11 23:26:50,441:INFO:Initializing predict_model()
2024-09-11 23:26:50,441:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:50,441:INFO:Checking exceptions
2024-09-11 23:26:50,441:INFO:Preloading libraries
2024-09-11 23:26:50,442:INFO:Set up data.
2024-09-11 23:26:50,465:INFO:Set up index.
2024-09-11 23:26:50,639:INFO:Initializing predict_model()
2024-09-11 23:26:50,639:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540998B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:50,639:INFO:Checking exceptions
2024-09-11 23:26:50,640:INFO:Preloading libraries
2024-09-11 23:26:50,640:INFO:Set up data.
2024-09-11 23:26:50,665:INFO:Set up index.
2024-09-11 23:26:50,828:INFO:Initializing predict_model()
2024-09-11 23:26:50,828:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540998B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:50,828:INFO:Checking exceptions
2024-09-11 23:26:50,828:INFO:Preloading libraries
2024-09-11 23:26:50,829:INFO:Set up data.
2024-09-11 23:26:50,849:INFO:Set up index.
2024-09-11 23:26:51,048:INFO:Initializing predict_model()
2024-09-11 23:26:51,049:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,049:INFO:Checking exceptions
2024-09-11 23:26:51,049:INFO:Preloading libraries
2024-09-11 23:26:51,050:INFO:Set up data.
2024-09-11 23:26:51,076:INFO:Set up index.
2024-09-11 23:26:51,230:INFO:Initializing predict_model()
2024-09-11 23:26:51,230:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B36C810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,231:INFO:Checking exceptions
2024-09-11 23:26:51,231:INFO:Preloading libraries
2024-09-11 23:26:51,232:INFO:Set up data.
2024-09-11 23:26:51,250:INFO:Set up index.
2024-09-11 23:26:51,380:INFO:Initializing predict_model()
2024-09-11 23:26:51,380:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,380:INFO:Checking exceptions
2024-09-11 23:26:51,382:INFO:Preloading libraries
2024-09-11 23:26:51,382:INFO:Set up data.
2024-09-11 23:26:51,399:INFO:Set up index.
2024-09-11 23:26:51,551:INFO:Initializing predict_model()
2024-09-11 23:26:51,551:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540998B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,552:INFO:Checking exceptions
2024-09-11 23:26:51,552:INFO:Preloading libraries
2024-09-11 23:26:51,552:INFO:Set up data.
2024-09-11 23:26:51,571:INFO:Set up index.
2024-09-11 23:26:51,687:INFO:Initializing predict_model()
2024-09-11 23:26:51,687:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094F2D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,688:INFO:Checking exceptions
2024-09-11 23:26:51,688:INFO:Preloading libraries
2024-09-11 23:26:51,688:INFO:Set up data.
2024-09-11 23:26:51,705:INFO:Set up index.
2024-09-11 23:26:51,830:INFO:Initializing predict_model()
2024-09-11 23:26:51,830:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095A0BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,830:INFO:Checking exceptions
2024-09-11 23:26:51,831:INFO:Preloading libraries
2024-09-11 23:26:51,831:INFO:Set up data.
2024-09-11 23:26:51,853:INFO:Set up index.
2024-09-11 23:26:51,971:INFO:Initializing predict_model()
2024-09-11 23:26:51,971:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B503CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:26:51,972:INFO:Checking exceptions
2024-09-11 23:26:51,972:INFO:Preloading libraries
2024-09-11 23:26:51,972:INFO:Set up data.
2024-09-11 23:26:51,990:INFO:Set up index.
2024-09-11 23:28:26,293:INFO:Initializing load_model()
2024-09-11 23:28:26,294:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,301:INFO:Initializing load_model()
2024-09-11 23:28:26,301:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,305:INFO:Initializing load_model()
2024-09-11 23:28:26,305:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,358:INFO:Initializing load_model()
2024-09-11 23:28:26,358:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,373:INFO:Initializing load_model()
2024-09-11 23:28:26,373:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,391:INFO:Initializing load_model()
2024-09-11 23:28:26,392:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,409:INFO:Initializing load_model()
2024-09-11 23:28:26,409:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,414:INFO:Initializing load_model()
2024-09-11 23:28:26,415:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,420:INFO:Initializing load_model()
2024-09-11 23:28:26,421:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,426:INFO:Initializing load_model()
2024-09-11 23:28:26,427:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:28:26,432:INFO:Initializing load_model()
2024-09-11 23:28:26,432:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,622:INFO:Initializing load_model()
2024-09-11 23:43:03,628:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,633:INFO:Initializing load_model()
2024-09-11 23:43:03,633:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,639:INFO:Initializing load_model()
2024-09-11 23:43:03,639:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,693:INFO:Initializing load_model()
2024-09-11 23:43:03,693:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,703:INFO:Initializing load_model()
2024-09-11 23:43:03,703:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,723:INFO:Initializing load_model()
2024-09-11 23:43:03,723:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,734:INFO:Initializing load_model()
2024-09-11 23:43:03,734:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,744:INFO:Initializing load_model()
2024-09-11 23:43:03,744:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,754:INFO:Initializing load_model()
2024-09-11 23:43:03,754:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,759:INFO:Initializing load_model()
2024-09-11 23:43:03,759:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:03,764:INFO:Initializing load_model()
2024-09-11 23:43:03,764:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,392:INFO:Initializing load_model()
2024-09-11 23:43:10,392:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,397:INFO:Initializing load_model()
2024-09-11 23:43:10,397:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,403:INFO:Initializing load_model()
2024-09-11 23:43:10,403:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,459:INFO:Initializing load_model()
2024-09-11 23:43:10,459:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,476:INFO:Initializing load_model()
2024-09-11 23:43:10,476:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,494:INFO:Initializing load_model()
2024-09-11 23:43:10,495:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,516:INFO:Initializing load_model()
2024-09-11 23:43:10,516:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,521:INFO:Initializing load_model()
2024-09-11 23:43:10,521:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,528:INFO:Initializing load_model()
2024-09-11 23:43:10,528:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,537:INFO:Initializing load_model()
2024-09-11 23:43:10,537:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:10,542:INFO:Initializing load_model()
2024-09-11 23:43:10,542:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,623:INFO:Initializing load_model()
2024-09-11 23:43:14,623:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,627:INFO:Initializing load_model()
2024-09-11 23:43:14,629:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,633:INFO:Initializing load_model()
2024-09-11 23:43:14,633:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,687:INFO:Initializing load_model()
2024-09-11 23:43:14,687:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,703:INFO:Initializing load_model()
2024-09-11 23:43:14,703:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,724:INFO:Initializing load_model()
2024-09-11 23:43:14,724:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,744:INFO:Initializing load_model()
2024-09-11 23:43:14,744:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,750:INFO:Initializing load_model()
2024-09-11 23:43:14,751:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,757:INFO:Initializing load_model()
2024-09-11 23:43:14,758:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,763:INFO:Initializing load_model()
2024-09-11 23:43:14,764:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:43:14,769:INFO:Initializing load_model()
2024-09-11 23:43:14,770:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,695:INFO:Initializing load_model()
2024-09-11 23:44:22,696:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,700:INFO:Initializing load_model()
2024-09-11 23:44:22,700:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,704:INFO:Initializing load_model()
2024-09-11 23:44:22,705:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,764:INFO:Initializing load_model()
2024-09-11 23:44:22,765:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,780:INFO:Initializing load_model()
2024-09-11 23:44:22,781:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,801:INFO:Initializing load_model()
2024-09-11 23:44:22,802:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,820:INFO:Initializing load_model()
2024-09-11 23:44:22,820:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,826:INFO:Initializing load_model()
2024-09-11 23:44:22,827:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,834:INFO:Initializing load_model()
2024-09-11 23:44:22,834:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,841:INFO:Initializing load_model()
2024-09-11 23:44:22,841:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:22,848:INFO:Initializing load_model()
2024-09-11 23:44:22,849:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,225:INFO:Initializing load_model()
2024-09-11 23:44:29,225:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,230:INFO:Initializing load_model()
2024-09-11 23:44:29,230:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,236:INFO:Initializing load_model()
2024-09-11 23:44:29,236:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,284:INFO:Initializing load_model()
2024-09-11 23:44:29,285:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,298:INFO:Initializing load_model()
2024-09-11 23:44:29,298:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,315:INFO:Initializing load_model()
2024-09-11 23:44:29,315:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,335:INFO:Initializing load_model()
2024-09-11 23:44:29,335:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,341:INFO:Initializing load_model()
2024-09-11 23:44:29,341:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,347:INFO:Initializing load_model()
2024-09-11 23:44:29,348:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,354:INFO:Initializing load_model()
2024-09-11 23:44:29,354:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:29,361:INFO:Initializing load_model()
2024-09-11 23:44:29,361:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,291:INFO:Initializing load_model()
2024-09-11 23:44:31,291:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,296:INFO:Initializing load_model()
2024-09-11 23:44:31,296:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,299:INFO:Initializing load_model()
2024-09-11 23:44:31,300:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,361:INFO:Initializing load_model()
2024-09-11 23:44:31,361:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,370:INFO:Initializing load_model()
2024-09-11 23:44:31,370:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,376:INFO:Initializing load_model()
2024-09-11 23:44:31,376:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,383:INFO:Initializing load_model()
2024-09-11 23:44:31,383:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,387:INFO:Initializing load_model()
2024-09-11 23:44:31,387:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,392:INFO:Initializing load_model()
2024-09-11 23:44:31,392:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,396:INFO:Initializing load_model()
2024-09-11 23:44:31,397:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,401:INFO:Initializing load_model()
2024-09-11 23:44:31,401:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:31,476:INFO:Initializing predict_model()
2024-09-11 23:44:31,476:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F093D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936DF80>)
2024-09-11 23:44:31,477:INFO:Checking exceptions
2024-09-11 23:44:31,477:INFO:Preloading libraries
2024-09-11 23:44:31,478:INFO:Set up data.
2024-09-11 23:44:31,511:INFO:Set up index.
2024-09-11 23:44:31,661:INFO:Initializing predict_model()
2024-09-11 23:44:31,662:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CE7D510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D5440>)
2024-09-11 23:44:31,662:INFO:Checking exceptions
2024-09-11 23:44:31,662:INFO:Preloading libraries
2024-09-11 23:44:31,662:INFO:Set up data.
2024-09-11 23:44:31,683:INFO:Set up index.
2024-09-11 23:44:31,819:INFO:Initializing predict_model()
2024-09-11 23:44:31,820:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CE7D510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:31,820:INFO:Checking exceptions
2024-09-11 23:44:31,820:INFO:Preloading libraries
2024-09-11 23:44:31,821:INFO:Set up data.
2024-09-11 23:44:31,842:INFO:Set up index.
2024-09-11 23:44:32,035:INFO:Initializing predict_model()
2024-09-11 23:44:32,036:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B7F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:32,036:INFO:Checking exceptions
2024-09-11 23:44:32,036:INFO:Preloading libraries
2024-09-11 23:44:32,037:INFO:Set up data.
2024-09-11 23:44:32,073:INFO:Set up index.
2024-09-11 23:44:32,291:INFO:Initializing predict_model()
2024-09-11 23:44:32,291:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:32,292:INFO:Checking exceptions
2024-09-11 23:44:32,292:INFO:Preloading libraries
2024-09-11 23:44:32,293:INFO:Set up data.
2024-09-11 23:44:32,319:INFO:Set up index.
2024-09-11 23:44:32,496:INFO:Initializing predict_model()
2024-09-11 23:44:32,496:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:32,496:INFO:Checking exceptions
2024-09-11 23:44:32,497:INFO:Preloading libraries
2024-09-11 23:44:32,497:INFO:Set up data.
2024-09-11 23:44:32,514:INFO:Set up index.
2024-09-11 23:44:32,697:INFO:Initializing predict_model()
2024-09-11 23:44:32,698:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:32,698:INFO:Checking exceptions
2024-09-11 23:44:32,698:INFO:Preloading libraries
2024-09-11 23:44:32,698:INFO:Set up data.
2024-09-11 23:44:32,722:INFO:Set up index.
2024-09-11 23:44:32,855:INFO:Initializing predict_model()
2024-09-11 23:44:32,856:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2B1210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:32,856:INFO:Checking exceptions
2024-09-11 23:44:32,856:INFO:Preloading libraries
2024-09-11 23:44:32,856:INFO:Set up data.
2024-09-11 23:44:32,872:INFO:Set up index.
2024-09-11 23:44:33,002:INFO:Initializing predict_model()
2024-09-11 23:44:33,002:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409490FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:33,002:INFO:Checking exceptions
2024-09-11 23:44:33,004:INFO:Preloading libraries
2024-09-11 23:44:33,004:INFO:Set up data.
2024-09-11 23:44:33,023:INFO:Set up index.
2024-09-11 23:44:33,181:INFO:Initializing predict_model()
2024-09-11 23:44:33,181:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F15950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:33,181:INFO:Checking exceptions
2024-09-11 23:44:33,182:INFO:Preloading libraries
2024-09-11 23:44:33,182:INFO:Set up data.
2024-09-11 23:44:33,208:INFO:Set up index.
2024-09-11 23:44:33,320:INFO:Initializing predict_model()
2024-09-11 23:44:33,320:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0B79D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-11 23:44:33,320:INFO:Checking exceptions
2024-09-11 23:44:33,320:INFO:Preloading libraries
2024-09-11 23:44:33,321:INFO:Set up data.
2024-09-11 23:44:33,337:INFO:Set up index.
2024-09-11 23:44:45,218:INFO:Initializing load_model()
2024-09-11 23:44:45,219:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,223:INFO:Initializing load_model()
2024-09-11 23:44:45,224:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,230:INFO:Initializing load_model()
2024-09-11 23:44:45,231:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,283:INFO:Initializing load_model()
2024-09-11 23:44:45,284:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,299:INFO:Initializing load_model()
2024-09-11 23:44:45,299:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,315:INFO:Initializing load_model()
2024-09-11 23:44:45,315:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,333:INFO:Initializing load_model()
2024-09-11 23:44:45,333:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,339:INFO:Initializing load_model()
2024-09-11 23:44:45,339:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,345:INFO:Initializing load_model()
2024-09-11 23:44:45,346:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,352:INFO:Initializing load_model()
2024-09-11 23:44:45,352:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,358:INFO:Initializing load_model()
2024-09-11 23:44:45,359:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:44:45,426:INFO:Initializing predict_model()
2024-09-11 23:44:45,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A284810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B4C7EC0>)
2024-09-11 23:44:45,426:INFO:Checking exceptions
2024-09-11 23:44:45,427:INFO:Preloading libraries
2024-09-11 23:44:45,427:INFO:Set up data.
2024-09-11 23:44:45,443:INFO:Set up index.
2024-09-11 23:44:45,565:INFO:Initializing predict_model()
2024-09-11 23:44:45,565:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A73390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:45,565:INFO:Checking exceptions
2024-09-11 23:44:45,566:INFO:Preloading libraries
2024-09-11 23:44:45,566:INFO:Set up data.
2024-09-11 23:44:45,581:INFO:Set up index.
2024-09-11 23:44:45,703:INFO:Initializing predict_model()
2024-09-11 23:44:45,704:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:45,704:INFO:Checking exceptions
2024-09-11 23:44:45,704:INFO:Preloading libraries
2024-09-11 23:44:45,704:INFO:Set up data.
2024-09-11 23:44:45,719:INFO:Set up index.
2024-09-11 23:44:45,895:INFO:Initializing predict_model()
2024-09-11 23:44:45,896:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:45,896:INFO:Checking exceptions
2024-09-11 23:44:45,897:INFO:Preloading libraries
2024-09-11 23:44:45,897:INFO:Set up data.
2024-09-11 23:44:45,915:INFO:Set up index.
2024-09-11 23:44:46,094:INFO:Initializing predict_model()
2024-09-11 23:44:46,094:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,094:INFO:Checking exceptions
2024-09-11 23:44:46,095:INFO:Preloading libraries
2024-09-11 23:44:46,095:INFO:Set up data.
2024-09-11 23:44:46,114:INFO:Set up index.
2024-09-11 23:44:46,265:INFO:Initializing predict_model()
2024-09-11 23:44:46,266:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540952FBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,266:INFO:Checking exceptions
2024-09-11 23:44:46,266:INFO:Preloading libraries
2024-09-11 23:44:46,267:INFO:Set up data.
2024-09-11 23:44:46,283:INFO:Set up index.
2024-09-11 23:44:46,431:INFO:Initializing predict_model()
2024-09-11 23:44:46,432:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540952EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,432:INFO:Checking exceptions
2024-09-11 23:44:46,432:INFO:Preloading libraries
2024-09-11 23:44:46,433:INFO:Set up data.
2024-09-11 23:44:46,451:INFO:Set up index.
2024-09-11 23:44:46,575:INFO:Initializing predict_model()
2024-09-11 23:44:46,575:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBE150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,576:INFO:Checking exceptions
2024-09-11 23:44:46,576:INFO:Preloading libraries
2024-09-11 23:44:46,578:INFO:Set up data.
2024-09-11 23:44:46,595:INFO:Set up index.
2024-09-11 23:44:46,728:INFO:Initializing predict_model()
2024-09-11 23:44:46,728:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBE150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,728:INFO:Checking exceptions
2024-09-11 23:44:46,729:INFO:Preloading libraries
2024-09-11 23:44:46,729:INFO:Set up data.
2024-09-11 23:44:46,747:INFO:Set up index.
2024-09-11 23:44:46,859:INFO:Initializing predict_model()
2024-09-11 23:44:46,859:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,860:INFO:Checking exceptions
2024-09-11 23:44:46,860:INFO:Preloading libraries
2024-09-11 23:44:46,861:INFO:Set up data.
2024-09-11 23:44:46,877:INFO:Set up index.
2024-09-11 23:44:46,990:INFO:Initializing predict_model()
2024-09-11 23:44:46,990:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-11 23:44:46,990:INFO:Checking exceptions
2024-09-11 23:44:46,991:INFO:Preloading libraries
2024-09-11 23:44:46,991:INFO:Set up data.
2024-09-11 23:44:47,008:INFO:Set up index.
2024-09-11 23:45:18,614:INFO:Initializing load_model()
2024-09-11 23:45:18,615:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,620:INFO:Initializing load_model()
2024-09-11 23:45:18,620:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,626:INFO:Initializing load_model()
2024-09-11 23:45:18,626:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,681:INFO:Initializing load_model()
2024-09-11 23:45:18,681:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,699:INFO:Initializing load_model()
2024-09-11 23:45:18,699:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,717:INFO:Initializing load_model()
2024-09-11 23:45:18,717:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,735:INFO:Initializing load_model()
2024-09-11 23:45:18,735:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,741:INFO:Initializing load_model()
2024-09-11 23:45:18,741:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,748:INFO:Initializing load_model()
2024-09-11 23:45:18,748:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,754:INFO:Initializing load_model()
2024-09-11 23:45:18,754:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,761:INFO:Initializing load_model()
2024-09-11 23:45:18,761:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:18,826:INFO:Initializing predict_model()
2024-09-11 23:45:18,826:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4DBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F59E0>)
2024-09-11 23:45:18,827:INFO:Checking exceptions
2024-09-11 23:45:18,827:INFO:Preloading libraries
2024-09-11 23:45:18,828:INFO:Set up data.
2024-09-11 23:45:18,846:INFO:Set up index.
2024-09-11 23:45:18,971:INFO:Initializing predict_model()
2024-09-11 23:45:18,972:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540658C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:18,972:INFO:Checking exceptions
2024-09-11 23:45:18,972:INFO:Preloading libraries
2024-09-11 23:45:18,973:INFO:Set up data.
2024-09-11 23:45:18,990:INFO:Set up index.
2024-09-11 23:45:19,112:INFO:Initializing predict_model()
2024-09-11 23:45:19,113:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC5990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:19,113:INFO:Checking exceptions
2024-09-11 23:45:19,113:INFO:Preloading libraries
2024-09-11 23:45:19,115:INFO:Set up data.
2024-09-11 23:45:19,130:INFO:Set up index.
2024-09-11 23:45:19,299:INFO:Initializing predict_model()
2024-09-11 23:45:19,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:19,300:INFO:Checking exceptions
2024-09-11 23:45:19,300:INFO:Preloading libraries
2024-09-11 23:45:19,301:INFO:Set up data.
2024-09-11 23:45:19,319:INFO:Set up index.
2024-09-11 23:45:19,518:INFO:Initializing predict_model()
2024-09-11 23:45:19,518:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540953C550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:19,518:INFO:Checking exceptions
2024-09-11 23:45:19,519:INFO:Preloading libraries
2024-09-11 23:45:19,519:INFO:Set up data.
2024-09-11 23:45:19,545:INFO:Set up index.
2024-09-11 23:45:19,836:INFO:Initializing predict_model()
2024-09-11 23:45:19,837:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:19,837:INFO:Checking exceptions
2024-09-11 23:45:19,839:INFO:Preloading libraries
2024-09-11 23:45:19,840:INFO:Set up data.
2024-09-11 23:45:19,859:INFO:Set up index.
2024-09-11 23:45:20,142:INFO:Initializing predict_model()
2024-09-11 23:45:20,142:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC5990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:20,143:INFO:Checking exceptions
2024-09-11 23:45:20,143:INFO:Preloading libraries
2024-09-11 23:45:20,143:INFO:Set up data.
2024-09-11 23:45:20,163:INFO:Set up index.
2024-09-11 23:45:20,316:INFO:Initializing load_model()
2024-09-11 23:45:20,322:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,325:INFO:Initializing predict_model()
2024-09-11 23:45:20,326:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540941A6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:20,328:INFO:Checking exceptions
2024-09-11 23:45:20,328:INFO:Preloading libraries
2024-09-11 23:45:20,328:INFO:Initializing load_model()
2024-09-11 23:45:20,329:INFO:Set up data.
2024-09-11 23:45:20,329:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,348:INFO:Set up index.
2024-09-11 23:45:20,352:INFO:Initializing load_model()
2024-09-11 23:45:20,353:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,491:INFO:Initializing predict_model()
2024-09-11 23:45:20,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A291490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:20,493:INFO:Checking exceptions
2024-09-11 23:45:20,494:INFO:Preloading libraries
2024-09-11 23:45:20,495:INFO:Set up data.
2024-09-11 23:45:20,513:INFO:Set up index.
2024-09-11 23:45:20,640:INFO:Initializing predict_model()
2024-09-11 23:45:20,642:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A42D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:20,643:INFO:Checking exceptions
2024-09-11 23:45:20,643:INFO:Preloading libraries
2024-09-11 23:45:20,645:INFO:Set up data.
2024-09-11 23:45:20,668:INFO:Set up index.
2024-09-11 23:45:20,671:INFO:Initializing load_model()
2024-09-11 23:45:20,671:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,828:INFO:Initializing load_model()
2024-09-11 23:45:20,834:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,835:INFO:Initializing predict_model()
2024-09-11 23:45:20,835:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A18C4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:20,838:INFO:Checking exceptions
2024-09-11 23:45:20,838:INFO:Preloading libraries
2024-09-11 23:45:20,839:INFO:Set up data.
2024-09-11 23:45:20,840:INFO:Initializing load_model()
2024-09-11 23:45:20,840:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,858:INFO:Set up index.
2024-09-11 23:45:20,860:INFO:Initializing load_model()
2024-09-11 23:45:20,861:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,867:INFO:Initializing load_model()
2024-09-11 23:45:20,867:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,873:INFO:Initializing load_model()
2024-09-11 23:45:20,873:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,876:INFO:Initializing load_model()
2024-09-11 23:45:20,876:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,879:INFO:Initializing load_model()
2024-09-11 23:45:20,879:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:20,937:INFO:Initializing predict_model()
2024-09-11 23:45:20,938:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0F0450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945E980>)
2024-09-11 23:45:20,938:INFO:Checking exceptions
2024-09-11 23:45:20,939:INFO:Preloading libraries
2024-09-11 23:45:20,940:INFO:Set up data.
2024-09-11 23:45:20,956:INFO:Set up index.
2024-09-11 23:45:21,080:INFO:Initializing predict_model()
2024-09-11 23:45:21,082:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A10BF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945E980>)
2024-09-11 23:45:21,083:INFO:Checking exceptions
2024-09-11 23:45:21,083:INFO:Preloading libraries
2024-09-11 23:45:21,085:INFO:Set up data.
2024-09-11 23:45:21,109:INFO:Set up index.
2024-09-11 23:45:21,272:INFO:Initializing predict_model()
2024-09-11 23:45:21,272:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A07BF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063BA0>)
2024-09-11 23:45:21,273:INFO:Checking exceptions
2024-09-11 23:45:21,273:INFO:Preloading libraries
2024-09-11 23:45:21,274:INFO:Set up data.
2024-09-11 23:45:21,294:INFO:Set up index.
2024-09-11 23:45:21,745:INFO:Initializing predict_model()
2024-09-11 23:45:21,745:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:21,745:INFO:Checking exceptions
2024-09-11 23:45:21,746:INFO:Preloading libraries
2024-09-11 23:45:21,746:INFO:Set up data.
2024-09-11 23:45:21,761:INFO:Set up index.
2024-09-11 23:45:21,920:INFO:Initializing predict_model()
2024-09-11 23:45:21,920:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF94A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:21,920:INFO:Checking exceptions
2024-09-11 23:45:21,921:INFO:Preloading libraries
2024-09-11 23:45:21,921:INFO:Set up data.
2024-09-11 23:45:21,935:INFO:Set up index.
2024-09-11 23:45:22,070:INFO:Initializing predict_model()
2024-09-11 23:45:22,070:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF94A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,070:INFO:Checking exceptions
2024-09-11 23:45:22,070:INFO:Preloading libraries
2024-09-11 23:45:22,071:INFO:Set up data.
2024-09-11 23:45:22,086:INFO:Set up index.
2024-09-11 23:45:22,221:INFO:Initializing predict_model()
2024-09-11 23:45:22,221:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,222:INFO:Checking exceptions
2024-09-11 23:45:22,222:INFO:Preloading libraries
2024-09-11 23:45:22,222:INFO:Set up data.
2024-09-11 23:45:22,239:INFO:Set up index.
2024-09-11 23:45:22,350:INFO:Initializing predict_model()
2024-09-11 23:45:22,350:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,351:INFO:Checking exceptions
2024-09-11 23:45:22,351:INFO:Preloading libraries
2024-09-11 23:45:22,351:INFO:Set up data.
2024-09-11 23:45:22,367:INFO:Set up index.
2024-09-11 23:45:22,482:INFO:Initializing predict_model()
2024-09-11 23:45:22,482:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409559550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,483:INFO:Checking exceptions
2024-09-11 23:45:22,483:INFO:Preloading libraries
2024-09-11 23:45:22,484:INFO:Set up data.
2024-09-11 23:45:22,500:INFO:Set up index.
2024-09-11 23:45:22,611:INFO:Initializing predict_model()
2024-09-11 23:45:22,611:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,612:INFO:Checking exceptions
2024-09-11 23:45:22,612:INFO:Preloading libraries
2024-09-11 23:45:22,613:INFO:Set up data.
2024-09-11 23:45:22,629:INFO:Set up index.
2024-09-11 23:45:22,739:INFO:Initializing predict_model()
2024-09-11 23:45:22,739:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEAEA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:22,739:INFO:Checking exceptions
2024-09-11 23:45:22,740:INFO:Preloading libraries
2024-09-11 23:45:22,740:INFO:Set up data.
2024-09-11 23:45:22,756:INFO:Set up index.
2024-09-11 23:45:27,557:INFO:Initializing load_model()
2024-09-11 23:45:27,557:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,563:INFO:Initializing load_model()
2024-09-11 23:45:27,564:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,570:INFO:Initializing load_model()
2024-09-11 23:45:27,570:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,626:INFO:Initializing load_model()
2024-09-11 23:45:27,626:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,642:INFO:Initializing load_model()
2024-09-11 23:45:27,642:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,659:INFO:Initializing load_model()
2024-09-11 23:45:27,659:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,676:INFO:Initializing load_model()
2024-09-11 23:45:27,677:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,682:INFO:Initializing load_model()
2024-09-11 23:45:27,682:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,689:INFO:Initializing load_model()
2024-09-11 23:45:27,689:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,695:INFO:Initializing load_model()
2024-09-11 23:45:27,695:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,702:INFO:Initializing load_model()
2024-09-11 23:45:27,702:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:27,771:INFO:Initializing predict_model()
2024-09-11 23:45:27,771:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409545650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B4C5EE0>)
2024-09-11 23:45:27,771:INFO:Checking exceptions
2024-09-11 23:45:27,772:INFO:Preloading libraries
2024-09-11 23:45:27,772:INFO:Set up data.
2024-09-11 23:45:27,789:INFO:Set up index.
2024-09-11 23:45:27,906:INFO:Initializing predict_model()
2024-09-11 23:45:27,906:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409665090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:27,906:INFO:Checking exceptions
2024-09-11 23:45:27,907:INFO:Preloading libraries
2024-09-11 23:45:27,907:INFO:Set up data.
2024-09-11 23:45:27,925:INFO:Set up index.
2024-09-11 23:45:28,035:INFO:Initializing predict_model()
2024-09-11 23:45:28,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,036:INFO:Checking exceptions
2024-09-11 23:45:28,036:INFO:Preloading libraries
2024-09-11 23:45:28,037:INFO:Set up data.
2024-09-11 23:45:28,052:INFO:Set up index.
2024-09-11 23:45:28,225:INFO:Initializing predict_model()
2024-09-11 23:45:28,227:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,227:INFO:Checking exceptions
2024-09-11 23:45:28,227:INFO:Preloading libraries
2024-09-11 23:45:28,227:INFO:Set up data.
2024-09-11 23:45:28,245:INFO:Set up index.
2024-09-11 23:45:28,441:INFO:Initializing predict_model()
2024-09-11 23:45:28,441:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540953FDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,441:INFO:Checking exceptions
2024-09-11 23:45:28,441:INFO:Preloading libraries
2024-09-11 23:45:28,442:INFO:Set up data.
2024-09-11 23:45:28,458:INFO:Set up index.
2024-09-11 23:45:28,654:INFO:Initializing predict_model()
2024-09-11 23:45:28,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540953FDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,655:INFO:Checking exceptions
2024-09-11 23:45:28,655:INFO:Preloading libraries
2024-09-11 23:45:28,655:INFO:Set up data.
2024-09-11 23:45:28,673:INFO:Set up index.
2024-09-11 23:45:28,823:INFO:Initializing predict_model()
2024-09-11 23:45:28,823:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB1050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,824:INFO:Checking exceptions
2024-09-11 23:45:28,824:INFO:Preloading libraries
2024-09-11 23:45:28,825:INFO:Set up data.
2024-09-11 23:45:28,843:INFO:Set up index.
2024-09-11 23:45:28,968:INFO:Initializing predict_model()
2024-09-11 23:45:28,969:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A268F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:28,969:INFO:Checking exceptions
2024-09-11 23:45:28,969:INFO:Preloading libraries
2024-09-11 23:45:28,969:INFO:Set up data.
2024-09-11 23:45:28,988:INFO:Set up index.
2024-09-11 23:45:29,119:INFO:Initializing predict_model()
2024-09-11 23:45:29,119:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:29,120:INFO:Checking exceptions
2024-09-11 23:45:29,120:INFO:Preloading libraries
2024-09-11 23:45:29,121:INFO:Set up data.
2024-09-11 23:45:29,138:INFO:Set up index.
2024-09-11 23:45:29,247:INFO:Initializing predict_model()
2024-09-11 23:45:29,247:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF76A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:29,248:INFO:Checking exceptions
2024-09-11 23:45:29,248:INFO:Preloading libraries
2024-09-11 23:45:29,249:INFO:Set up data.
2024-09-11 23:45:29,266:INFO:Set up index.
2024-09-11 23:45:29,376:INFO:Initializing predict_model()
2024-09-11 23:45:29,376:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A26A790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-11 23:45:29,377:INFO:Checking exceptions
2024-09-11 23:45:29,377:INFO:Preloading libraries
2024-09-11 23:45:29,377:INFO:Set up data.
2024-09-11 23:45:29,393:INFO:Set up index.
2024-09-11 23:45:47,901:INFO:Initializing load_model()
2024-09-11 23:45:47,901:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:47,910:INFO:Initializing load_model()
2024-09-11 23:45:47,910:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:47,914:INFO:Initializing load_model()
2024-09-11 23:45:47,914:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,000:INFO:Initializing load_model()
2024-09-11 23:45:48,000:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,016:INFO:Initializing load_model()
2024-09-11 23:45:48,017:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,035:INFO:Initializing load_model()
2024-09-11 23:45:48,035:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,054:INFO:Initializing load_model()
2024-09-11 23:45:48,055:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,061:INFO:Initializing load_model()
2024-09-11 23:45:48,062:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,068:INFO:Initializing load_model()
2024-09-11 23:45:48,068:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,073:INFO:Initializing load_model()
2024-09-11 23:45:48,074:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,079:INFO:Initializing load_model()
2024-09-11 23:45:48,081:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:45:48,158:INFO:Initializing predict_model()
2024-09-11 23:45:48,159:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B30C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B489440>)
2024-09-11 23:45:48,159:INFO:Checking exceptions
2024-09-11 23:45:48,159:INFO:Preloading libraries
2024-09-11 23:45:48,160:INFO:Set up data.
2024-09-11 23:45:48,181:INFO:Set up index.
2024-09-11 23:45:48,339:INFO:Initializing predict_model()
2024-09-11 23:45:48,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:48,339:INFO:Checking exceptions
2024-09-11 23:45:48,340:INFO:Preloading libraries
2024-09-11 23:45:48,341:INFO:Set up data.
2024-09-11 23:45:48,364:INFO:Set up index.
2024-09-11 23:45:48,515:INFO:Initializing predict_model()
2024-09-11 23:45:48,515:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:48,515:INFO:Checking exceptions
2024-09-11 23:45:48,516:INFO:Preloading libraries
2024-09-11 23:45:48,517:INFO:Set up data.
2024-09-11 23:45:48,536:INFO:Set up index.
2024-09-11 23:45:48,731:INFO:Initializing predict_model()
2024-09-11 23:45:48,731:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:48,731:INFO:Checking exceptions
2024-09-11 23:45:48,732:INFO:Preloading libraries
2024-09-11 23:45:48,732:INFO:Set up data.
2024-09-11 23:45:48,749:INFO:Set up index.
2024-09-11 23:45:48,930:INFO:Initializing predict_model()
2024-09-11 23:45:48,930:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEAD210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:48,930:INFO:Checking exceptions
2024-09-11 23:45:48,931:INFO:Preloading libraries
2024-09-11 23:45:48,931:INFO:Set up data.
2024-09-11 23:45:48,949:INFO:Set up index.
2024-09-11 23:45:49,117:INFO:Initializing predict_model()
2024-09-11 23:45:49,117:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35EF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,117:INFO:Checking exceptions
2024-09-11 23:45:49,118:INFO:Preloading libraries
2024-09-11 23:45:49,118:INFO:Set up data.
2024-09-11 23:45:49,135:INFO:Set up index.
2024-09-11 23:45:49,298:INFO:Initializing predict_model()
2024-09-11 23:45:49,298:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC5990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,299:INFO:Checking exceptions
2024-09-11 23:45:49,299:INFO:Preloading libraries
2024-09-11 23:45:49,300:INFO:Set up data.
2024-09-11 23:45:49,318:INFO:Set up index.
2024-09-11 23:45:49,452:INFO:Initializing predict_model()
2024-09-11 23:45:49,452:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,452:INFO:Checking exceptions
2024-09-11 23:45:49,453:INFO:Preloading libraries
2024-09-11 23:45:49,453:INFO:Set up data.
2024-09-11 23:45:49,470:INFO:Set up index.
2024-09-11 23:45:49,592:INFO:Initializing predict_model()
2024-09-11 23:45:49,592:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,592:INFO:Checking exceptions
2024-09-11 23:45:49,592:INFO:Preloading libraries
2024-09-11 23:45:49,593:INFO:Set up data.
2024-09-11 23:45:49,610:INFO:Set up index.
2024-09-11 23:45:49,729:INFO:Initializing predict_model()
2024-09-11 23:45:49,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF5610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,730:INFO:Checking exceptions
2024-09-11 23:45:49,730:INFO:Preloading libraries
2024-09-11 23:45:49,731:INFO:Set up data.
2024-09-11 23:45:49,748:INFO:Set up index.
2024-09-11 23:45:49,867:INFO:Initializing predict_model()
2024-09-11 23:45:49,868:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E6250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025401FB42C0>)
2024-09-11 23:45:49,868:INFO:Checking exceptions
2024-09-11 23:45:49,868:INFO:Preloading libraries
2024-09-11 23:45:49,869:INFO:Set up data.
2024-09-11 23:45:49,887:INFO:Set up index.
2024-09-11 23:45:50,097:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:586: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  score_column = score_column_map.get(model_name, "prediction_score")

2024-09-11 23:45:50,099:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:587: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  

2024-09-11 23:46:36,363:INFO:Initializing load_model()
2024-09-11 23:46:36,363:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,373:INFO:Initializing load_model()
2024-09-11 23:46:36,373:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,373:INFO:Initializing load_model()
2024-09-11 23:46:36,373:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,431:INFO:Initializing load_model()
2024-09-11 23:46:36,432:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,473:INFO:Initializing load_model()
2024-09-11 23:46:36,473:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,490:INFO:Initializing load_model()
2024-09-11 23:46:36,491:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,508:INFO:Initializing load_model()
2024-09-11 23:46:36,509:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,515:INFO:Initializing load_model()
2024-09-11 23:46:36,515:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,523:INFO:Initializing load_model()
2024-09-11 23:46:36,523:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,523:INFO:Initializing load_model()
2024-09-11 23:46:36,523:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,536:INFO:Initializing load_model()
2024-09-11 23:46:36,536:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:46:36,598:INFO:Initializing predict_model()
2024-09-11 23:46:36,598:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094995D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A062980>)
2024-09-11 23:46:36,598:INFO:Checking exceptions
2024-09-11 23:46:36,598:INFO:Preloading libraries
2024-09-11 23:46:36,600:INFO:Set up data.
2024-09-11 23:46:36,618:INFO:Set up index.
2024-09-11 23:46:36,761:INFO:Initializing predict_model()
2024-09-11 23:46:36,761:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:36,761:INFO:Checking exceptions
2024-09-11 23:46:36,767:INFO:Preloading libraries
2024-09-11 23:46:36,767:INFO:Set up data.
2024-09-11 23:46:36,786:INFO:Set up index.
2024-09-11 23:46:36,932:INFO:Initializing predict_model()
2024-09-11 23:46:36,932:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:36,933:INFO:Checking exceptions
2024-09-11 23:46:36,933:INFO:Preloading libraries
2024-09-11 23:46:36,934:INFO:Set up data.
2024-09-11 23:46:36,951:INFO:Set up index.
2024-09-11 23:46:37,137:INFO:Initializing predict_model()
2024-09-11 23:46:37,137:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,137:INFO:Checking exceptions
2024-09-11 23:46:37,137:INFO:Preloading libraries
2024-09-11 23:46:37,137:INFO:Set up data.
2024-09-11 23:46:37,158:INFO:Set up index.
2024-09-11 23:46:37,353:INFO:Initializing predict_model()
2024-09-11 23:46:37,353:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,353:INFO:Checking exceptions
2024-09-11 23:46:37,353:INFO:Preloading libraries
2024-09-11 23:46:37,353:INFO:Set up data.
2024-09-11 23:46:37,368:INFO:Set up index.
2024-09-11 23:46:37,539:INFO:Initializing predict_model()
2024-09-11 23:46:37,539:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,539:INFO:Checking exceptions
2024-09-11 23:46:37,539:INFO:Preloading libraries
2024-09-11 23:46:37,539:INFO:Set up data.
2024-09-11 23:46:37,555:INFO:Set up index.
2024-09-11 23:46:37,711:INFO:Initializing predict_model()
2024-09-11 23:46:37,711:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540953C550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,711:INFO:Checking exceptions
2024-09-11 23:46:37,712:INFO:Preloading libraries
2024-09-11 23:46:37,713:INFO:Set up data.
2024-09-11 23:46:37,720:INFO:Set up index.
2024-09-11 23:46:37,827:INFO:Initializing predict_model()
2024-09-11 23:46:37,837:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,838:INFO:Checking exceptions
2024-09-11 23:46:37,838:INFO:Preloading libraries
2024-09-11 23:46:37,838:INFO:Set up data.
2024-09-11 23:46:37,848:INFO:Set up index.
2024-09-11 23:46:37,975:INFO:Initializing predict_model()
2024-09-11 23:46:37,975:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:37,975:INFO:Checking exceptions
2024-09-11 23:46:37,975:INFO:Preloading libraries
2024-09-11 23:46:37,975:INFO:Set up data.
2024-09-11 23:46:37,999:INFO:Set up index.
2024-09-11 23:46:38,140:INFO:Initializing predict_model()
2024-09-11 23:46:38,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547AAD3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:38,140:INFO:Checking exceptions
2024-09-11 23:46:38,140:INFO:Preloading libraries
2024-09-11 23:46:38,140:INFO:Set up data.
2024-09-11 23:46:38,162:INFO:Set up index.
2024-09-11 23:46:38,286:INFO:Initializing predict_model()
2024-09-11 23:46:38,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A26BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-11 23:46:38,287:INFO:Checking exceptions
2024-09-11 23:46:38,287:INFO:Preloading libraries
2024-09-11 23:46:38,287:INFO:Set up data.
2024-09-11 23:46:38,304:INFO:Set up index.
2024-09-11 23:46:38,504:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:586: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  score_column = score_column_map.get(model_name, "prediction_score")

2024-09-11 23:46:38,505:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:587: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  

2024-09-11 23:54:00,673:INFO:Initializing load_model()
2024-09-11 23:54:00,674:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,678:INFO:Initializing load_model()
2024-09-11 23:54:00,678:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,685:INFO:Initializing load_model()
2024-09-11 23:54:00,685:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,731:INFO:Initializing load_model()
2024-09-11 23:54:00,731:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,737:INFO:Initializing load_model()
2024-09-11 23:54:00,737:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,762:INFO:Initializing load_model()
2024-09-11 23:54:00,762:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,779:INFO:Initializing load_model()
2024-09-11 23:54:00,779:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,785:INFO:Initializing load_model()
2024-09-11 23:54:00,785:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,790:INFO:Initializing load_model()
2024-09-11 23:54:00,791:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,796:INFO:Initializing load_model()
2024-09-11 23:54:00,797:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,802:INFO:Initializing load_model()
2024-09-11 23:54:00,803:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-11 23:54:00,873:INFO:Initializing predict_model()
2024-09-11 23:54:00,873:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540948AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:00,873:INFO:Checking exceptions
2024-09-11 23:54:00,873:INFO:Preloading libraries
2024-09-11 23:54:00,883:INFO:Set up data.
2024-09-11 23:54:00,893:INFO:Set up index.
2024-09-11 23:54:01,039:INFO:Initializing predict_model()
2024-09-11 23:54:01,039:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A02BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,039:INFO:Checking exceptions
2024-09-11 23:54:01,039:INFO:Preloading libraries
2024-09-11 23:54:01,039:INFO:Set up data.
2024-09-11 23:54:01,050:INFO:Set up index.
2024-09-11 23:54:01,182:INFO:Initializing predict_model()
2024-09-11 23:54:01,182:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095A0390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,182:INFO:Checking exceptions
2024-09-11 23:54:01,182:INFO:Preloading libraries
2024-09-11 23:54:01,182:INFO:Set up data.
2024-09-11 23:54:01,202:INFO:Set up index.
2024-09-11 23:54:01,367:INFO:Initializing predict_model()
2024-09-11 23:54:01,367:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F15990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,367:INFO:Checking exceptions
2024-09-11 23:54:01,367:INFO:Preloading libraries
2024-09-11 23:54:01,375:INFO:Set up data.
2024-09-11 23:54:01,385:INFO:Set up index.
2024-09-11 23:54:01,567:INFO:Initializing predict_model()
2024-09-11 23:54:01,567:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,567:INFO:Checking exceptions
2024-09-11 23:54:01,567:INFO:Preloading libraries
2024-09-11 23:54:01,567:INFO:Set up data.
2024-09-11 23:54:01,587:INFO:Set up index.
2024-09-11 23:54:01,740:INFO:Initializing predict_model()
2024-09-11 23:54:01,740:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0ECC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,740:INFO:Checking exceptions
2024-09-11 23:54:01,740:INFO:Preloading libraries
2024-09-11 23:54:01,740:INFO:Set up data.
2024-09-11 23:54:01,760:INFO:Set up index.
2024-09-11 23:54:01,908:INFO:Initializing predict_model()
2024-09-11 23:54:01,908:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:01,908:INFO:Checking exceptions
2024-09-11 23:54:01,908:INFO:Preloading libraries
2024-09-11 23:54:01,908:INFO:Set up data.
2024-09-11 23:54:01,928:INFO:Set up index.
2024-09-11 23:54:02,055:INFO:Initializing predict_model()
2024-09-11 23:54:02,055:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:02,056:INFO:Checking exceptions
2024-09-11 23:54:02,056:INFO:Preloading libraries
2024-09-11 23:54:02,056:INFO:Set up data.
2024-09-11 23:54:02,065:INFO:Set up index.
2024-09-11 23:54:02,179:INFO:Initializing predict_model()
2024-09-11 23:54:02,179:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A02BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:02,179:INFO:Checking exceptions
2024-09-11 23:54:02,179:INFO:Preloading libraries
2024-09-11 23:54:02,179:INFO:Set up data.
2024-09-11 23:54:02,195:INFO:Set up index.
2024-09-11 23:54:02,304:INFO:Initializing predict_model()
2024-09-11 23:54:02,305:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:02,305:INFO:Checking exceptions
2024-09-11 23:54:02,306:INFO:Preloading libraries
2024-09-11 23:54:02,306:INFO:Set up data.
2024-09-11 23:54:02,323:INFO:Set up index.
2024-09-11 23:54:02,426:INFO:Initializing predict_model()
2024-09-11 23:54:02,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E6110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942D9E0>)
2024-09-11 23:54:02,426:INFO:Checking exceptions
2024-09-11 23:54:02,426:INFO:Preloading libraries
2024-09-11 23:54:02,426:INFO:Set up data.
2024-09-11 23:54:02,442:INFO:Set up index.
2024-09-11 23:54:02,611:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-11 23:54:02,611:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:19:38,673:INFO:Initializing load_model()
2024-09-12 09:19:38,678:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,699:INFO:Initializing load_model()
2024-09-12 09:19:38,700:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,713:INFO:Initializing load_model()
2024-09-12 09:19:38,713:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,776:INFO:Initializing load_model()
2024-09-12 09:19:38,777:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,795:INFO:Initializing load_model()
2024-09-12 09:19:38,796:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,814:INFO:Initializing load_model()
2024-09-12 09:19:38,814:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,833:INFO:Initializing load_model()
2024-09-12 09:19:38,833:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,848:INFO:Initializing load_model()
2024-09-12 09:19:38,848:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,865:INFO:Initializing load_model()
2024-09-12 09:19:38,865:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,880:INFO:Initializing load_model()
2024-09-12 09:19:38,881:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:38,888:INFO:Initializing load_model()
2024-09-12 09:19:38,888:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:47,889:INFO:Initializing load_model()
2024-09-12 09:19:47,889:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:47,895:INFO:Initializing load_model()
2024-09-12 09:19:47,896:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:47,903:INFO:Initializing load_model()
2024-09-12 09:19:47,903:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:47,988:INFO:Initializing load_model()
2024-09-12 09:19:47,989:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,014:INFO:Initializing load_model()
2024-09-12 09:19:48,015:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,033:INFO:Initializing load_model()
2024-09-12 09:19:48,033:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,051:INFO:Initializing load_model()
2024-09-12 09:19:48,052:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,058:INFO:Initializing load_model()
2024-09-12 09:19:48,058:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,064:INFO:Initializing load_model()
2024-09-12 09:19:48,065:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,075:INFO:Initializing load_model()
2024-09-12 09:19:48,075:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,082:INFO:Initializing load_model()
2024-09-12 09:19:48,083:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:48,203:INFO:Initializing predict_model()
2024-09-12 09:19:48,203:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0B6290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:48,203:INFO:Checking exceptions
2024-09-12 09:19:48,203:INFO:Preloading libraries
2024-09-12 09:19:48,204:INFO:Set up data.
2024-09-12 09:19:48,241:INFO:Set up index.
2024-09-12 09:19:48,400:INFO:Initializing predict_model()
2024-09-12 09:19:48,400:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF76790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:48,400:INFO:Checking exceptions
2024-09-12 09:19:48,400:INFO:Preloading libraries
2024-09-12 09:19:48,401:INFO:Set up data.
2024-09-12 09:19:48,418:INFO:Set up index.
2024-09-12 09:19:48,611:INFO:Initializing predict_model()
2024-09-12 09:19:48,611:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409686190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:48,612:INFO:Checking exceptions
2024-09-12 09:19:48,612:INFO:Preloading libraries
2024-09-12 09:19:48,612:INFO:Set up data.
2024-09-12 09:19:48,634:INFO:Set up index.
2024-09-12 09:19:48,855:INFO:Initializing predict_model()
2024-09-12 09:19:48,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409686190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:48,855:INFO:Checking exceptions
2024-09-12 09:19:48,855:INFO:Preloading libraries
2024-09-12 09:19:48,856:INFO:Set up data.
2024-09-12 09:19:48,875:INFO:Set up index.
2024-09-12 09:19:49,057:INFO:Initializing predict_model()
2024-09-12 09:19:49,057:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409585310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:49,057:INFO:Checking exceptions
2024-09-12 09:19:49,057:INFO:Preloading libraries
2024-09-12 09:19:49,058:INFO:Set up data.
2024-09-12 09:19:49,074:INFO:Set up index.
2024-09-12 09:19:49,264:INFO:Initializing predict_model()
2024-09-12 09:19:49,265:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409686190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:49,265:INFO:Checking exceptions
2024-09-12 09:19:49,266:INFO:Preloading libraries
2024-09-12 09:19:49,266:INFO:Set up data.
2024-09-12 09:19:49,307:INFO:Set up index.
2024-09-12 09:19:49,484:INFO:Initializing predict_model()
2024-09-12 09:19:49,484:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:49,484:INFO:Checking exceptions
2024-09-12 09:19:49,485:INFO:Preloading libraries
2024-09-12 09:19:49,485:INFO:Set up data.
2024-09-12 09:19:49,506:INFO:Set up index.
2024-09-12 09:19:49,647:INFO:Initializing predict_model()
2024-09-12 09:19:49,647:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409495210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:49,647:INFO:Checking exceptions
2024-09-12 09:19:49,648:INFO:Preloading libraries
2024-09-12 09:19:49,648:INFO:Set up data.
2024-09-12 09:19:49,666:INFO:Set up index.
2024-09-12 09:19:49,830:INFO:Initializing predict_model()
2024-09-12 09:19:49,830:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409495210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:49,831:INFO:Checking exceptions
2024-09-12 09:19:49,831:INFO:Preloading libraries
2024-09-12 09:19:49,831:INFO:Set up data.
2024-09-12 09:19:49,864:INFO:Set up index.
2024-09-12 09:19:50,001:INFO:Initializing predict_model()
2024-09-12 09:19:50,001:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:50,001:INFO:Checking exceptions
2024-09-12 09:19:50,002:INFO:Preloading libraries
2024-09-12 09:19:50,002:INFO:Set up data.
2024-09-12 09:19:50,018:INFO:Set up index.
2024-09-12 09:19:50,163:INFO:Initializing predict_model()
2024-09-12 09:19:50,163:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0B4A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A092F20>)
2024-09-12 09:19:50,163:INFO:Checking exceptions
2024-09-12 09:19:50,164:INFO:Preloading libraries
2024-09-12 09:19:50,164:INFO:Set up data.
2024-09-12 09:19:50,191:INFO:Set up index.
2024-09-12 09:19:53,906:INFO:Initializing load_model()
2024-09-12 09:19:53,906:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:53,911:INFO:Initializing load_model()
2024-09-12 09:19:53,911:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:53,917:INFO:Initializing load_model()
2024-09-12 09:19:53,917:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:53,997:INFO:Initializing load_model()
2024-09-12 09:19:53,997:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,014:INFO:Initializing load_model()
2024-09-12 09:19:54,014:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,030:INFO:Initializing load_model()
2024-09-12 09:19:54,030:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,049:INFO:Initializing load_model()
2024-09-12 09:19:54,050:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,056:INFO:Initializing load_model()
2024-09-12 09:19:54,056:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,062:INFO:Initializing load_model()
2024-09-12 09:19:54,062:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,068:INFO:Initializing load_model()
2024-09-12 09:19:54,069:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,074:INFO:Initializing load_model()
2024-09-12 09:19:54,075:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:54,167:INFO:Initializing predict_model()
2024-09-12 09:19:54,167:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B5D22D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F67A0>)
2024-09-12 09:19:54,167:INFO:Checking exceptions
2024-09-12 09:19:54,167:INFO:Preloading libraries
2024-09-12 09:19:54,168:INFO:Set up data.
2024-09-12 09:19:54,187:INFO:Set up index.
2024-09-12 09:19:54,317:INFO:Initializing predict_model()
2024-09-12 09:19:54,317:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4B20D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:54,318:INFO:Checking exceptions
2024-09-12 09:19:54,318:INFO:Preloading libraries
2024-09-12 09:19:54,318:INFO:Set up data.
2024-09-12 09:19:54,338:INFO:Set up index.
2024-09-12 09:19:54,478:INFO:Initializing predict_model()
2024-09-12 09:19:54,478:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:54,479:INFO:Checking exceptions
2024-09-12 09:19:54,479:INFO:Preloading libraries
2024-09-12 09:19:54,479:INFO:Set up data.
2024-09-12 09:19:54,498:INFO:Set up index.
2024-09-12 09:19:54,672:INFO:Initializing predict_model()
2024-09-12 09:19:54,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:54,673:INFO:Checking exceptions
2024-09-12 09:19:54,673:INFO:Preloading libraries
2024-09-12 09:19:54,674:INFO:Set up data.
2024-09-12 09:19:54,691:INFO:Set up index.
2024-09-12 09:19:54,875:INFO:Initializing predict_model()
2024-09-12 09:19:54,875:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408045E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:54,875:INFO:Checking exceptions
2024-09-12 09:19:54,876:INFO:Preloading libraries
2024-09-12 09:19:54,876:INFO:Set up data.
2024-09-12 09:19:54,896:INFO:Set up index.
2024-09-12 09:19:55,048:INFO:Initializing predict_model()
2024-09-12 09:19:55,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093DB110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,048:INFO:Checking exceptions
2024-09-12 09:19:55,049:INFO:Preloading libraries
2024-09-12 09:19:55,049:INFO:Set up data.
2024-09-12 09:19:55,065:INFO:Set up index.
2024-09-12 09:19:55,226:INFO:Initializing predict_model()
2024-09-12 09:19:55,226:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254054F8250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,226:INFO:Checking exceptions
2024-09-12 09:19:55,227:INFO:Preloading libraries
2024-09-12 09:19:55,227:INFO:Set up data.
2024-09-12 09:19:55,248:INFO:Set up index.
2024-09-12 09:19:55,388:INFO:Initializing predict_model()
2024-09-12 09:19:55,389:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC7FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,389:INFO:Checking exceptions
2024-09-12 09:19:55,389:INFO:Preloading libraries
2024-09-12 09:19:55,390:INFO:Set up data.
2024-09-12 09:19:55,409:INFO:Set up index.
2024-09-12 09:19:55,524:INFO:Initializing predict_model()
2024-09-12 09:19:55,526:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A7A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,526:INFO:Checking exceptions
2024-09-12 09:19:55,526:INFO:Preloading libraries
2024-09-12 09:19:55,527:INFO:Set up data.
2024-09-12 09:19:55,545:INFO:Set up index.
2024-09-12 09:19:55,656:INFO:Initializing predict_model()
2024-09-12 09:19:55,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDFFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,657:INFO:Checking exceptions
2024-09-12 09:19:55,657:INFO:Preloading libraries
2024-09-12 09:19:55,658:INFO:Set up data.
2024-09-12 09:19:55,673:INFO:Set up index.
2024-09-12 09:19:55,783:INFO:Initializing predict_model()
2024-09-12 09:19:55,783:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDFFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:19:55,784:INFO:Checking exceptions
2024-09-12 09:19:55,784:INFO:Preloading libraries
2024-09-12 09:19:55,784:INFO:Set up data.
2024-09-12 09:19:55,800:INFO:Set up index.
2024-09-12 09:19:55,988:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:19:55,989:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:19:57,775:INFO:Initializing load_model()
2024-09-12 09:19:57,775:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,780:INFO:Initializing load_model()
2024-09-12 09:19:57,780:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,784:INFO:Initializing load_model()
2024-09-12 09:19:57,784:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,842:INFO:Initializing load_model()
2024-09-12 09:19:57,842:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,859:INFO:Initializing load_model()
2024-09-12 09:19:57,859:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,874:INFO:Initializing load_model()
2024-09-12 09:19:57,875:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,890:INFO:Initializing load_model()
2024-09-12 09:19:57,890:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,895:INFO:Initializing load_model()
2024-09-12 09:19:57,896:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,902:INFO:Initializing load_model()
2024-09-12 09:19:57,903:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,909:INFO:Initializing load_model()
2024-09-12 09:19:57,910:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,915:INFO:Initializing load_model()
2024-09-12 09:19:57,915:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:19:57,988:INFO:Initializing predict_model()
2024-09-12 09:19:57,988:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B344E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063EC0>)
2024-09-12 09:19:57,989:INFO:Checking exceptions
2024-09-12 09:19:57,990:INFO:Preloading libraries
2024-09-12 09:19:57,990:INFO:Set up data.
2024-09-12 09:19:58,011:INFO:Set up index.
2024-09-12 09:19:58,133:INFO:Initializing predict_model()
2024-09-12 09:19:58,133:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254074CE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:58,134:INFO:Checking exceptions
2024-09-12 09:19:58,134:INFO:Preloading libraries
2024-09-12 09:19:58,135:INFO:Set up data.
2024-09-12 09:19:58,150:INFO:Set up index.
2024-09-12 09:19:58,272:INFO:Initializing predict_model()
2024-09-12 09:19:58,272:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A02BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:58,273:INFO:Checking exceptions
2024-09-12 09:19:58,273:INFO:Preloading libraries
2024-09-12 09:19:58,275:INFO:Set up data.
2024-09-12 09:19:58,294:INFO:Set up index.
2024-09-12 09:19:58,530:INFO:Initializing predict_model()
2024-09-12 09:19:58,530:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:58,531:INFO:Checking exceptions
2024-09-12 09:19:58,531:INFO:Preloading libraries
2024-09-12 09:19:58,531:INFO:Set up data.
2024-09-12 09:19:58,550:INFO:Set up index.
2024-09-12 09:19:58,737:INFO:Initializing predict_model()
2024-09-12 09:19:58,738:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:58,738:INFO:Checking exceptions
2024-09-12 09:19:58,738:INFO:Preloading libraries
2024-09-12 09:19:58,739:INFO:Set up data.
2024-09-12 09:19:58,760:INFO:Set up index.
2024-09-12 09:19:58,934:INFO:Initializing predict_model()
2024-09-12 09:19:58,934:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409587050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:58,934:INFO:Checking exceptions
2024-09-12 09:19:58,935:INFO:Preloading libraries
2024-09-12 09:19:58,936:INFO:Set up data.
2024-09-12 09:19:58,955:INFO:Set up index.
2024-09-12 09:19:59,105:INFO:Initializing predict_model()
2024-09-12 09:19:59,105:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E6010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:59,105:INFO:Checking exceptions
2024-09-12 09:19:59,105:INFO:Preloading libraries
2024-09-12 09:19:59,106:INFO:Set up data.
2024-09-12 09:19:59,123:INFO:Set up index.
2024-09-12 09:19:59,246:INFO:Initializing predict_model()
2024-09-12 09:19:59,246:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:59,247:INFO:Checking exceptions
2024-09-12 09:19:59,247:INFO:Preloading libraries
2024-09-12 09:19:59,248:INFO:Set up data.
2024-09-12 09:19:59,267:INFO:Set up index.
2024-09-12 09:19:59,403:INFO:Initializing predict_model()
2024-09-12 09:19:59,403:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFB350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:59,403:INFO:Checking exceptions
2024-09-12 09:19:59,404:INFO:Preloading libraries
2024-09-12 09:19:59,404:INFO:Set up data.
2024-09-12 09:19:59,420:INFO:Set up index.
2024-09-12 09:19:59,534:INFO:Initializing predict_model()
2024-09-12 09:19:59,534:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:59,535:INFO:Checking exceptions
2024-09-12 09:19:59,535:INFO:Preloading libraries
2024-09-12 09:19:59,536:INFO:Set up data.
2024-09-12 09:19:59,553:INFO:Set up index.
2024-09-12 09:19:59,669:INFO:Initializing predict_model()
2024-09-12 09:19:59,669:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05C450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025402209B20>)
2024-09-12 09:19:59,670:INFO:Checking exceptions
2024-09-12 09:19:59,670:INFO:Preloading libraries
2024-09-12 09:19:59,670:INFO:Set up data.
2024-09-12 09:19:59,687:INFO:Set up index.
2024-09-12 09:19:59,878:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:19:59,878:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:19:59,890:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:19:59,890:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:04,026:INFO:Initializing load_model()
2024-09-12 09:20:04,026:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,030:INFO:Initializing load_model()
2024-09-12 09:20:04,031:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,035:INFO:Initializing load_model()
2024-09-12 09:20:04,036:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,094:INFO:Initializing load_model()
2024-09-12 09:20:04,094:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,108:INFO:Initializing load_model()
2024-09-12 09:20:04,109:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,126:INFO:Initializing load_model()
2024-09-12 09:20:04,127:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,142:INFO:Initializing load_model()
2024-09-12 09:20:04,143:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,148:INFO:Initializing load_model()
2024-09-12 09:20:04,148:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,155:INFO:Initializing load_model()
2024-09-12 09:20:04,155:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,161:INFO:Initializing load_model()
2024-09-12 09:20:04,161:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,169:INFO:Initializing load_model()
2024-09-12 09:20:04,169:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:04,238:INFO:Initializing predict_model()
2024-09-12 09:20:04,239:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0F0CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BF2E0>)
2024-09-12 09:20:04,239:INFO:Checking exceptions
2024-09-12 09:20:04,239:INFO:Preloading libraries
2024-09-12 09:20:04,240:INFO:Set up data.
2024-09-12 09:20:04,264:INFO:Set up index.
2024-09-12 09:20:04,406:INFO:Initializing predict_model()
2024-09-12 09:20:04,406:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:04,406:INFO:Checking exceptions
2024-09-12 09:20:04,407:INFO:Preloading libraries
2024-09-12 09:20:04,407:INFO:Set up data.
2024-09-12 09:20:04,423:INFO:Set up index.
2024-09-12 09:20:04,543:INFO:Initializing predict_model()
2024-09-12 09:20:04,543:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A41910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:04,544:INFO:Checking exceptions
2024-09-12 09:20:04,544:INFO:Preloading libraries
2024-09-12 09:20:04,545:INFO:Set up data.
2024-09-12 09:20:04,562:INFO:Set up index.
2024-09-12 09:20:04,735:INFO:Initializing predict_model()
2024-09-12 09:20:04,735:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:04,736:INFO:Checking exceptions
2024-09-12 09:20:04,737:INFO:Preloading libraries
2024-09-12 09:20:04,737:INFO:Set up data.
2024-09-12 09:20:04,754:INFO:Set up index.
2024-09-12 09:20:04,928:INFO:Initializing predict_model()
2024-09-12 09:20:04,929:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E4F04D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:04,929:INFO:Checking exceptions
2024-09-12 09:20:04,929:INFO:Preloading libraries
2024-09-12 09:20:04,929:INFO:Set up data.
2024-09-12 09:20:04,953:INFO:Set up index.
2024-09-12 09:20:05,110:INFO:Initializing predict_model()
2024-09-12 09:20:05,111:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E4F04D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,111:INFO:Checking exceptions
2024-09-12 09:20:05,111:INFO:Preloading libraries
2024-09-12 09:20:05,112:INFO:Set up data.
2024-09-12 09:20:05,129:INFO:Set up index.
2024-09-12 09:20:05,288:INFO:Initializing predict_model()
2024-09-12 09:20:05,288:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254065E1D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,289:INFO:Checking exceptions
2024-09-12 09:20:05,289:INFO:Preloading libraries
2024-09-12 09:20:05,289:INFO:Set up data.
2024-09-12 09:20:05,307:INFO:Set up index.
2024-09-12 09:20:05,435:INFO:Initializing predict_model()
2024-09-12 09:20:05,436:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,436:INFO:Checking exceptions
2024-09-12 09:20:05,436:INFO:Preloading libraries
2024-09-12 09:20:05,436:INFO:Set up data.
2024-09-12 09:20:05,453:INFO:Set up index.
2024-09-12 09:20:05,581:INFO:Initializing predict_model()
2024-09-12 09:20:05,582:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F09B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,582:INFO:Checking exceptions
2024-09-12 09:20:05,582:INFO:Preloading libraries
2024-09-12 09:20:05,583:INFO:Set up data.
2024-09-12 09:20:05,597:INFO:Set up index.
2024-09-12 09:20:05,717:INFO:Initializing predict_model()
2024-09-12 09:20:05,718:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A41910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,719:INFO:Checking exceptions
2024-09-12 09:20:05,719:INFO:Preloading libraries
2024-09-12 09:20:05,719:INFO:Set up data.
2024-09-12 09:20:05,735:INFO:Set up index.
2024-09-12 09:20:05,854:INFO:Initializing predict_model()
2024-09-12 09:20:05,854:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540955A110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547CD6EB60>)
2024-09-12 09:20:05,855:INFO:Checking exceptions
2024-09-12 09:20:05,855:INFO:Preloading libraries
2024-09-12 09:20:05,855:INFO:Set up data.
2024-09-12 09:20:05,872:INFO:Set up index.
2024-09-12 09:20:06,061:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:06,062:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:06,073:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:06,073:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:28,275:INFO:Initializing load_model()
2024-09-12 09:20:28,276:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,281:INFO:Initializing load_model()
2024-09-12 09:20:28,282:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,289:INFO:Initializing load_model()
2024-09-12 09:20:28,289:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,347:INFO:Initializing load_model()
2024-09-12 09:20:28,347:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,363:INFO:Initializing load_model()
2024-09-12 09:20:28,363:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,380:INFO:Initializing load_model()
2024-09-12 09:20:28,382:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,400:INFO:Initializing load_model()
2024-09-12 09:20:28,400:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,405:INFO:Initializing load_model()
2024-09-12 09:20:28,406:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,411:INFO:Initializing load_model()
2024-09-12 09:20:28,411:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,417:INFO:Initializing load_model()
2024-09-12 09:20:28,418:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,423:INFO:Initializing load_model()
2024-09-12 09:20:28,424:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:28,492:INFO:Initializing predict_model()
2024-09-12 09:20:28,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4DB610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B48ACA0>)
2024-09-12 09:20:28,492:INFO:Checking exceptions
2024-09-12 09:20:28,493:INFO:Preloading libraries
2024-09-12 09:20:28,493:INFO:Set up data.
2024-09-12 09:20:28,514:INFO:Set up index.
2024-09-12 09:20:28,640:INFO:Initializing predict_model()
2024-09-12 09:20:28,640:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:28,641:INFO:Checking exceptions
2024-09-12 09:20:28,641:INFO:Preloading libraries
2024-09-12 09:20:28,641:INFO:Set up data.
2024-09-12 09:20:28,659:INFO:Set up index.
2024-09-12 09:20:28,797:INFO:Initializing predict_model()
2024-09-12 09:20:28,797:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409401210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:28,798:INFO:Checking exceptions
2024-09-12 09:20:28,798:INFO:Preloading libraries
2024-09-12 09:20:28,798:INFO:Set up data.
2024-09-12 09:20:28,819:INFO:Set up index.
2024-09-12 09:20:29,019:INFO:Initializing predict_model()
2024-09-12 09:20:29,020:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,020:INFO:Checking exceptions
2024-09-12 09:20:29,020:INFO:Preloading libraries
2024-09-12 09:20:29,021:INFO:Set up data.
2024-09-12 09:20:29,041:INFO:Set up index.
2024-09-12 09:20:29,218:INFO:Initializing predict_model()
2024-09-12 09:20:29,218:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,219:INFO:Checking exceptions
2024-09-12 09:20:29,219:INFO:Preloading libraries
2024-09-12 09:20:29,220:INFO:Set up data.
2024-09-12 09:20:29,240:INFO:Set up index.
2024-09-12 09:20:29,401:INFO:Initializing predict_model()
2024-09-12 09:20:29,401:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,402:INFO:Checking exceptions
2024-09-12 09:20:29,402:INFO:Preloading libraries
2024-09-12 09:20:29,403:INFO:Set up data.
2024-09-12 09:20:29,420:INFO:Set up index.
2024-09-12 09:20:29,580:INFO:Initializing predict_model()
2024-09-12 09:20:29,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,581:INFO:Checking exceptions
2024-09-12 09:20:29,581:INFO:Preloading libraries
2024-09-12 09:20:29,582:INFO:Set up data.
2024-09-12 09:20:29,601:INFO:Set up index.
2024-09-12 09:20:29,743:INFO:Initializing predict_model()
2024-09-12 09:20:29,744:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,744:INFO:Checking exceptions
2024-09-12 09:20:29,744:INFO:Preloading libraries
2024-09-12 09:20:29,745:INFO:Set up data.
2024-09-12 09:20:29,765:INFO:Set up index.
2024-09-12 09:20:29,901:INFO:Initializing predict_model()
2024-09-12 09:20:29,901:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:29,902:INFO:Checking exceptions
2024-09-12 09:20:29,902:INFO:Preloading libraries
2024-09-12 09:20:29,903:INFO:Set up data.
2024-09-12 09:20:29,917:INFO:Set up index.
2024-09-12 09:20:30,030:INFO:Initializing predict_model()
2024-09-12 09:20:30,031:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409686190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:30,031:INFO:Checking exceptions
2024-09-12 09:20:30,032:INFO:Preloading libraries
2024-09-12 09:20:30,032:INFO:Set up data.
2024-09-12 09:20:30,048:INFO:Set up index.
2024-09-12 09:20:30,160:INFO:Initializing predict_model()
2024-09-12 09:20:30,160:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:30,160:INFO:Checking exceptions
2024-09-12 09:20:30,160:INFO:Preloading libraries
2024-09-12 09:20:30,161:INFO:Set up data.
2024-09-12 09:20:30,181:INFO:Set up index.
2024-09-12 09:20:30,359:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:30,360:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:30,371:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:30,372:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:30,382:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:30,383:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:37,532:INFO:Initializing load_model()
2024-09-12 09:20:37,532:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,536:INFO:Initializing load_model()
2024-09-12 09:20:37,537:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,542:INFO:Initializing load_model()
2024-09-12 09:20:37,543:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,619:INFO:Initializing load_model()
2024-09-12 09:20:37,619:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,633:INFO:Initializing load_model()
2024-09-12 09:20:37,633:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,650:INFO:Initializing load_model()
2024-09-12 09:20:37,650:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,666:INFO:Initializing load_model()
2024-09-12 09:20:37,666:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,672:INFO:Initializing load_model()
2024-09-12 09:20:37,672:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,677:INFO:Initializing load_model()
2024-09-12 09:20:37,679:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,684:INFO:Initializing load_model()
2024-09-12 09:20:37,684:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,690:INFO:Initializing load_model()
2024-09-12 09:20:37,690:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:37,759:INFO:Initializing predict_model()
2024-09-12 09:20:37,759:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FDB8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942C360>)
2024-09-12 09:20:37,760:INFO:Checking exceptions
2024-09-12 09:20:37,760:INFO:Preloading libraries
2024-09-12 09:20:37,761:INFO:Set up data.
2024-09-12 09:20:37,778:INFO:Set up index.
2024-09-12 09:20:37,931:INFO:Initializing predict_model()
2024-09-12 09:20:37,931:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547AAD3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:37,932:INFO:Checking exceptions
2024-09-12 09:20:37,932:INFO:Preloading libraries
2024-09-12 09:20:37,932:INFO:Set up data.
2024-09-12 09:20:37,958:INFO:Set up index.
2024-09-12 09:20:38,099:INFO:Initializing predict_model()
2024-09-12 09:20:38,100:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:38,100:INFO:Checking exceptions
2024-09-12 09:20:38,101:INFO:Preloading libraries
2024-09-12 09:20:38,101:INFO:Set up data.
2024-09-12 09:20:38,118:INFO:Set up index.
2024-09-12 09:20:38,302:INFO:Initializing predict_model()
2024-09-12 09:20:38,303:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:38,303:INFO:Checking exceptions
2024-09-12 09:20:38,304:INFO:Preloading libraries
2024-09-12 09:20:38,304:INFO:Set up data.
2024-09-12 09:20:38,323:INFO:Set up index.
2024-09-12 09:20:38,510:INFO:Initializing predict_model()
2024-09-12 09:20:38,511:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:38,511:INFO:Checking exceptions
2024-09-12 09:20:38,511:INFO:Preloading libraries
2024-09-12 09:20:38,512:INFO:Set up data.
2024-09-12 09:20:38,528:INFO:Set up index.
2024-09-12 09:20:38,708:INFO:Initializing predict_model()
2024-09-12 09:20:38,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:38,708:INFO:Checking exceptions
2024-09-12 09:20:38,709:INFO:Preloading libraries
2024-09-12 09:20:38,709:INFO:Set up data.
2024-09-12 09:20:38,727:INFO:Set up index.
2024-09-12 09:20:38,890:INFO:Initializing predict_model()
2024-09-12 09:20:38,891:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB1150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:38,891:INFO:Checking exceptions
2024-09-12 09:20:38,891:INFO:Preloading libraries
2024-09-12 09:20:38,892:INFO:Set up data.
2024-09-12 09:20:38,913:INFO:Set up index.
2024-09-12 09:20:39,047:INFO:Initializing predict_model()
2024-09-12 09:20:39,047:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:39,048:INFO:Checking exceptions
2024-09-12 09:20:39,048:INFO:Preloading libraries
2024-09-12 09:20:39,048:INFO:Set up data.
2024-09-12 09:20:39,070:INFO:Set up index.
2024-09-12 09:20:39,221:INFO:Initializing predict_model()
2024-09-12 09:20:39,221:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540957B650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:39,222:INFO:Checking exceptions
2024-09-12 09:20:39,222:INFO:Preloading libraries
2024-09-12 09:20:39,223:INFO:Set up data.
2024-09-12 09:20:39,243:INFO:Set up index.
2024-09-12 09:20:39,374:INFO:Initializing predict_model()
2024-09-12 09:20:39,374:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407834110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:39,375:INFO:Checking exceptions
2024-09-12 09:20:39,375:INFO:Preloading libraries
2024-09-12 09:20:39,376:INFO:Set up data.
2024-09-12 09:20:39,392:INFO:Set up index.
2024-09-12 09:20:39,500:INFO:Initializing predict_model()
2024-09-12 09:20:39,501:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409FC20C0>)
2024-09-12 09:20:39,501:INFO:Checking exceptions
2024-09-12 09:20:39,501:INFO:Preloading libraries
2024-09-12 09:20:39,502:INFO:Set up data.
2024-09-12 09:20:39,519:INFO:Set up index.
2024-09-12 09:20:39,700:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:39,700:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:39,712:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:39,713:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:39,721:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:39,722:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:39,731:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:39,732:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:49,071:INFO:Initializing load_model()
2024-09-12 09:20:49,071:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,078:INFO:Initializing load_model()
2024-09-12 09:20:49,078:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,082:INFO:Initializing load_model()
2024-09-12 09:20:49,083:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,144:INFO:Initializing load_model()
2024-09-12 09:20:49,145:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,160:INFO:Initializing load_model()
2024-09-12 09:20:49,160:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,178:INFO:Initializing load_model()
2024-09-12 09:20:49,178:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,194:INFO:Initializing load_model()
2024-09-12 09:20:49,195:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,203:INFO:Initializing load_model()
2024-09-12 09:20:49,204:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,209:INFO:Initializing load_model()
2024-09-12 09:20:49,209:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,215:INFO:Initializing load_model()
2024-09-12 09:20:49,215:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,222:INFO:Initializing load_model()
2024-09-12 09:20:49,222:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:49,309:INFO:Initializing predict_model()
2024-09-12 09:20:49,310:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A278A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063EC0>)
2024-09-12 09:20:49,310:INFO:Checking exceptions
2024-09-12 09:20:49,310:INFO:Preloading libraries
2024-09-12 09:20:49,311:INFO:Set up data.
2024-09-12 09:20:49,331:INFO:Set up index.
2024-09-12 09:20:49,460:INFO:Initializing predict_model()
2024-09-12 09:20:49,460:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD0D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:49,461:INFO:Checking exceptions
2024-09-12 09:20:49,461:INFO:Preloading libraries
2024-09-12 09:20:49,461:INFO:Set up data.
2024-09-12 09:20:49,479:INFO:Set up index.
2024-09-12 09:20:49,610:INFO:Initializing predict_model()
2024-09-12 09:20:49,612:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD0D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:49,612:INFO:Checking exceptions
2024-09-12 09:20:49,612:INFO:Preloading libraries
2024-09-12 09:20:49,613:INFO:Set up data.
2024-09-12 09:20:49,636:INFO:Set up index.
2024-09-12 09:20:49,929:INFO:Initializing predict_model()
2024-09-12 09:20:49,930:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540955B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:49,944:INFO:Checking exceptions
2024-09-12 09:20:49,945:INFO:Preloading libraries
2024-09-12 09:20:49,947:INFO:Set up data.
2024-09-12 09:20:49,971:INFO:Set up index.
2024-09-12 09:20:50,224:INFO:Initializing predict_model()
2024-09-12 09:20:50,225:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409545E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:50,228:INFO:Checking exceptions
2024-09-12 09:20:50,352:INFO:Preloading libraries
2024-09-12 09:20:50,353:INFO:Set up data.
2024-09-12 09:20:50,375:INFO:Set up index.
2024-09-12 09:20:50,639:INFO:Initializing predict_model()
2024-09-12 09:20:50,639:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0B5750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:50,640:INFO:Checking exceptions
2024-09-12 09:20:50,640:INFO:Preloading libraries
2024-09-12 09:20:50,642:INFO:Set up data.
2024-09-12 09:20:50,681:INFO:Set up index.
2024-09-12 09:20:51,062:INFO:Initializing predict_model()
2024-09-12 09:20:51,062:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094DC490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:51,067:INFO:Checking exceptions
2024-09-12 09:20:51,068:INFO:Preloading libraries
2024-09-12 09:20:51,070:INFO:Set up data.
2024-09-12 09:20:51,097:INFO:Set up index.
2024-09-12 09:20:51,238:INFO:Initializing predict_model()
2024-09-12 09:20:51,238:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254066196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:51,239:INFO:Checking exceptions
2024-09-12 09:20:51,245:INFO:Preloading libraries
2024-09-12 09:20:51,250:INFO:Set up data.
2024-09-12 09:20:51,278:INFO:Set up index.
2024-09-12 09:20:51,454:INFO:Initializing predict_model()
2024-09-12 09:20:51,457:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A269F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:51,457:INFO:Checking exceptions
2024-09-12 09:20:51,566:INFO:Preloading libraries
2024-09-12 09:20:51,568:INFO:Set up data.
2024-09-12 09:20:51,592:INFO:Set up index.
2024-09-12 09:20:51,724:INFO:Initializing predict_model()
2024-09-12 09:20:51,726:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:51,727:INFO:Checking exceptions
2024-09-12 09:20:51,728:INFO:Preloading libraries
2024-09-12 09:20:51,729:INFO:Set up data.
2024-09-12 09:20:51,752:INFO:Set up index.
2024-09-12 09:20:51,882:INFO:Initializing predict_model()
2024-09-12 09:20:51,882:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093E5210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:51,883:INFO:Checking exceptions
2024-09-12 09:20:51,883:INFO:Preloading libraries
2024-09-12 09:20:51,884:INFO:Set up data.
2024-09-12 09:20:51,907:INFO:Set up index.
2024-09-12 09:20:52,578:INFO:Initializing load_model()
2024-09-12 09:20:52,579:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,581:INFO:Initializing load_model()
2024-09-12 09:20:52,581:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,586:INFO:Initializing load_model()
2024-09-12 09:20:52,586:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,635:INFO:Initializing load_model()
2024-09-12 09:20:52,635:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,651:INFO:Initializing load_model()
2024-09-12 09:20:52,652:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,670:INFO:Initializing load_model()
2024-09-12 09:20:52,670:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,691:INFO:Initializing load_model()
2024-09-12 09:20:52,691:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,698:INFO:Initializing load_model()
2024-09-12 09:20:52,698:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,704:INFO:Initializing load_model()
2024-09-12 09:20:52,704:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,711:INFO:Initializing load_model()
2024-09-12 09:20:52,711:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:52,716:INFO:Initializing load_model()
2024-09-12 09:20:52,716:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,052:INFO:Initializing load_model()
2024-09-12 09:20:53,053:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,055:INFO:Initializing load_model()
2024-09-12 09:20:53,055:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,057:INFO:Initializing load_model()
2024-09-12 09:20:53,057:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,095:INFO:Initializing load_model()
2024-09-12 09:20:53,095:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,102:INFO:Initializing load_model()
2024-09-12 09:20:53,103:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,108:INFO:Initializing load_model()
2024-09-12 09:20:53,108:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,113:INFO:Initializing load_model()
2024-09-12 09:20:53,114:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,117:INFO:Initializing load_model()
2024-09-12 09:20:53,117:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,123:INFO:Initializing load_model()
2024-09-12 09:20:53,123:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,129:INFO:Initializing load_model()
2024-09-12 09:20:53,129:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,133:INFO:Initializing load_model()
2024-09-12 09:20:53,134:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:20:53,209:INFO:Initializing predict_model()
2024-09-12 09:20:53,209:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095B8D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A091A80>)
2024-09-12 09:20:53,209:INFO:Checking exceptions
2024-09-12 09:20:53,209:INFO:Preloading libraries
2024-09-12 09:20:53,210:INFO:Set up data.
2024-09-12 09:20:53,227:INFO:Set up index.
2024-09-12 09:20:53,348:INFO:Initializing predict_model()
2024-09-12 09:20:53,349:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540947D990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:53,349:INFO:Checking exceptions
2024-09-12 09:20:53,350:INFO:Preloading libraries
2024-09-12 09:20:53,350:INFO:Set up data.
2024-09-12 09:20:53,367:INFO:Set up index.
2024-09-12 09:20:53,489:INFO:Initializing predict_model()
2024-09-12 09:20:53,489:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:53,490:INFO:Checking exceptions
2024-09-12 09:20:53,490:INFO:Preloading libraries
2024-09-12 09:20:53,491:INFO:Set up data.
2024-09-12 09:20:53,506:INFO:Set up index.
2024-09-12 09:20:53,659:INFO:Initializing predict_model()
2024-09-12 09:20:53,660:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540983B0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:53,660:INFO:Checking exceptions
2024-09-12 09:20:53,660:INFO:Preloading libraries
2024-09-12 09:20:53,661:INFO:Set up data.
2024-09-12 09:20:53,676:INFO:Set up index.
2024-09-12 09:20:53,878:INFO:Initializing predict_model()
2024-09-12 09:20:53,878:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:53,879:INFO:Checking exceptions
2024-09-12 09:20:53,879:INFO:Preloading libraries
2024-09-12 09:20:53,880:INFO:Set up data.
2024-09-12 09:20:53,899:INFO:Set up index.
2024-09-12 09:20:54,042:INFO:Initializing predict_model()
2024-09-12 09:20:54,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025403F04B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,043:INFO:Checking exceptions
2024-09-12 09:20:54,043:INFO:Preloading libraries
2024-09-12 09:20:54,044:INFO:Set up data.
2024-09-12 09:20:54,060:INFO:Set up index.
2024-09-12 09:20:54,210:INFO:Initializing predict_model()
2024-09-12 09:20:54,210:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254065E1A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,210:INFO:Checking exceptions
2024-09-12 09:20:54,210:INFO:Preloading libraries
2024-09-12 09:20:54,211:INFO:Set up data.
2024-09-12 09:20:54,234:INFO:Set up index.
2024-09-12 09:20:54,380:INFO:Initializing predict_model()
2024-09-12 09:20:54,381:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,381:INFO:Checking exceptions
2024-09-12 09:20:54,382:INFO:Preloading libraries
2024-09-12 09:20:54,382:INFO:Set up data.
2024-09-12 09:20:54,399:INFO:Set up index.
2024-09-12 09:20:54,510:INFO:Initializing predict_model()
2024-09-12 09:20:54,510:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093F8F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,511:INFO:Checking exceptions
2024-09-12 09:20:54,511:INFO:Preloading libraries
2024-09-12 09:20:54,511:INFO:Set up data.
2024-09-12 09:20:54,530:INFO:Set up index.
2024-09-12 09:20:54,654:INFO:Initializing predict_model()
2024-09-12 09:20:54,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,654:INFO:Checking exceptions
2024-09-12 09:20:54,654:INFO:Preloading libraries
2024-09-12 09:20:54,655:INFO:Set up data.
2024-09-12 09:20:54,671:INFO:Set up index.
2024-09-12 09:20:54,792:INFO:Initializing predict_model()
2024-09-12 09:20:54,792:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F194E0>)
2024-09-12 09:20:54,793:INFO:Checking exceptions
2024-09-12 09:20:54,793:INFO:Preloading libraries
2024-09-12 09:20:54,794:INFO:Set up data.
2024-09-12 09:20:54,810:INFO:Set up index.
2024-09-12 09:20:55,022:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,023:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,036:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,037:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,053:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,053:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,063:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,063:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,071:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,072:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,082:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,083:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,091:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,092:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,106:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,106:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,120:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,121:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,135:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,136:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:20:55,146:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  for model_name in models.keys():

2024-09-12 09:20:55,147:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  if model_name in model_checkboxes:

2024-09-12 09:32:47,173:INFO:Initializing load_model()
2024-09-12 09:32:47,175:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,186:INFO:Initializing load_model()
2024-09-12 09:32:47,186:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,196:INFO:Initializing load_model()
2024-09-12 09:32:47,196:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,239:INFO:Initializing load_model()
2024-09-12 09:32:47,239:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,254:INFO:Initializing load_model()
2024-09-12 09:32:47,254:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,274:INFO:Initializing load_model()
2024-09-12 09:32:47,274:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,292:INFO:Initializing load_model()
2024-09-12 09:32:47,292:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,310:INFO:Initializing load_model()
2024-09-12 09:32:47,311:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,327:INFO:Initializing load_model()
2024-09-12 09:32:47,328:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,345:INFO:Initializing load_model()
2024-09-12 09:32:47,345:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,358:INFO:Initializing load_model()
2024-09-12 09:32:47,358:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:32:47,404:INFO:Initializing predict_model()
2024-09-12 09:32:47,404:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0C0C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BE5C0>)
2024-09-12 09:32:47,404:INFO:Checking exceptions
2024-09-12 09:32:47,405:INFO:Preloading libraries
2024-09-12 09:32:47,406:INFO:Set up data.
2024-09-12 09:32:47,430:INFO:Set up index.
2024-09-12 09:32:47,560:INFO:Initializing predict_model()
2024-09-12 09:32:47,560:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1DD150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:47,560:INFO:Checking exceptions
2024-09-12 09:32:47,560:INFO:Preloading libraries
2024-09-12 09:32:47,561:INFO:Set up data.
2024-09-12 09:32:47,583:INFO:Set up index.
2024-09-12 09:32:47,715:INFO:Initializing predict_model()
2024-09-12 09:32:47,715:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4BEF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:47,715:INFO:Checking exceptions
2024-09-12 09:32:47,716:INFO:Preloading libraries
2024-09-12 09:32:47,716:INFO:Set up data.
2024-09-12 09:32:47,733:INFO:Set up index.
2024-09-12 09:32:47,898:INFO:Initializing predict_model()
2024-09-12 09:32:47,898:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B345C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:47,899:INFO:Checking exceptions
2024-09-12 09:32:47,899:INFO:Preloading libraries
2024-09-12 09:32:47,899:INFO:Set up data.
2024-09-12 09:32:47,916:INFO:Set up index.
2024-09-12 09:32:48,092:INFO:Initializing predict_model()
2024-09-12 09:32:48,092:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF6D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,094:INFO:Checking exceptions
2024-09-12 09:32:48,094:INFO:Preloading libraries
2024-09-12 09:32:48,094:INFO:Set up data.
2024-09-12 09:32:48,111:INFO:Set up index.
2024-09-12 09:32:48,260:INFO:Initializing predict_model()
2024-09-12 09:32:48,260:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0B4FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,260:INFO:Checking exceptions
2024-09-12 09:32:48,260:INFO:Preloading libraries
2024-09-12 09:32:48,261:INFO:Set up data.
2024-09-12 09:32:48,280:INFO:Set up index.
2024-09-12 09:32:48,425:INFO:Initializing predict_model()
2024-09-12 09:32:48,425:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095B89D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,425:INFO:Checking exceptions
2024-09-12 09:32:48,426:INFO:Preloading libraries
2024-09-12 09:32:48,426:INFO:Set up data.
2024-09-12 09:32:48,441:INFO:Set up index.
2024-09-12 09:32:48,551:INFO:Initializing predict_model()
2024-09-12 09:32:48,551:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B345C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,551:INFO:Checking exceptions
2024-09-12 09:32:48,552:INFO:Preloading libraries
2024-09-12 09:32:48,552:INFO:Set up data.
2024-09-12 09:32:48,567:INFO:Set up index.
2024-09-12 09:32:48,687:INFO:Initializing predict_model()
2024-09-12 09:32:48,688:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B345C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,688:INFO:Checking exceptions
2024-09-12 09:32:48,688:INFO:Preloading libraries
2024-09-12 09:32:48,688:INFO:Set up data.
2024-09-12 09:32:48,704:INFO:Set up index.
2024-09-12 09:32:48,825:INFO:Initializing predict_model()
2024-09-12 09:32:48,825:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF6D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,826:INFO:Checking exceptions
2024-09-12 09:32:48,826:INFO:Preloading libraries
2024-09-12 09:32:48,826:INFO:Set up data.
2024-09-12 09:32:48,843:INFO:Set up index.
2024-09-12 09:32:48,967:INFO:Initializing predict_model()
2024-09-12 09:32:48,968:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254066196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:32:48,968:INFO:Checking exceptions
2024-09-12 09:32:48,968:INFO:Preloading libraries
2024-09-12 09:32:48,969:INFO:Set up data.
2024-09-12 09:32:48,986:INFO:Set up index.
2024-09-12 09:32:49,179:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:32:49,180:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:36:49,215:INFO:Initializing load_model()
2024-09-12 09:36:49,217:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,225:INFO:Initializing load_model()
2024-09-12 09:36:49,225:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,232:INFO:Initializing load_model()
2024-09-12 09:36:49,232:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,276:INFO:Initializing load_model()
2024-09-12 09:36:49,277:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,296:INFO:Initializing load_model()
2024-09-12 09:36:49,297:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,316:INFO:Initializing load_model()
2024-09-12 09:36:49,316:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,335:INFO:Initializing load_model()
2024-09-12 09:36:49,336:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,343:INFO:Initializing load_model()
2024-09-12 09:36:49,344:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,364:INFO:Initializing load_model()
2024-09-12 09:36:49,365:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,371:INFO:Initializing load_model()
2024-09-12 09:36:49,372:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,380:INFO:Initializing load_model()
2024-09-12 09:36:49,381:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:49,440:INFO:Initializing predict_model()
2024-09-12 09:36:49,440:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A174650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945F560>)
2024-09-12 09:36:49,441:INFO:Checking exceptions
2024-09-12 09:36:49,441:INFO:Preloading libraries
2024-09-12 09:36:49,442:INFO:Set up data.
2024-09-12 09:36:49,472:INFO:Set up index.
2024-09-12 09:36:49,616:INFO:Initializing predict_model()
2024-09-12 09:36:49,617:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409594B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:49,617:INFO:Checking exceptions
2024-09-12 09:36:49,617:INFO:Preloading libraries
2024-09-12 09:36:49,618:INFO:Set up data.
2024-09-12 09:36:49,635:INFO:Set up index.
2024-09-12 09:36:49,768:INFO:Initializing predict_model()
2024-09-12 09:36:49,768:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:49,769:INFO:Checking exceptions
2024-09-12 09:36:49,769:INFO:Preloading libraries
2024-09-12 09:36:49,769:INFO:Set up data.
2024-09-12 09:36:49,784:INFO:Set up index.
2024-09-12 09:36:49,950:INFO:Initializing predict_model()
2024-09-12 09:36:49,951:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF8B0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:49,951:INFO:Checking exceptions
2024-09-12 09:36:49,951:INFO:Preloading libraries
2024-09-12 09:36:49,952:INFO:Set up data.
2024-09-12 09:36:49,967:INFO:Set up index.
2024-09-12 09:36:50,148:INFO:Initializing predict_model()
2024-09-12 09:36:50,149:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,149:INFO:Checking exceptions
2024-09-12 09:36:50,149:INFO:Preloading libraries
2024-09-12 09:36:50,150:INFO:Set up data.
2024-09-12 09:36:50,166:INFO:Set up index.
2024-09-12 09:36:50,339:INFO:Initializing predict_model()
2024-09-12 09:36:50,341:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,341:INFO:Checking exceptions
2024-09-12 09:36:50,342:INFO:Preloading libraries
2024-09-12 09:36:50,342:INFO:Set up data.
2024-09-12 09:36:50,358:INFO:Set up index.
2024-09-12 09:36:50,508:INFO:Initializing predict_model()
2024-09-12 09:36:50,508:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A29FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,508:INFO:Checking exceptions
2024-09-12 09:36:50,509:INFO:Preloading libraries
2024-09-12 09:36:50,509:INFO:Set up data.
2024-09-12 09:36:50,529:INFO:Set up index.
2024-09-12 09:36:50,641:INFO:Initializing predict_model()
2024-09-12 09:36:50,642:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B346310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,642:INFO:Checking exceptions
2024-09-12 09:36:50,642:INFO:Preloading libraries
2024-09-12 09:36:50,643:INFO:Set up data.
2024-09-12 09:36:50,659:INFO:Set up index.
2024-09-12 09:36:50,775:INFO:Initializing predict_model()
2024-09-12 09:36:50,775:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,776:INFO:Checking exceptions
2024-09-12 09:36:50,776:INFO:Preloading libraries
2024-09-12 09:36:50,776:INFO:Set up data.
2024-09-12 09:36:50,791:INFO:Set up index.
2024-09-12 09:36:50,904:INFO:Initializing predict_model()
2024-09-12 09:36:50,905:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF59D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:50,905:INFO:Checking exceptions
2024-09-12 09:36:50,905:INFO:Preloading libraries
2024-09-12 09:36:50,906:INFO:Set up data.
2024-09-12 09:36:50,921:INFO:Set up index.
2024-09-12 09:36:51,028:INFO:Initializing predict_model()
2024-09-12 09:36:51,029:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B500110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:36:51,029:INFO:Checking exceptions
2024-09-12 09:36:51,029:INFO:Preloading libraries
2024-09-12 09:36:51,030:INFO:Set up data.
2024-09-12 09:36:51,045:INFO:Set up index.
2024-09-12 09:36:56,206:INFO:Initializing load_model()
2024-09-12 09:36:56,206:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,210:INFO:Initializing load_model()
2024-09-12 09:36:56,210:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,215:INFO:Initializing load_model()
2024-09-12 09:36:56,215:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,273:INFO:Initializing load_model()
2024-09-12 09:36:56,273:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,288:INFO:Initializing load_model()
2024-09-12 09:36:56,288:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,305:INFO:Initializing load_model()
2024-09-12 09:36:56,305:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,321:INFO:Initializing load_model()
2024-09-12 09:36:56,321:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,326:INFO:Initializing load_model()
2024-09-12 09:36:56,327:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,333:INFO:Initializing load_model()
2024-09-12 09:36:56,333:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,340:INFO:Initializing load_model()
2024-09-12 09:36:56,340:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,347:INFO:Initializing load_model()
2024-09-12 09:36:56,347:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:56,410:INFO:Initializing predict_model()
2024-09-12 09:36:56,411:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A214690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A0625C0>)
2024-09-12 09:36:56,411:INFO:Checking exceptions
2024-09-12 09:36:56,411:INFO:Preloading libraries
2024-09-12 09:36:56,411:INFO:Set up data.
2024-09-12 09:36:56,429:INFO:Set up index.
2024-09-12 09:36:56,552:INFO:Initializing predict_model()
2024-09-12 09:36:56,552:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:56,552:INFO:Checking exceptions
2024-09-12 09:36:56,552:INFO:Preloading libraries
2024-09-12 09:36:56,554:INFO:Set up data.
2024-09-12 09:36:56,567:INFO:Set up index.
2024-09-12 09:36:56,711:INFO:Initializing predict_model()
2024-09-12 09:36:56,711:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409486790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:56,711:INFO:Checking exceptions
2024-09-12 09:36:56,711:INFO:Preloading libraries
2024-09-12 09:36:56,712:INFO:Set up data.
2024-09-12 09:36:56,735:INFO:Set up index.
2024-09-12 09:36:56,929:INFO:Initializing predict_model()
2024-09-12 09:36:56,929:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:56,930:INFO:Checking exceptions
2024-09-12 09:36:56,930:INFO:Preloading libraries
2024-09-12 09:36:56,930:INFO:Set up data.
2024-09-12 09:36:56,948:INFO:Set up index.
2024-09-12 09:36:57,127:INFO:Initializing predict_model()
2024-09-12 09:36:57,127:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,127:INFO:Checking exceptions
2024-09-12 09:36:57,127:INFO:Preloading libraries
2024-09-12 09:36:57,128:INFO:Set up data.
2024-09-12 09:36:57,144:INFO:Set up index.
2024-09-12 09:36:57,316:INFO:Initializing predict_model()
2024-09-12 09:36:57,316:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,317:INFO:Checking exceptions
2024-09-12 09:36:57,317:INFO:Preloading libraries
2024-09-12 09:36:57,318:INFO:Set up data.
2024-09-12 09:36:57,352:INFO:Set up index.
2024-09-12 09:36:57,510:INFO:Initializing predict_model()
2024-09-12 09:36:57,511:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFF9F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,511:INFO:Checking exceptions
2024-09-12 09:36:57,511:INFO:Preloading libraries
2024-09-12 09:36:57,512:INFO:Set up data.
2024-09-12 09:36:57,531:INFO:Set up index.
2024-09-12 09:36:57,669:INFO:Initializing predict_model()
2024-09-12 09:36:57,669:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094B69D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,669:INFO:Checking exceptions
2024-09-12 09:36:57,669:INFO:Preloading libraries
2024-09-12 09:36:57,669:INFO:Set up data.
2024-09-12 09:36:57,687:INFO:Set up index.
2024-09-12 09:36:57,821:INFO:Initializing predict_model()
2024-09-12 09:36:57,821:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B342150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,821:INFO:Checking exceptions
2024-09-12 09:36:57,821:INFO:Preloading libraries
2024-09-12 09:36:57,822:INFO:Set up data.
2024-09-12 09:36:57,840:INFO:Set up index.
2024-09-12 09:36:57,949:INFO:Initializing predict_model()
2024-09-12 09:36:57,950:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:57,950:INFO:Checking exceptions
2024-09-12 09:36:57,950:INFO:Preloading libraries
2024-09-12 09:36:57,951:INFO:Set up data.
2024-09-12 09:36:57,966:INFO:Set up index.
2024-09-12 09:36:58,081:INFO:Initializing predict_model()
2024-09-12 09:36:58,081:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409489C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 09:36:58,081:INFO:Checking exceptions
2024-09-12 09:36:58,082:INFO:Preloading libraries
2024-09-12 09:36:58,082:INFO:Set up data.
2024-09-12 09:36:58,098:INFO:Set up index.
2024-09-12 09:36:58,305:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:36:58,306:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:36:58,828:INFO:Initializing load_model()
2024-09-12 09:36:58,828:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,832:INFO:Initializing load_model()
2024-09-12 09:36:58,832:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,834:INFO:Initializing load_model()
2024-09-12 09:36:58,835:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,875:INFO:Initializing load_model()
2024-09-12 09:36:58,875:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,882:INFO:Initializing load_model()
2024-09-12 09:36:58,883:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,888:INFO:Initializing load_model()
2024-09-12 09:36:58,888:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,892:INFO:Initializing load_model()
2024-09-12 09:36:58,893:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,897:INFO:Initializing load_model()
2024-09-12 09:36:58,897:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,902:INFO:Initializing load_model()
2024-09-12 09:36:58,903:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,907:INFO:Initializing load_model()
2024-09-12 09:36:58,907:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,910:INFO:Initializing load_model()
2024-09-12 09:36:58,911:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:36:58,994:INFO:Initializing predict_model()
2024-09-12 09:36:58,995:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A42D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945FBA0>)
2024-09-12 09:36:58,995:INFO:Checking exceptions
2024-09-12 09:36:58,996:INFO:Preloading libraries
2024-09-12 09:36:58,996:INFO:Set up data.
2024-09-12 09:36:59,018:INFO:Set up index.
2024-09-12 09:36:59,157:INFO:Initializing predict_model()
2024-09-12 09:36:59,157:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:36:59,158:INFO:Checking exceptions
2024-09-12 09:36:59,158:INFO:Preloading libraries
2024-09-12 09:36:59,159:INFO:Set up data.
2024-09-12 09:36:59,174:INFO:Set up index.
2024-09-12 09:36:59,292:INFO:Initializing predict_model()
2024-09-12 09:36:59,293:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409405DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:36:59,293:INFO:Checking exceptions
2024-09-12 09:36:59,294:INFO:Preloading libraries
2024-09-12 09:36:59,294:INFO:Set up data.
2024-09-12 09:36:59,310:INFO:Set up index.
2024-09-12 09:36:59,492:INFO:Initializing predict_model()
2024-09-12 09:36:59,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409665090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:36:59,493:INFO:Checking exceptions
2024-09-12 09:36:59,493:INFO:Preloading libraries
2024-09-12 09:36:59,494:INFO:Set up data.
2024-09-12 09:36:59,510:INFO:Set up index.
2024-09-12 09:36:59,695:INFO:Initializing predict_model()
2024-09-12 09:36:59,696:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:36:59,696:INFO:Checking exceptions
2024-09-12 09:36:59,696:INFO:Preloading libraries
2024-09-12 09:36:59,697:INFO:Set up data.
2024-09-12 09:36:59,711:INFO:Set up index.
2024-09-12 09:36:59,871:INFO:Initializing predict_model()
2024-09-12 09:36:59,872:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:36:59,872:INFO:Checking exceptions
2024-09-12 09:36:59,872:INFO:Preloading libraries
2024-09-12 09:36:59,873:INFO:Set up data.
2024-09-12 09:36:59,901:INFO:Set up index.
2024-09-12 09:37:00,168:INFO:Initializing predict_model()
2024-09-12 09:37:00,170:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254080CEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:00,172:INFO:Checking exceptions
2024-09-12 09:37:00,172:INFO:Preloading libraries
2024-09-12 09:37:00,178:INFO:Set up data.
2024-09-12 09:37:00,204:INFO:Set up index.
2024-09-12 09:37:00,352:INFO:Initializing predict_model()
2024-09-12 09:37:00,353:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:00,355:INFO:Checking exceptions
2024-09-12 09:37:00,356:INFO:Preloading libraries
2024-09-12 09:37:00,367:INFO:Set up data.
2024-09-12 09:37:00,396:INFO:Set up index.
2024-09-12 09:37:00,558:INFO:Initializing predict_model()
2024-09-12 09:37:00,558:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:00,559:INFO:Checking exceptions
2024-09-12 09:37:00,560:INFO:Preloading libraries
2024-09-12 09:37:00,561:INFO:Set up data.
2024-09-12 09:37:00,631:INFO:Set up index.
2024-09-12 09:37:00,818:INFO:Initializing predict_model()
2024-09-12 09:37:00,820:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:00,821:INFO:Checking exceptions
2024-09-12 09:37:00,822:INFO:Preloading libraries
2024-09-12 09:37:00,823:INFO:Set up data.
2024-09-12 09:37:00,844:INFO:Set up index.
2024-09-12 09:37:00,990:INFO:Initializing predict_model()
2024-09-12 09:37:00,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B55B590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:00,992:INFO:Checking exceptions
2024-09-12 09:37:00,992:INFO:Preloading libraries
2024-09-12 09:37:00,993:INFO:Set up data.
2024-09-12 09:37:01,019:INFO:Set up index.
2024-09-12 09:37:01,039:INFO:Initializing load_model()
2024-09-12 09:37:01,039:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,042:INFO:Initializing load_model()
2024-09-12 09:37:01,043:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,047:INFO:Initializing load_model()
2024-09-12 09:37:01,047:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,106:INFO:Initializing load_model()
2024-09-12 09:37:01,108:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,115:INFO:Initializing load_model()
2024-09-12 09:37:01,115:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,121:INFO:Initializing load_model()
2024-09-12 09:37:01,122:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,134:INFO:Initializing load_model()
2024-09-12 09:37:01,135:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,146:INFO:Initializing load_model()
2024-09-12 09:37:01,146:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,155:INFO:Initializing load_model()
2024-09-12 09:37:01,156:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,165:INFO:Initializing load_model()
2024-09-12 09:37:01,167:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,171:INFO:Initializing load_model()
2024-09-12 09:37:01,172:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:01,477:INFO:Initializing predict_model()
2024-09-12 09:37:01,477:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A211650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:01,478:INFO:Checking exceptions
2024-09-12 09:37:01,478:INFO:Preloading libraries
2024-09-12 09:37:01,478:INFO:Set up data.
2024-09-12 09:37:01,504:INFO:Set up index.
2024-09-12 09:37:01,628:INFO:Initializing predict_model()
2024-09-12 09:37:01,628:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:01,628:INFO:Checking exceptions
2024-09-12 09:37:01,628:INFO:Preloading libraries
2024-09-12 09:37:01,629:INFO:Set up data.
2024-09-12 09:37:01,645:INFO:Set up index.
2024-09-12 09:37:01,759:INFO:Initializing predict_model()
2024-09-12 09:37:01,759:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:01,759:INFO:Checking exceptions
2024-09-12 09:37:01,760:INFO:Preloading libraries
2024-09-12 09:37:01,760:INFO:Set up data.
2024-09-12 09:37:01,776:INFO:Set up index.
2024-09-12 09:37:01,944:INFO:Initializing predict_model()
2024-09-12 09:37:01,944:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F15890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:01,944:INFO:Checking exceptions
2024-09-12 09:37:01,945:INFO:Preloading libraries
2024-09-12 09:37:01,945:INFO:Set up data.
2024-09-12 09:37:01,964:INFO:Set up index.
2024-09-12 09:37:02,177:INFO:Initializing predict_model()
2024-09-12 09:37:02,177:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFF9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,177:INFO:Checking exceptions
2024-09-12 09:37:02,177:INFO:Preloading libraries
2024-09-12 09:37:02,178:INFO:Set up data.
2024-09-12 09:37:02,194:INFO:Set up index.
2024-09-12 09:37:02,355:INFO:Initializing predict_model()
2024-09-12 09:37:02,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540957A7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,356:INFO:Checking exceptions
2024-09-12 09:37:02,356:INFO:Preloading libraries
2024-09-12 09:37:02,357:INFO:Set up data.
2024-09-12 09:37:02,378:INFO:Set up index.
2024-09-12 09:37:02,551:INFO:Initializing predict_model()
2024-09-12 09:37:02,552:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,552:INFO:Checking exceptions
2024-09-12 09:37:02,552:INFO:Preloading libraries
2024-09-12 09:37:02,553:INFO:Set up data.
2024-09-12 09:37:02,571:INFO:Set up index.
2024-09-12 09:37:02,700:INFO:Initializing predict_model()
2024-09-12 09:37:02,700:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540658C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,700:INFO:Checking exceptions
2024-09-12 09:37:02,700:INFO:Preloading libraries
2024-09-12 09:37:02,701:INFO:Set up data.
2024-09-12 09:37:02,724:INFO:Set up index.
2024-09-12 09:37:02,853:INFO:Initializing predict_model()
2024-09-12 09:37:02,853:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,854:INFO:Checking exceptions
2024-09-12 09:37:02,854:INFO:Preloading libraries
2024-09-12 09:37:02,855:INFO:Set up data.
2024-09-12 09:37:02,870:INFO:Set up index.
2024-09-12 09:37:02,980:INFO:Initializing predict_model()
2024-09-12 09:37:02,980:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFF9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:02,981:INFO:Checking exceptions
2024-09-12 09:37:02,981:INFO:Preloading libraries
2024-09-12 09:37:02,981:INFO:Set up data.
2024-09-12 09:37:02,997:INFO:Set up index.
2024-09-12 09:37:03,112:INFO:Initializing predict_model()
2024-09-12 09:37:03,112:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A271350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1C60>)
2024-09-12 09:37:03,112:INFO:Checking exceptions
2024-09-12 09:37:03,112:INFO:Preloading libraries
2024-09-12 09:37:03,113:INFO:Set up data.
2024-09-12 09:37:03,128:INFO:Set up index.
2024-09-12 09:37:03,311:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:37:03,312:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:37:03,321:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:37:03,321:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:37:03,333:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:37:03,333:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:37:06,180:INFO:Initializing load_model()
2024-09-12 09:37:06,180:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,185:INFO:Initializing load_model()
2024-09-12 09:37:06,185:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,190:INFO:Initializing load_model()
2024-09-12 09:37:06,190:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,256:INFO:Initializing load_model()
2024-09-12 09:37:06,256:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,274:INFO:Initializing load_model()
2024-09-12 09:37:06,274:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,293:INFO:Initializing load_model()
2024-09-12 09:37:06,293:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,311:INFO:Initializing load_model()
2024-09-12 09:37:06,311:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,317:INFO:Initializing load_model()
2024-09-12 09:37:06,317:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,325:INFO:Initializing load_model()
2024-09-12 09:37:06,326:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,332:INFO:Initializing load_model()
2024-09-12 09:37:06,332:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,338:INFO:Initializing load_model()
2024-09-12 09:37:06,338:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:37:06,407:INFO:Initializing predict_model()
2024-09-12 09:37:06,408:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B5472D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BF420>)
2024-09-12 09:37:06,408:INFO:Checking exceptions
2024-09-12 09:37:06,408:INFO:Preloading libraries
2024-09-12 09:37:06,408:INFO:Set up data.
2024-09-12 09:37:06,430:INFO:Set up index.
2024-09-12 09:37:06,559:INFO:Initializing predict_model()
2024-09-12 09:37:06,559:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:06,559:INFO:Checking exceptions
2024-09-12 09:37:06,559:INFO:Preloading libraries
2024-09-12 09:37:06,559:INFO:Set up data.
2024-09-12 09:37:06,575:INFO:Set up index.
2024-09-12 09:37:06,707:INFO:Initializing predict_model()
2024-09-12 09:37:06,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD60B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:06,708:INFO:Checking exceptions
2024-09-12 09:37:06,708:INFO:Preloading libraries
2024-09-12 09:37:06,709:INFO:Set up data.
2024-09-12 09:37:06,725:INFO:Set up index.
2024-09-12 09:37:06,906:INFO:Initializing predict_model()
2024-09-12 09:37:06,907:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254098233D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:06,907:INFO:Checking exceptions
2024-09-12 09:37:06,907:INFO:Preloading libraries
2024-09-12 09:37:06,908:INFO:Set up data.
2024-09-12 09:37:06,930:INFO:Set up index.
2024-09-12 09:37:07,115:INFO:Initializing predict_model()
2024-09-12 09:37:07,115:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093D9D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,115:INFO:Checking exceptions
2024-09-12 09:37:07,115:INFO:Preloading libraries
2024-09-12 09:37:07,116:INFO:Set up data.
2024-09-12 09:37:07,134:INFO:Set up index.
2024-09-12 09:37:07,348:INFO:Initializing predict_model()
2024-09-12 09:37:07,348:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,349:INFO:Checking exceptions
2024-09-12 09:37:07,349:INFO:Preloading libraries
2024-09-12 09:37:07,349:INFO:Set up data.
2024-09-12 09:37:07,368:INFO:Set up index.
2024-09-12 09:37:07,523:INFO:Initializing predict_model()
2024-09-12 09:37:07,523:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBF850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,524:INFO:Checking exceptions
2024-09-12 09:37:07,525:INFO:Preloading libraries
2024-09-12 09:37:07,525:INFO:Set up data.
2024-09-12 09:37:07,542:INFO:Set up index.
2024-09-12 09:37:07,682:INFO:Initializing predict_model()
2024-09-12 09:37:07,682:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254098233D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,682:INFO:Checking exceptions
2024-09-12 09:37:07,683:INFO:Preloading libraries
2024-09-12 09:37:07,683:INFO:Set up data.
2024-09-12 09:37:07,704:INFO:Set up index.
2024-09-12 09:37:07,847:INFO:Initializing predict_model()
2024-09-12 09:37:07,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD49BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,848:INFO:Checking exceptions
2024-09-12 09:37:07,848:INFO:Preloading libraries
2024-09-12 09:37:07,849:INFO:Set up data.
2024-09-12 09:37:07,864:INFO:Set up index.
2024-09-12 09:37:07,980:INFO:Initializing predict_model()
2024-09-12 09:37:07,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B343550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:07,981:INFO:Checking exceptions
2024-09-12 09:37:07,982:INFO:Preloading libraries
2024-09-12 09:37:07,982:INFO:Set up data.
2024-09-12 09:37:07,998:INFO:Set up index.
2024-09-12 09:37:08,111:INFO:Initializing predict_model()
2024-09-12 09:37:08,111:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 09:37:08,111:INFO:Checking exceptions
2024-09-12 09:37:08,111:INFO:Preloading libraries
2024-09-12 09:37:08,112:INFO:Set up data.
2024-09-12 09:37:08,127:INFO:Set up index.
2024-09-12 09:37:08,307:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:37:08,308:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:37:08,319:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:37:08,320:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:48:14,204:INFO:Initializing load_model()
2024-09-12 09:48:14,206:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,224:INFO:Initializing load_model()
2024-09-12 09:48:14,224:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,230:INFO:Initializing load_model()
2024-09-12 09:48:14,230:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,324:INFO:Initializing load_model()
2024-09-12 09:48:14,324:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,339:INFO:Initializing load_model()
2024-09-12 09:48:14,340:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,356:INFO:Initializing load_model()
2024-09-12 09:48:14,356:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,373:INFO:Initializing load_model()
2024-09-12 09:48:14,373:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,380:INFO:Initializing load_model()
2024-09-12 09:48:14,380:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,398:INFO:Initializing load_model()
2024-09-12 09:48:14,398:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,403:INFO:Initializing load_model()
2024-09-12 09:48:14,404:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:14,411:INFO:Initializing load_model()
2024-09-12 09:48:14,411:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,353:INFO:Initializing load_model()
2024-09-12 09:48:16,354:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,357:INFO:Initializing load_model()
2024-09-12 09:48:16,358:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,363:INFO:Initializing load_model()
2024-09-12 09:48:16,364:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,417:INFO:Initializing load_model()
2024-09-12 09:48:16,417:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,424:INFO:Initializing load_model()
2024-09-12 09:48:16,424:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,430:INFO:Initializing load_model()
2024-09-12 09:48:16,431:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,436:INFO:Initializing load_model()
2024-09-12 09:48:16,436:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,440:INFO:Initializing load_model()
2024-09-12 09:48:16,440:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,444:INFO:Initializing load_model()
2024-09-12 09:48:16,445:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,448:INFO:Initializing load_model()
2024-09-12 09:48:16,449:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:16,452:INFO:Initializing load_model()
2024-09-12 09:48:16,452:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,404:INFO:Initializing load_model()
2024-09-12 09:48:17,404:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,407:INFO:Initializing load_model()
2024-09-12 09:48:17,408:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,413:INFO:Initializing load_model()
2024-09-12 09:48:17,413:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,470:INFO:Initializing load_model()
2024-09-12 09:48:17,470:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,481:INFO:Initializing load_model()
2024-09-12 09:48:17,481:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,486:INFO:Initializing load_model()
2024-09-12 09:48:17,486:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,492:INFO:Initializing load_model()
2024-09-12 09:48:17,492:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,497:INFO:Initializing load_model()
2024-09-12 09:48:17,497:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,502:INFO:Initializing load_model()
2024-09-12 09:48:17,502:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,507:INFO:Initializing load_model()
2024-09-12 09:48:17,507:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:17,512:INFO:Initializing load_model()
2024-09-12 09:48:17,512:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,371:INFO:Initializing load_model()
2024-09-12 09:48:21,371:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,382:INFO:Initializing load_model()
2024-09-12 09:48:21,383:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,393:INFO:Initializing load_model()
2024-09-12 09:48:21,393:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,470:INFO:Initializing load_model()
2024-09-12 09:48:21,470:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,499:INFO:Initializing load_model()
2024-09-12 09:48:21,499:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,523:INFO:Initializing load_model()
2024-09-12 09:48:21,524:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,545:INFO:Initializing load_model()
2024-09-12 09:48:21,545:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,567:INFO:Initializing load_model()
2024-09-12 09:48:21,567:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,587:INFO:Initializing load_model()
2024-09-12 09:48:21,590:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,602:INFO:Initializing load_model()
2024-09-12 09:48:21,602:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,616:INFO:Initializing load_model()
2024-09-12 09:48:21,617:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:21,708:INFO:Initializing predict_model()
2024-09-12 09:48:21,709:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B5D25D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936E700>)
2024-09-12 09:48:21,709:INFO:Checking exceptions
2024-09-12 09:48:21,709:INFO:Preloading libraries
2024-09-12 09:48:21,710:INFO:Set up data.
2024-09-12 09:48:21,748:INFO:Set up index.
2024-09-12 09:48:21,945:INFO:Initializing predict_model()
2024-09-12 09:48:21,945:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4BCB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:21,946:INFO:Checking exceptions
2024-09-12 09:48:21,946:INFO:Preloading libraries
2024-09-12 09:48:21,946:INFO:Set up data.
2024-09-12 09:48:21,966:INFO:Set up index.
2024-09-12 09:48:22,087:INFO:Initializing predict_model()
2024-09-12 09:48:22,088:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05C4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D6C00>)
2024-09-12 09:48:22,088:INFO:Checking exceptions
2024-09-12 09:48:22,089:INFO:Preloading libraries
2024-09-12 09:48:22,090:INFO:Set up data.
2024-09-12 09:48:22,111:INFO:Set up index.
2024-09-12 09:48:22,300:INFO:Initializing predict_model()
2024-09-12 09:48:22,300:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4BC310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:22,301:INFO:Checking exceptions
2024-09-12 09:48:22,301:INFO:Preloading libraries
2024-09-12 09:48:22,302:INFO:Set up data.
2024-09-12 09:48:22,319:INFO:Set up index.
2024-09-12 09:48:22,496:INFO:Initializing predict_model()
2024-09-12 09:48:22,497:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:22,497:INFO:Checking exceptions
2024-09-12 09:48:22,497:INFO:Preloading libraries
2024-09-12 09:48:22,498:INFO:Set up data.
2024-09-12 09:48:22,515:INFO:Set up index.
2024-09-12 09:48:22,668:INFO:Initializing predict_model()
2024-09-12 09:48:22,669:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBE3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:22,669:INFO:Checking exceptions
2024-09-12 09:48:22,669:INFO:Preloading libraries
2024-09-12 09:48:22,669:INFO:Set up data.
2024-09-12 09:48:22,686:INFO:Set up index.
2024-09-12 09:48:22,849:INFO:Initializing predict_model()
2024-09-12 09:48:22,850:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:22,850:INFO:Checking exceptions
2024-09-12 09:48:22,850:INFO:Preloading libraries
2024-09-12 09:48:22,851:INFO:Set up data.
2024-09-12 09:48:22,874:INFO:Set up index.
2024-09-12 09:48:22,999:INFO:Initializing predict_model()
2024-09-12 09:48:22,999:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF76A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:22,999:INFO:Checking exceptions
2024-09-12 09:48:22,999:INFO:Preloading libraries
2024-09-12 09:48:23,000:INFO:Set up data.
2024-09-12 09:48:23,017:INFO:Set up index.
2024-09-12 09:48:23,132:INFO:Initializing predict_model()
2024-09-12 09:48:23,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:23,133:INFO:Checking exceptions
2024-09-12 09:48:23,133:INFO:Preloading libraries
2024-09-12 09:48:23,133:INFO:Set up data.
2024-09-12 09:48:23,148:INFO:Set up index.
2024-09-12 09:48:23,261:INFO:Initializing predict_model()
2024-09-12 09:48:23,261:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:23,262:INFO:Checking exceptions
2024-09-12 09:48:23,262:INFO:Preloading libraries
2024-09-12 09:48:23,263:INFO:Set up data.
2024-09-12 09:48:23,279:INFO:Set up index.
2024-09-12 09:48:23,388:INFO:Initializing predict_model()
2024-09-12 09:48:23,389:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF74C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0680>)
2024-09-12 09:48:23,389:INFO:Checking exceptions
2024-09-12 09:48:23,389:INFO:Preloading libraries
2024-09-12 09:48:23,390:INFO:Set up data.
2024-09-12 09:48:23,406:INFO:Set up index.
2024-09-12 09:48:33,222:INFO:Initializing load_model()
2024-09-12 09:48:33,222:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,226:INFO:Initializing load_model()
2024-09-12 09:48:33,226:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,236:INFO:Initializing load_model()
2024-09-12 09:48:33,237:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,290:INFO:Initializing load_model()
2024-09-12 09:48:33,291:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,305:INFO:Initializing load_model()
2024-09-12 09:48:33,305:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,324:INFO:Initializing load_model()
2024-09-12 09:48:33,324:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,340:INFO:Initializing load_model()
2024-09-12 09:48:33,340:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,346:INFO:Initializing load_model()
2024-09-12 09:48:33,346:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,352:INFO:Initializing load_model()
2024-09-12 09:48:33,352:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,359:INFO:Initializing load_model()
2024-09-12 09:48:33,359:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,365:INFO:Initializing load_model()
2024-09-12 09:48:33,366:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:33,434:INFO:Initializing predict_model()
2024-09-12 09:48:33,434:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409474650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942E8E0>)
2024-09-12 09:48:33,435:INFO:Checking exceptions
2024-09-12 09:48:33,435:INFO:Preloading libraries
2024-09-12 09:48:33,436:INFO:Set up data.
2024-09-12 09:48:33,456:INFO:Set up index.
2024-09-12 09:48:33,601:INFO:Initializing predict_model()
2024-09-12 09:48:33,601:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409475ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:33,602:INFO:Checking exceptions
2024-09-12 09:48:33,602:INFO:Preloading libraries
2024-09-12 09:48:33,603:INFO:Set up data.
2024-09-12 09:48:33,625:INFO:Set up index.
2024-09-12 09:48:33,776:INFO:Initializing predict_model()
2024-09-12 09:48:33,776:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:33,777:INFO:Checking exceptions
2024-09-12 09:48:33,777:INFO:Preloading libraries
2024-09-12 09:48:33,777:INFO:Set up data.
2024-09-12 09:48:33,797:INFO:Set up index.
2024-09-12 09:48:34,003:INFO:Initializing predict_model()
2024-09-12 09:48:34,004:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,005:INFO:Checking exceptions
2024-09-12 09:48:34,006:INFO:Preloading libraries
2024-09-12 09:48:34,006:INFO:Set up data.
2024-09-12 09:48:34,025:INFO:Set up index.
2024-09-12 09:48:34,203:INFO:Initializing predict_model()
2024-09-12 09:48:34,203:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,204:INFO:Checking exceptions
2024-09-12 09:48:34,205:INFO:Preloading libraries
2024-09-12 09:48:34,205:INFO:Set up data.
2024-09-12 09:48:34,224:INFO:Set up index.
2024-09-12 09:48:34,396:INFO:Initializing predict_model()
2024-09-12 09:48:34,396:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FE0950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,397:INFO:Checking exceptions
2024-09-12 09:48:34,397:INFO:Preloading libraries
2024-09-12 09:48:34,398:INFO:Set up data.
2024-09-12 09:48:34,413:INFO:Set up index.
2024-09-12 09:48:34,564:INFO:Initializing predict_model()
2024-09-12 09:48:34,564:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,564:INFO:Checking exceptions
2024-09-12 09:48:34,565:INFO:Preloading libraries
2024-09-12 09:48:34,565:INFO:Set up data.
2024-09-12 09:48:34,584:INFO:Set up index.
2024-09-12 09:48:34,705:INFO:Initializing predict_model()
2024-09-12 09:48:34,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF5A610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,706:INFO:Checking exceptions
2024-09-12 09:48:34,706:INFO:Preloading libraries
2024-09-12 09:48:34,707:INFO:Set up data.
2024-09-12 09:48:34,724:INFO:Set up index.
2024-09-12 09:48:34,847:INFO:Initializing predict_model()
2024-09-12 09:48:34,847:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,848:INFO:Checking exceptions
2024-09-12 09:48:34,848:INFO:Preloading libraries
2024-09-12 09:48:34,849:INFO:Set up data.
2024-09-12 09:48:34,863:INFO:Set up index.
2024-09-12 09:48:34,977:INFO:Initializing predict_model()
2024-09-12 09:48:34,977:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C2B9350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:34,977:INFO:Checking exceptions
2024-09-12 09:48:34,978:INFO:Preloading libraries
2024-09-12 09:48:34,978:INFO:Set up data.
2024-09-12 09:48:34,993:INFO:Set up index.
2024-09-12 09:48:35,107:INFO:Initializing predict_model()
2024-09-12 09:48:35,107:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBF750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 09:48:35,108:INFO:Checking exceptions
2024-09-12 09:48:35,108:INFO:Preloading libraries
2024-09-12 09:48:35,108:INFO:Set up data.
2024-09-12 09:48:35,126:INFO:Set up index.
2024-09-12 09:48:35,314:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:48:35,315:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:48:54,929:INFO:Initializing load_model()
2024-09-12 09:48:54,929:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:54,935:INFO:Initializing load_model()
2024-09-12 09:48:54,935:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:54,941:INFO:Initializing load_model()
2024-09-12 09:48:54,941:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:54,984:INFO:Initializing load_model()
2024-09-12 09:48:54,984:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:54,998:INFO:Initializing load_model()
2024-09-12 09:48:54,998:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,017:INFO:Initializing load_model()
2024-09-12 09:48:55,017:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,032:INFO:Initializing load_model()
2024-09-12 09:48:55,033:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,038:INFO:Initializing load_model()
2024-09-12 09:48:55,039:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,046:INFO:Initializing load_model()
2024-09-12 09:48:55,047:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,052:INFO:Initializing load_model()
2024-09-12 09:48:55,052:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,059:INFO:Initializing load_model()
2024-09-12 09:48:55,059:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:48:55,152:INFO:Initializing predict_model()
2024-09-12 09:48:55,152:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B587F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A0900E0>)
2024-09-12 09:48:55,152:INFO:Checking exceptions
2024-09-12 09:48:55,153:INFO:Preloading libraries
2024-09-12 09:48:55,153:INFO:Set up data.
2024-09-12 09:48:55,172:INFO:Set up index.
2024-09-12 09:48:55,309:INFO:Initializing predict_model()
2024-09-12 09:48:55,309:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025403F04B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:55,309:INFO:Checking exceptions
2024-09-12 09:48:55,310:INFO:Preloading libraries
2024-09-12 09:48:55,310:INFO:Set up data.
2024-09-12 09:48:55,331:INFO:Set up index.
2024-09-12 09:48:55,492:INFO:Initializing predict_model()
2024-09-12 09:48:55,492:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540998B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:55,494:INFO:Checking exceptions
2024-09-12 09:48:55,494:INFO:Preloading libraries
2024-09-12 09:48:55,495:INFO:Set up data.
2024-09-12 09:48:55,514:INFO:Set up index.
2024-09-12 09:48:55,716:INFO:Initializing predict_model()
2024-09-12 09:48:55,716:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540998B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:55,716:INFO:Checking exceptions
2024-09-12 09:48:55,717:INFO:Preloading libraries
2024-09-12 09:48:55,717:INFO:Set up data.
2024-09-12 09:48:55,732:INFO:Set up index.
2024-09-12 09:48:55,912:INFO:Initializing predict_model()
2024-09-12 09:48:55,913:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:55,913:INFO:Checking exceptions
2024-09-12 09:48:55,913:INFO:Preloading libraries
2024-09-12 09:48:55,914:INFO:Set up data.
2024-09-12 09:48:55,935:INFO:Set up index.
2024-09-12 09:48:56,125:INFO:Initializing predict_model()
2024-09-12 09:48:56,126:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,126:INFO:Checking exceptions
2024-09-12 09:48:56,126:INFO:Preloading libraries
2024-09-12 09:48:56,126:INFO:Set up data.
2024-09-12 09:48:56,144:INFO:Set up index.
2024-09-12 09:48:56,294:INFO:Initializing predict_model()
2024-09-12 09:48:56,294:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,295:INFO:Checking exceptions
2024-09-12 09:48:56,295:INFO:Preloading libraries
2024-09-12 09:48:56,296:INFO:Set up data.
2024-09-12 09:48:56,311:INFO:Set up index.
2024-09-12 09:48:56,423:INFO:Initializing predict_model()
2024-09-12 09:48:56,423:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,423:INFO:Checking exceptions
2024-09-12 09:48:56,423:INFO:Preloading libraries
2024-09-12 09:48:56,424:INFO:Set up data.
2024-09-12 09:48:56,438:INFO:Set up index.
2024-09-12 09:48:56,550:INFO:Initializing predict_model()
2024-09-12 09:48:56,550:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,550:INFO:Checking exceptions
2024-09-12 09:48:56,550:INFO:Preloading libraries
2024-09-12 09:48:56,551:INFO:Set up data.
2024-09-12 09:48:56,569:INFO:Set up index.
2024-09-12 09:48:56,677:INFO:Initializing predict_model()
2024-09-12 09:48:56,677:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,677:INFO:Checking exceptions
2024-09-12 09:48:56,677:INFO:Preloading libraries
2024-09-12 09:48:56,678:INFO:Set up data.
2024-09-12 09:48:56,694:INFO:Set up index.
2024-09-12 09:48:56,802:INFO:Initializing predict_model()
2024-09-12 09:48:56,802:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD613D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 09:48:56,803:INFO:Checking exceptions
2024-09-12 09:48:56,803:INFO:Preloading libraries
2024-09-12 09:48:56,804:INFO:Set up data.
2024-09-12 09:48:56,818:INFO:Set up index.
2024-09-12 09:48:56,998:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:48:56,999:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:49:03,610:INFO:Initializing load_model()
2024-09-12 09:49:03,610:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,616:INFO:Initializing load_model()
2024-09-12 09:49:03,617:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,622:INFO:Initializing load_model()
2024-09-12 09:49:03,622:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,682:INFO:Initializing load_model()
2024-09-12 09:49:03,682:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,698:INFO:Initializing load_model()
2024-09-12 09:49:03,698:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,715:INFO:Initializing load_model()
2024-09-12 09:49:03,715:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,735:INFO:Initializing load_model()
2024-09-12 09:49:03,735:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,746:INFO:Initializing load_model()
2024-09-12 09:49:03,746:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,758:INFO:Initializing load_model()
2024-09-12 09:49:03,758:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,764:INFO:Initializing load_model()
2024-09-12 09:49:03,765:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,771:INFO:Initializing load_model()
2024-09-12 09:49:03,771:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:03,826:INFO:Initializing predict_model()
2024-09-12 09:49:03,826:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2884D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063C40>)
2024-09-12 09:49:03,827:INFO:Checking exceptions
2024-09-12 09:49:03,827:INFO:Preloading libraries
2024-09-12 09:49:03,828:INFO:Set up data.
2024-09-12 09:49:03,848:INFO:Set up index.
2024-09-12 09:49:03,980:INFO:Initializing predict_model()
2024-09-12 09:49:03,980:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF3AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:03,981:INFO:Checking exceptions
2024-09-12 09:49:03,981:INFO:Preloading libraries
2024-09-12 09:49:03,981:INFO:Set up data.
2024-09-12 09:49:03,998:INFO:Set up index.
2024-09-12 09:49:04,124:INFO:Initializing predict_model()
2024-09-12 09:49:04,124:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:04,125:INFO:Checking exceptions
2024-09-12 09:49:04,125:INFO:Preloading libraries
2024-09-12 09:49:04,126:INFO:Set up data.
2024-09-12 09:49:04,146:INFO:Set up index.
2024-09-12 09:49:04,326:INFO:Initializing predict_model()
2024-09-12 09:49:04,327:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:04,327:INFO:Checking exceptions
2024-09-12 09:49:04,328:INFO:Preloading libraries
2024-09-12 09:49:04,329:INFO:Set up data.
2024-09-12 09:49:04,347:INFO:Set up index.
2024-09-12 09:49:04,535:INFO:Initializing predict_model()
2024-09-12 09:49:04,535:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:04,535:INFO:Checking exceptions
2024-09-12 09:49:04,535:INFO:Preloading libraries
2024-09-12 09:49:04,536:INFO:Set up data.
2024-09-12 09:49:04,556:INFO:Set up index.
2024-09-12 09:49:04,735:INFO:Initializing predict_model()
2024-09-12 09:49:04,735:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A26F9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:04,735:INFO:Checking exceptions
2024-09-12 09:49:04,735:INFO:Preloading libraries
2024-09-12 09:49:04,736:INFO:Set up data.
2024-09-12 09:49:04,758:INFO:Set up index.
2024-09-12 09:49:04,908:INFO:Initializing predict_model()
2024-09-12 09:49:04,908:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:04,908:INFO:Checking exceptions
2024-09-12 09:49:04,908:INFO:Preloading libraries
2024-09-12 09:49:04,909:INFO:Set up data.
2024-09-12 09:49:04,927:INFO:Set up index.
2024-09-12 09:49:05,052:INFO:Initializing predict_model()
2024-09-12 09:49:05,052:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938A210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:05,052:INFO:Checking exceptions
2024-09-12 09:49:05,053:INFO:Preloading libraries
2024-09-12 09:49:05,053:INFO:Set up data.
2024-09-12 09:49:05,072:INFO:Set up index.
2024-09-12 09:49:05,192:INFO:Initializing predict_model()
2024-09-12 09:49:05,192:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025403F04B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:05,193:INFO:Checking exceptions
2024-09-12 09:49:05,193:INFO:Preloading libraries
2024-09-12 09:49:05,194:INFO:Set up data.
2024-09-12 09:49:05,212:INFO:Set up index.
2024-09-12 09:49:05,323:INFO:Initializing predict_model()
2024-09-12 09:49:05,324:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:05,324:INFO:Checking exceptions
2024-09-12 09:49:05,325:INFO:Preloading libraries
2024-09-12 09:49:05,325:INFO:Set up data.
2024-09-12 09:49:05,340:INFO:Set up index.
2024-09-12 09:49:05,456:INFO:Initializing predict_model()
2024-09-12 09:49:05,456:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 09:49:05,456:INFO:Checking exceptions
2024-09-12 09:49:05,456:INFO:Preloading libraries
2024-09-12 09:49:05,458:INFO:Set up data.
2024-09-12 09:49:05,472:INFO:Set up index.
2024-09-12 09:49:05,651:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:49:05,652:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:49:17,615:INFO:Initializing load_model()
2024-09-12 09:49:17,617:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,621:INFO:Initializing load_model()
2024-09-12 09:49:17,621:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,625:INFO:Initializing load_model()
2024-09-12 09:49:17,625:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,688:INFO:Initializing load_model()
2024-09-12 09:49:17,689:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,704:INFO:Initializing load_model()
2024-09-12 09:49:17,704:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,720:INFO:Initializing load_model()
2024-09-12 09:49:17,721:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,738:INFO:Initializing load_model()
2024-09-12 09:49:17,738:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,744:INFO:Initializing load_model()
2024-09-12 09:49:17,745:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,751:INFO:Initializing load_model()
2024-09-12 09:49:17,751:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,756:INFO:Initializing load_model()
2024-09-12 09:49:17,756:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,762:INFO:Initializing load_model()
2024-09-12 09:49:17,762:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 09:49:17,852:INFO:Initializing predict_model()
2024-09-12 09:49:17,852:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A18EC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B37EA20>)
2024-09-12 09:49:17,852:INFO:Checking exceptions
2024-09-12 09:49:17,852:INFO:Preloading libraries
2024-09-12 09:49:17,853:INFO:Set up data.
2024-09-12 09:49:17,874:INFO:Set up index.
2024-09-12 09:49:18,020:INFO:Initializing predict_model()
2024-09-12 09:49:18,020:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407D76F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:18,020:INFO:Checking exceptions
2024-09-12 09:49:18,021:INFO:Preloading libraries
2024-09-12 09:49:18,021:INFO:Set up data.
2024-09-12 09:49:18,041:INFO:Set up index.
2024-09-12 09:49:18,205:INFO:Initializing predict_model()
2024-09-12 09:49:18,205:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:18,205:INFO:Checking exceptions
2024-09-12 09:49:18,205:INFO:Preloading libraries
2024-09-12 09:49:18,206:INFO:Set up data.
2024-09-12 09:49:18,233:INFO:Set up index.
2024-09-12 09:49:18,430:INFO:Initializing predict_model()
2024-09-12 09:49:18,431:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407D76F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:18,431:INFO:Checking exceptions
2024-09-12 09:49:18,432:INFO:Preloading libraries
2024-09-12 09:49:18,432:INFO:Set up data.
2024-09-12 09:49:18,452:INFO:Set up index.
2024-09-12 09:49:18,638:INFO:Initializing predict_model()
2024-09-12 09:49:18,639:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407D76F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:18,639:INFO:Checking exceptions
2024-09-12 09:49:18,639:INFO:Preloading libraries
2024-09-12 09:49:18,640:INFO:Set up data.
2024-09-12 09:49:18,659:INFO:Set up index.
2024-09-12 09:49:18,868:INFO:Initializing predict_model()
2024-09-12 09:49:18,868:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:18,868:INFO:Checking exceptions
2024-09-12 09:49:18,868:INFO:Preloading libraries
2024-09-12 09:49:18,869:INFO:Set up data.
2024-09-12 09:49:18,888:INFO:Set up index.
2024-09-12 09:49:19,068:INFO:Initializing predict_model()
2024-09-12 09:49:19,068:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:19,068:INFO:Checking exceptions
2024-09-12 09:49:19,069:INFO:Preloading libraries
2024-09-12 09:49:19,069:INFO:Set up data.
2024-09-12 09:49:19,094:INFO:Set up index.
2024-09-12 09:49:19,269:INFO:Initializing predict_model()
2024-09-12 09:49:19,269:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:19,271:INFO:Checking exceptions
2024-09-12 09:49:19,271:INFO:Preloading libraries
2024-09-12 09:49:19,272:INFO:Set up data.
2024-09-12 09:49:19,293:INFO:Set up index.
2024-09-12 09:49:19,421:INFO:Initializing predict_model()
2024-09-12 09:49:19,422:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:19,423:INFO:Checking exceptions
2024-09-12 09:49:19,423:INFO:Preloading libraries
2024-09-12 09:49:19,424:INFO:Set up data.
2024-09-12 09:49:19,447:INFO:Set up index.
2024-09-12 09:49:19,599:INFO:Initializing predict_model()
2024-09-12 09:49:19,600:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409665090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:19,600:INFO:Checking exceptions
2024-09-12 09:49:19,601:INFO:Preloading libraries
2024-09-12 09:49:19,601:INFO:Set up data.
2024-09-12 09:49:19,619:INFO:Set up index.
2024-09-12 09:49:19,772:INFO:Initializing predict_model()
2024-09-12 09:49:19,774:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B4AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254091CE700>)
2024-09-12 09:49:19,774:INFO:Checking exceptions
2024-09-12 09:49:19,774:INFO:Preloading libraries
2024-09-12 09:49:19,775:INFO:Set up data.
2024-09-12 09:49:19,799:INFO:Set up index.
2024-09-12 09:49:19,994:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:49:19,995:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 09:49:20,007:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 09:49:20,008:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:01:09,258:INFO:Initializing load_model()
2024-09-12 10:01:09,260:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,263:INFO:Initializing load_model()
2024-09-12 10:01:09,264:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,268:INFO:Initializing load_model()
2024-09-12 10:01:09,268:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,315:INFO:Initializing load_model()
2024-09-12 10:01:09,317:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,332:INFO:Initializing load_model()
2024-09-12 10:01:09,332:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,348:INFO:Initializing load_model()
2024-09-12 10:01:09,348:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,366:INFO:Initializing load_model()
2024-09-12 10:01:09,367:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,375:INFO:Initializing load_model()
2024-09-12 10:01:09,375:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,382:INFO:Initializing load_model()
2024-09-12 10:01:09,382:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,388:INFO:Initializing load_model()
2024-09-12 10:01:09,389:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,395:INFO:Initializing load_model()
2024-09-12 10:01:09,395:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:09,463:INFO:Initializing predict_model()
2024-09-12 10:01:09,463:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A210410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A2BE7A0>)
2024-09-12 10:01:09,463:INFO:Checking exceptions
2024-09-12 10:01:09,464:INFO:Preloading libraries
2024-09-12 10:01:09,464:INFO:Set up data.
2024-09-12 10:01:09,484:INFO:Set up index.
2024-09-12 10:01:09,623:INFO:Initializing predict_model()
2024-09-12 10:01:09,623:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540920A0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:09,624:INFO:Checking exceptions
2024-09-12 10:01:09,624:INFO:Preloading libraries
2024-09-12 10:01:09,624:INFO:Set up data.
2024-09-12 10:01:09,643:INFO:Set up index.
2024-09-12 10:01:09,782:INFO:Initializing predict_model()
2024-09-12 10:01:09,782:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF94A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:09,782:INFO:Checking exceptions
2024-09-12 10:01:09,783:INFO:Preloading libraries
2024-09-12 10:01:09,783:INFO:Set up data.
2024-09-12 10:01:09,801:INFO:Set up index.
2024-09-12 10:01:09,969:INFO:Initializing predict_model()
2024-09-12 10:01:09,970:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:09,970:INFO:Checking exceptions
2024-09-12 10:01:09,970:INFO:Preloading libraries
2024-09-12 10:01:09,971:INFO:Set up data.
2024-09-12 10:01:09,986:INFO:Set up index.
2024-09-12 10:01:10,167:INFO:Initializing predict_model()
2024-09-12 10:01:10,168:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,168:INFO:Checking exceptions
2024-09-12 10:01:10,168:INFO:Preloading libraries
2024-09-12 10:01:10,169:INFO:Set up data.
2024-09-12 10:01:10,186:INFO:Set up index.
2024-09-12 10:01:10,352:INFO:Initializing predict_model()
2024-09-12 10:01:10,352:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,353:INFO:Checking exceptions
2024-09-12 10:01:10,353:INFO:Preloading libraries
2024-09-12 10:01:10,353:INFO:Set up data.
2024-09-12 10:01:10,376:INFO:Set up index.
2024-09-12 10:01:10,527:INFO:Initializing predict_model()
2024-09-12 10:01:10,528:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6D4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,528:INFO:Checking exceptions
2024-09-12 10:01:10,528:INFO:Preloading libraries
2024-09-12 10:01:10,529:INFO:Set up data.
2024-09-12 10:01:10,546:INFO:Set up index.
2024-09-12 10:01:10,667:INFO:Initializing predict_model()
2024-09-12 10:01:10,667:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409671910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,667:INFO:Checking exceptions
2024-09-12 10:01:10,667:INFO:Preloading libraries
2024-09-12 10:01:10,668:INFO:Set up data.
2024-09-12 10:01:10,686:INFO:Set up index.
2024-09-12 10:01:10,810:INFO:Initializing predict_model()
2024-09-12 10:01:10,811:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095A0290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,811:INFO:Checking exceptions
2024-09-12 10:01:10,811:INFO:Preloading libraries
2024-09-12 10:01:10,812:INFO:Set up data.
2024-09-12 10:01:10,833:INFO:Set up index.
2024-09-12 10:01:10,970:INFO:Initializing predict_model()
2024-09-12 10:01:10,970:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFAB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:10,972:INFO:Checking exceptions
2024-09-12 10:01:10,972:INFO:Preloading libraries
2024-09-12 10:01:10,972:INFO:Set up data.
2024-09-12 10:01:10,988:INFO:Set up index.
2024-09-12 10:01:11,103:INFO:Initializing predict_model()
2024-09-12 10:01:11,104:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFAB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065BF380>)
2024-09-12 10:01:11,104:INFO:Checking exceptions
2024-09-12 10:01:11,104:INFO:Preloading libraries
2024-09-12 10:01:11,105:INFO:Set up data.
2024-09-12 10:01:11,124:INFO:Set up index.
2024-09-12 10:01:11,409:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:01:11,410:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:01:11,423:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:01:11,424:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:01:13,535:INFO:Initializing load_model()
2024-09-12 10:01:13,535:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,540:INFO:Initializing load_model()
2024-09-12 10:01:13,541:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,547:INFO:Initializing load_model()
2024-09-12 10:01:13,547:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,611:INFO:Initializing load_model()
2024-09-12 10:01:13,612:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,626:INFO:Initializing load_model()
2024-09-12 10:01:13,626:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,645:INFO:Initializing load_model()
2024-09-12 10:01:13,645:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,663:INFO:Initializing load_model()
2024-09-12 10:01:13,663:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,669:INFO:Initializing load_model()
2024-09-12 10:01:13,669:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,676:INFO:Initializing load_model()
2024-09-12 10:01:13,676:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,682:INFO:Initializing load_model()
2024-09-12 10:01:13,682:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,689:INFO:Initializing load_model()
2024-09-12 10:01:13,689:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:13,758:INFO:Initializing predict_model()
2024-09-12 10:01:13,758:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094B4690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A2BC680>)
2024-09-12 10:01:13,759:INFO:Checking exceptions
2024-09-12 10:01:13,759:INFO:Preloading libraries
2024-09-12 10:01:13,760:INFO:Set up data.
2024-09-12 10:01:13,779:INFO:Set up index.
2024-09-12 10:01:13,911:INFO:Initializing predict_model()
2024-09-12 10:01:13,911:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:13,911:INFO:Checking exceptions
2024-09-12 10:01:13,911:INFO:Preloading libraries
2024-09-12 10:01:13,912:INFO:Set up data.
2024-09-12 10:01:13,930:INFO:Set up index.
2024-09-12 10:01:14,059:INFO:Initializing predict_model()
2024-09-12 10:01:14,059:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:14,059:INFO:Checking exceptions
2024-09-12 10:01:14,060:INFO:Preloading libraries
2024-09-12 10:01:14,060:INFO:Set up data.
2024-09-12 10:01:14,077:INFO:Set up index.
2024-09-12 10:01:14,260:INFO:Initializing predict_model()
2024-09-12 10:01:14,260:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F09350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:14,260:INFO:Checking exceptions
2024-09-12 10:01:14,260:INFO:Preloading libraries
2024-09-12 10:01:14,261:INFO:Set up data.
2024-09-12 10:01:14,278:INFO:Set up index.
2024-09-12 10:01:14,470:INFO:Initializing predict_model()
2024-09-12 10:01:14,470:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408046E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:14,470:INFO:Checking exceptions
2024-09-12 10:01:14,470:INFO:Preloading libraries
2024-09-12 10:01:14,471:INFO:Set up data.
2024-09-12 10:01:14,487:INFO:Set up index.
2024-09-12 10:01:14,663:INFO:Initializing predict_model()
2024-09-12 10:01:14,663:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:14,663:INFO:Checking exceptions
2024-09-12 10:01:14,664:INFO:Preloading libraries
2024-09-12 10:01:14,664:INFO:Set up data.
2024-09-12 10:01:14,697:INFO:Set up index.
2024-09-12 10:01:14,880:INFO:Initializing predict_model()
2024-09-12 10:01:14,880:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C2B9350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:14,880:INFO:Checking exceptions
2024-09-12 10:01:14,881:INFO:Preloading libraries
2024-09-12 10:01:14,881:INFO:Set up data.
2024-09-12 10:01:14,899:INFO:Set up index.
2024-09-12 10:01:15,025:INFO:Initializing predict_model()
2024-09-12 10:01:15,025:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B55B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:15,027:INFO:Checking exceptions
2024-09-12 10:01:15,027:INFO:Preloading libraries
2024-09-12 10:01:15,028:INFO:Set up data.
2024-09-12 10:01:15,048:INFO:Set up index.
2024-09-12 10:01:15,172:INFO:Initializing predict_model()
2024-09-12 10:01:15,172:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540938A510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:15,173:INFO:Checking exceptions
2024-09-12 10:01:15,173:INFO:Preloading libraries
2024-09-12 10:01:15,174:INFO:Set up data.
2024-09-12 10:01:15,191:INFO:Set up index.
2024-09-12 10:01:15,307:INFO:Initializing predict_model()
2024-09-12 10:01:15,307:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:15,308:INFO:Checking exceptions
2024-09-12 10:01:15,308:INFO:Preloading libraries
2024-09-12 10:01:15,308:INFO:Set up data.
2024-09-12 10:01:15,325:INFO:Set up index.
2024-09-12 10:01:15,437:INFO:Initializing predict_model()
2024-09-12 10:01:15,438:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC7F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:15,438:INFO:Checking exceptions
2024-09-12 10:01:15,438:INFO:Preloading libraries
2024-09-12 10:01:15,439:INFO:Set up data.
2024-09-12 10:01:15,455:INFO:Set up index.
2024-09-12 10:01:15,638:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:01:15,639:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:01:15,650:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:01:15,651:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:01:54,844:INFO:Initializing load_model()
2024-09-12 10:01:54,846:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,851:INFO:Initializing load_model()
2024-09-12 10:01:54,851:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,856:INFO:Initializing load_model()
2024-09-12 10:01:54,856:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,908:INFO:Initializing load_model()
2024-09-12 10:01:54,908:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,924:INFO:Initializing load_model()
2024-09-12 10:01:54,925:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,942:INFO:Initializing load_model()
2024-09-12 10:01:54,942:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,962:INFO:Initializing load_model()
2024-09-12 10:01:54,962:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,968:INFO:Initializing load_model()
2024-09-12 10:01:54,969:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,974:INFO:Initializing load_model()
2024-09-12 10:01:54,974:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,980:INFO:Initializing load_model()
2024-09-12 10:01:54,981:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:54,987:INFO:Initializing load_model()
2024-09-12 10:01:54,987:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:55,072:INFO:Initializing predict_model()
2024-09-12 10:01:55,072:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540949A2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F7CE0>)
2024-09-12 10:01:55,072:INFO:Checking exceptions
2024-09-12 10:01:55,073:INFO:Preloading libraries
2024-09-12 10:01:55,073:INFO:Set up data.
2024-09-12 10:01:55,089:INFO:Set up index.
2024-09-12 10:01:55,228:INFO:Initializing predict_model()
2024-09-12 10:01:55,229:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E020150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547DFC0CC0>)
2024-09-12 10:01:55,229:INFO:Checking exceptions
2024-09-12 10:01:55,229:INFO:Preloading libraries
2024-09-12 10:01:55,230:INFO:Set up data.
2024-09-12 10:01:55,250:INFO:Set up index.
2024-09-12 10:01:55,394:INFO:Initializing predict_model()
2024-09-12 10:01:55,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E020150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:55,394:INFO:Checking exceptions
2024-09-12 10:01:55,394:INFO:Preloading libraries
2024-09-12 10:01:55,396:INFO:Set up data.
2024-09-12 10:01:55,412:INFO:Set up index.
2024-09-12 10:01:55,609:INFO:Initializing predict_model()
2024-09-12 10:01:55,609:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:55,609:INFO:Checking exceptions
2024-09-12 10:01:55,610:INFO:Preloading libraries
2024-09-12 10:01:55,610:INFO:Set up data.
2024-09-12 10:01:55,632:INFO:Set up index.
2024-09-12 10:01:55,833:INFO:Initializing predict_model()
2024-09-12 10:01:55,833:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:55,833:INFO:Checking exceptions
2024-09-12 10:01:55,834:INFO:Preloading libraries
2024-09-12 10:01:55,834:INFO:Set up data.
2024-09-12 10:01:55,853:INFO:Set up index.
2024-09-12 10:01:56,022:INFO:Initializing predict_model()
2024-09-12 10:01:56,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0F0450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,022:INFO:Checking exceptions
2024-09-12 10:01:56,022:INFO:Preloading libraries
2024-09-12 10:01:56,023:INFO:Set up data.
2024-09-12 10:01:56,044:INFO:Set up index.
2024-09-12 10:01:56,216:INFO:Initializing predict_model()
2024-09-12 10:01:56,216:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A157510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,216:INFO:Checking exceptions
2024-09-12 10:01:56,217:INFO:Preloading libraries
2024-09-12 10:01:56,217:INFO:Set up data.
2024-09-12 10:01:56,242:INFO:Set up index.
2024-09-12 10:01:56,388:INFO:Initializing predict_model()
2024-09-12 10:01:56,389:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,390:INFO:Checking exceptions
2024-09-12 10:01:56,391:INFO:Preloading libraries
2024-09-12 10:01:56,393:INFO:Set up data.
2024-09-12 10:01:56,418:INFO:Set up index.
2024-09-12 10:01:56,565:INFO:Initializing predict_model()
2024-09-12 10:01:56,565:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401402DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,566:INFO:Checking exceptions
2024-09-12 10:01:56,566:INFO:Preloading libraries
2024-09-12 10:01:56,566:INFO:Set up data.
2024-09-12 10:01:56,590:INFO:Set up index.
2024-09-12 10:01:56,713:INFO:Initializing predict_model()
2024-09-12 10:01:56,713:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,713:INFO:Checking exceptions
2024-09-12 10:01:56,714:INFO:Preloading libraries
2024-09-12 10:01:56,714:INFO:Set up data.
2024-09-12 10:01:56,731:INFO:Set up index.
2024-09-12 10:01:56,903:INFO:Initializing predict_model()
2024-09-12 10:01:56,903:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A278F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:01:56,903:INFO:Checking exceptions
2024-09-12 10:01:56,903:INFO:Preloading libraries
2024-09-12 10:01:56,905:INFO:Set up data.
2024-09-12 10:01:56,930:INFO:Set up index.
2024-09-12 10:01:57,442:INFO:Initializing load_model()
2024-09-12 10:01:57,443:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,445:INFO:Initializing load_model()
2024-09-12 10:01:57,446:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,448:INFO:Initializing load_model()
2024-09-12 10:01:57,448:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,483:INFO:Initializing load_model()
2024-09-12 10:01:57,483:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,491:INFO:Initializing load_model()
2024-09-12 10:01:57,491:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,496:INFO:Initializing load_model()
2024-09-12 10:01:57,496:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,502:INFO:Initializing load_model()
2024-09-12 10:01:57,503:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,506:INFO:Initializing load_model()
2024-09-12 10:01:57,507:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,510:INFO:Initializing load_model()
2024-09-12 10:01:57,511:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,515:INFO:Initializing load_model()
2024-09-12 10:01:57,515:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,520:INFO:Initializing load_model()
2024-09-12 10:01:57,520:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:57,596:INFO:Initializing predict_model()
2024-09-12 10:01:57,596:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A281350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942DD00>)
2024-09-12 10:01:57,596:INFO:Checking exceptions
2024-09-12 10:01:57,596:INFO:Preloading libraries
2024-09-12 10:01:57,597:INFO:Set up data.
2024-09-12 10:01:57,621:INFO:Set up index.
2024-09-12 10:01:57,756:INFO:Initializing predict_model()
2024-09-12 10:01:57,757:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:57,757:INFO:Checking exceptions
2024-09-12 10:01:57,757:INFO:Preloading libraries
2024-09-12 10:01:57,757:INFO:Set up data.
2024-09-12 10:01:57,773:INFO:Set up index.
2024-09-12 10:01:57,885:INFO:Initializing predict_model()
2024-09-12 10:01:57,886:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:57,886:INFO:Checking exceptions
2024-09-12 10:01:57,887:INFO:Preloading libraries
2024-09-12 10:01:57,887:INFO:Set up data.
2024-09-12 10:01:57,900:INFO:Set up index.
2024-09-12 10:01:58,055:INFO:Initializing predict_model()
2024-09-12 10:01:58,056:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E4F04D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:58,056:INFO:Checking exceptions
2024-09-12 10:01:58,056:INFO:Preloading libraries
2024-09-12 10:01:58,057:INFO:Set up data.
2024-09-12 10:01:58,071:INFO:Set up index.
2024-09-12 10:01:58,236:INFO:Initializing predict_model()
2024-09-12 10:01:58,237:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540947E510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:58,238:INFO:Checking exceptions
2024-09-12 10:01:58,238:INFO:Preloading libraries
2024-09-12 10:01:58,242:INFO:Set up data.
2024-09-12 10:01:58,263:INFO:Set up index.
2024-09-12 10:01:58,465:INFO:Initializing predict_model()
2024-09-12 10:01:58,466:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408047850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:58,467:INFO:Checking exceptions
2024-09-12 10:01:58,468:INFO:Preloading libraries
2024-09-12 10:01:58,470:INFO:Set up data.
2024-09-12 10:01:58,497:INFO:Set up index.
2024-09-12 10:01:58,777:INFO:Initializing predict_model()
2024-09-12 10:01:58,781:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093D9110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:58,782:INFO:Checking exceptions
2024-09-12 10:01:58,782:INFO:Preloading libraries
2024-09-12 10:01:58,782:INFO:Initializing load_model()
2024-09-12 10:01:58,782:INFO:Set up data.
2024-09-12 10:01:58,783:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:58,801:INFO:Set up index.
2024-09-12 10:01:58,809:INFO:Initializing load_model()
2024-09-12 10:01:58,810:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:58,815:INFO:Initializing load_model()
2024-09-12 10:01:58,815:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:58,920:INFO:Initializing predict_model()
2024-09-12 10:01:58,925:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A18CD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:58,926:INFO:Checking exceptions
2024-09-12 10:01:58,927:INFO:Preloading libraries
2024-09-12 10:01:58,929:INFO:Set up data.
2024-09-12 10:01:58,952:INFO:Set up index.
2024-09-12 10:01:59,093:INFO:Initializing predict_model()
2024-09-12 10:01:59,097:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6F5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:59,098:INFO:Checking exceptions
2024-09-12 10:01:59,098:INFO:Preloading libraries
2024-09-12 10:01:59,099:INFO:Set up data.
2024-09-12 10:01:59,122:INFO:Set up index.
2024-09-12 10:01:59,127:INFO:Initializing load_model()
2024-09-12 10:01:59,129:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,141:INFO:Initializing load_model()
2024-09-12 10:01:59,142:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,300:INFO:Initializing predict_model()
2024-09-12 10:01:59,301:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409EF6D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:59,305:INFO:Checking exceptions
2024-09-12 10:01:59,305:INFO:Initializing load_model()
2024-09-12 10:01:59,305:INFO:Preloading libraries
2024-09-12 10:01:59,305:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,306:INFO:Set up data.
2024-09-12 10:01:59,310:INFO:Initializing load_model()
2024-09-12 10:01:59,312:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,328:INFO:Set up index.
2024-09-12 10:01:59,331:INFO:Initializing load_model()
2024-09-12 10:01:59,334:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,343:INFO:Initializing load_model()
2024-09-12 10:01:59,343:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,448:INFO:Initializing predict_model()
2024-09-12 10:01:59,448:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540941B090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:01:59,451:INFO:Checking exceptions
2024-09-12 10:01:59,451:INFO:Initializing load_model()
2024-09-12 10:01:59,451:INFO:Preloading libraries
2024-09-12 10:01:59,452:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,452:INFO:Set up data.
2024-09-12 10:01:59,455:INFO:Initializing load_model()
2024-09-12 10:01:59,455:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:01:59,473:INFO:Set up index.
2024-09-12 10:01:59,528:INFO:Initializing predict_model()
2024-09-12 10:01:59,529:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A13A2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942ECA0>)
2024-09-12 10:01:59,529:INFO:Checking exceptions
2024-09-12 10:01:59,529:INFO:Preloading libraries
2024-09-12 10:01:59,531:INFO:Set up data.
2024-09-12 10:01:59,556:INFO:Set up index.
2024-09-12 10:01:59,683:INFO:Initializing predict_model()
2024-09-12 10:01:59,684:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4EB6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B37F420>)
2024-09-12 10:01:59,684:INFO:Checking exceptions
2024-09-12 10:01:59,685:INFO:Preloading libraries
2024-09-12 10:01:59,685:INFO:Set up data.
2024-09-12 10:01:59,702:INFO:Set up index.
2024-09-12 10:01:59,817:INFO:Initializing predict_model()
2024-09-12 10:01:59,818:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6C8DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B37F420>)
2024-09-12 10:01:59,818:INFO:Checking exceptions
2024-09-12 10:01:59,819:INFO:Preloading libraries
2024-09-12 10:01:59,819:INFO:Set up data.
2024-09-12 10:01:59,842:INFO:Set up index.
2024-09-12 10:02:00,240:INFO:Initializing predict_model()
2024-09-12 10:02:00,240:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,241:INFO:Checking exceptions
2024-09-12 10:02:00,241:INFO:Preloading libraries
2024-09-12 10:02:00,242:INFO:Set up data.
2024-09-12 10:02:00,257:INFO:Set up index.
2024-09-12 10:02:00,421:INFO:Initializing predict_model()
2024-09-12 10:02:00,422:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,422:INFO:Checking exceptions
2024-09-12 10:02:00,422:INFO:Preloading libraries
2024-09-12 10:02:00,423:INFO:Set up data.
2024-09-12 10:02:00,436:INFO:Set up index.
2024-09-12 10:02:00,570:INFO:Initializing predict_model()
2024-09-12 10:02:00,570:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A07AA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,570:INFO:Checking exceptions
2024-09-12 10:02:00,571:INFO:Preloading libraries
2024-09-12 10:02:00,571:INFO:Set up data.
2024-09-12 10:02:00,585:INFO:Set up index.
2024-09-12 10:02:00,723:INFO:Initializing predict_model()
2024-09-12 10:02:00,723:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,724:INFO:Checking exceptions
2024-09-12 10:02:00,724:INFO:Preloading libraries
2024-09-12 10:02:00,724:INFO:Set up data.
2024-09-12 10:02:00,739:INFO:Set up index.
2024-09-12 10:02:00,854:INFO:Initializing predict_model()
2024-09-12 10:02:00,854:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,854:INFO:Checking exceptions
2024-09-12 10:02:00,855:INFO:Preloading libraries
2024-09-12 10:02:00,855:INFO:Set up data.
2024-09-12 10:02:00,871:INFO:Set up index.
2024-09-12 10:02:00,984:INFO:Initializing predict_model()
2024-09-12 10:02:00,984:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:00,984:INFO:Checking exceptions
2024-09-12 10:02:00,985:INFO:Preloading libraries
2024-09-12 10:02:00,985:INFO:Set up data.
2024-09-12 10:02:01,002:INFO:Set up index.
2024-09-12 10:02:01,119:INFO:Initializing predict_model()
2024-09-12 10:02:01,119:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409C06CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:01,119:INFO:Checking exceptions
2024-09-12 10:02:01,119:INFO:Preloading libraries
2024-09-12 10:02:01,121:INFO:Set up data.
2024-09-12 10:02:01,135:INFO:Set up index.
2024-09-12 10:02:01,244:INFO:Initializing predict_model()
2024-09-12 10:02:01,244:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547AAD3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:01,245:INFO:Checking exceptions
2024-09-12 10:02:01,245:INFO:Preloading libraries
2024-09-12 10:02:01,245:INFO:Set up data.
2024-09-12 10:02:01,261:INFO:Set up index.
2024-09-12 10:02:01,440:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:01,441:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:01,452:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:01,453:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:03,464:INFO:Initializing load_model()
2024-09-12 10:02:03,464:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,469:INFO:Initializing load_model()
2024-09-12 10:02:03,469:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,473:INFO:Initializing load_model()
2024-09-12 10:02:03,473:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,536:INFO:Initializing load_model()
2024-09-12 10:02:03,536:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,550:INFO:Initializing load_model()
2024-09-12 10:02:03,551:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,566:INFO:Initializing load_model()
2024-09-12 10:02:03,566:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,586:INFO:Initializing load_model()
2024-09-12 10:02:03,586:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,593:INFO:Initializing load_model()
2024-09-12 10:02:03,593:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,599:INFO:Initializing load_model()
2024-09-12 10:02:03,600:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,618:INFO:Initializing load_model()
2024-09-12 10:02:03,618:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,624:INFO:Initializing load_model()
2024-09-12 10:02:03,624:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:03,687:INFO:Initializing predict_model()
2024-09-12 10:02:03,688:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2584D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254093D4AE0>)
2024-09-12 10:02:03,688:INFO:Checking exceptions
2024-09-12 10:02:03,689:INFO:Preloading libraries
2024-09-12 10:02:03,689:INFO:Set up data.
2024-09-12 10:02:03,707:INFO:Set up index.
2024-09-12 10:02:03,835:INFO:Initializing predict_model()
2024-09-12 10:02:03,836:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407B2D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:03,836:INFO:Checking exceptions
2024-09-12 10:02:03,836:INFO:Preloading libraries
2024-09-12 10:02:03,837:INFO:Set up data.
2024-09-12 10:02:03,854:INFO:Set up index.
2024-09-12 10:02:03,976:INFO:Initializing predict_model()
2024-09-12 10:02:03,977:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401485590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:03,977:INFO:Checking exceptions
2024-09-12 10:02:03,977:INFO:Preloading libraries
2024-09-12 10:02:03,978:INFO:Set up data.
2024-09-12 10:02:03,994:INFO:Set up index.
2024-09-12 10:02:04,170:INFO:Initializing predict_model()
2024-09-12 10:02:04,171:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD49BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:04,171:INFO:Checking exceptions
2024-09-12 10:02:04,171:INFO:Preloading libraries
2024-09-12 10:02:04,172:INFO:Set up data.
2024-09-12 10:02:04,188:INFO:Set up index.
2024-09-12 10:02:04,365:INFO:Initializing predict_model()
2024-09-12 10:02:04,365:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:04,366:INFO:Checking exceptions
2024-09-12 10:02:04,367:INFO:Preloading libraries
2024-09-12 10:02:04,368:INFO:Set up data.
2024-09-12 10:02:04,383:INFO:Set up index.
2024-09-12 10:02:04,543:INFO:Initializing predict_model()
2024-09-12 10:02:04,543:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:04,543:INFO:Checking exceptions
2024-09-12 10:02:04,543:INFO:Preloading libraries
2024-09-12 10:02:04,544:INFO:Set up data.
2024-09-12 10:02:04,563:INFO:Set up index.
2024-09-12 10:02:04,724:INFO:Initializing predict_model()
2024-09-12 10:02:04,725:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0ED750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:04,725:INFO:Checking exceptions
2024-09-12 10:02:04,725:INFO:Preloading libraries
2024-09-12 10:02:04,725:INFO:Set up data.
2024-09-12 10:02:04,743:INFO:Set up index.
2024-09-12 10:02:04,876:INFO:Initializing predict_model()
2024-09-12 10:02:04,876:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A035490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:04,877:INFO:Checking exceptions
2024-09-12 10:02:04,877:INFO:Preloading libraries
2024-09-12 10:02:04,877:INFO:Set up data.
2024-09-12 10:02:04,896:INFO:Set up index.
2024-09-12 10:02:05,032:INFO:Initializing predict_model()
2024-09-12 10:02:05,032:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:05,032:INFO:Checking exceptions
2024-09-12 10:02:05,032:INFO:Preloading libraries
2024-09-12 10:02:05,032:INFO:Set up data.
2024-09-12 10:02:05,047:INFO:Set up index.
2024-09-12 10:02:05,164:INFO:Initializing predict_model()
2024-09-12 10:02:05,165:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:05,165:INFO:Checking exceptions
2024-09-12 10:02:05,165:INFO:Preloading libraries
2024-09-12 10:02:05,166:INFO:Set up data.
2024-09-12 10:02:05,183:INFO:Set up index.
2024-09-12 10:02:05,299:INFO:Initializing predict_model()
2024-09-12 10:02:05,299:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409400D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:02:05,300:INFO:Checking exceptions
2024-09-12 10:02:05,300:INFO:Preloading libraries
2024-09-12 10:02:05,301:INFO:Set up data.
2024-09-12 10:02:05,316:INFO:Set up index.
2024-09-12 10:02:05,498:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:05,499:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:05,511:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:05,512:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:08,859:INFO:Initializing load_model()
2024-09-12 10:02:08,859:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,864:INFO:Initializing load_model()
2024-09-12 10:02:08,865:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,870:INFO:Initializing load_model()
2024-09-12 10:02:08,870:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,933:INFO:Initializing load_model()
2024-09-12 10:02:08,934:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,949:INFO:Initializing load_model()
2024-09-12 10:02:08,949:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,967:INFO:Initializing load_model()
2024-09-12 10:02:08,967:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,986:INFO:Initializing load_model()
2024-09-12 10:02:08,986:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:08,992:INFO:Initializing load_model()
2024-09-12 10:02:08,993:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:09,000:INFO:Initializing load_model()
2024-09-12 10:02:09,000:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:09,005:INFO:Initializing load_model()
2024-09-12 10:02:09,006:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:09,012:INFO:Initializing load_model()
2024-09-12 10:02:09,012:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:09,077:INFO:Initializing predict_model()
2024-09-12 10:02:09,077:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4D8AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A090F40>)
2024-09-12 10:02:09,078:INFO:Checking exceptions
2024-09-12 10:02:09,078:INFO:Preloading libraries
2024-09-12 10:02:09,079:INFO:Set up data.
2024-09-12 10:02:09,100:INFO:Set up index.
2024-09-12 10:02:09,245:INFO:Initializing predict_model()
2024-09-12 10:02:09,245:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2AD050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:09,245:INFO:Checking exceptions
2024-09-12 10:02:09,245:INFO:Preloading libraries
2024-09-12 10:02:09,246:INFO:Set up data.
2024-09-12 10:02:09,262:INFO:Set up index.
2024-09-12 10:02:09,384:INFO:Initializing predict_model()
2024-09-12 10:02:09,385:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:09,385:INFO:Checking exceptions
2024-09-12 10:02:09,385:INFO:Preloading libraries
2024-09-12 10:02:09,386:INFO:Set up data.
2024-09-12 10:02:09,402:INFO:Set up index.
2024-09-12 10:02:09,571:INFO:Initializing predict_model()
2024-09-12 10:02:09,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:09,572:INFO:Checking exceptions
2024-09-12 10:02:09,573:INFO:Preloading libraries
2024-09-12 10:02:09,573:INFO:Set up data.
2024-09-12 10:02:09,589:INFO:Set up index.
2024-09-12 10:02:09,770:INFO:Initializing predict_model()
2024-09-12 10:02:09,770:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:09,770:INFO:Checking exceptions
2024-09-12 10:02:09,770:INFO:Preloading libraries
2024-09-12 10:02:09,771:INFO:Set up data.
2024-09-12 10:02:09,786:INFO:Set up index.
2024-09-12 10:02:09,941:INFO:Initializing predict_model()
2024-09-12 10:02:09,942:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFD4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:09,942:INFO:Checking exceptions
2024-09-12 10:02:09,942:INFO:Preloading libraries
2024-09-12 10:02:09,942:INFO:Set up data.
2024-09-12 10:02:09,961:INFO:Set up index.
2024-09-12 10:02:10,118:INFO:Initializing predict_model()
2024-09-12 10:02:10,119:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:10,119:INFO:Checking exceptions
2024-09-12 10:02:10,119:INFO:Preloading libraries
2024-09-12 10:02:10,120:INFO:Set up data.
2024-09-12 10:02:10,137:INFO:Set up index.
2024-09-12 10:02:10,258:INFO:Initializing predict_model()
2024-09-12 10:02:10,259:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A2AEED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:10,259:INFO:Checking exceptions
2024-09-12 10:02:10,260:INFO:Preloading libraries
2024-09-12 10:02:10,260:INFO:Set up data.
2024-09-12 10:02:10,279:INFO:Set up index.
2024-09-12 10:02:10,408:INFO:Initializing predict_model()
2024-09-12 10:02:10,408:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F1E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:10,408:INFO:Checking exceptions
2024-09-12 10:02:10,409:INFO:Preloading libraries
2024-09-12 10:02:10,409:INFO:Set up data.
2024-09-12 10:02:10,425:INFO:Set up index.
2024-09-12 10:02:10,537:INFO:Initializing predict_model()
2024-09-12 10:02:10,537:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:10,538:INFO:Checking exceptions
2024-09-12 10:02:10,538:INFO:Preloading libraries
2024-09-12 10:02:10,539:INFO:Set up data.
2024-09-12 10:02:10,555:INFO:Set up index.
2024-09-12 10:02:10,663:INFO:Initializing predict_model()
2024-09-12 10:02:10,663:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409516A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:02:10,663:INFO:Checking exceptions
2024-09-12 10:02:10,664:INFO:Preloading libraries
2024-09-12 10:02:10,664:INFO:Set up data.
2024-09-12 10:02:10,683:INFO:Set up index.
2024-09-12 10:02:10,859:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:10,859:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:10,867:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:10,868:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:12,759:INFO:Initializing load_model()
2024-09-12 10:02:12,759:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,764:INFO:Initializing load_model()
2024-09-12 10:02:12,765:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,769:INFO:Initializing load_model()
2024-09-12 10:02:12,770:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,839:INFO:Initializing load_model()
2024-09-12 10:02:12,839:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,855:INFO:Initializing load_model()
2024-09-12 10:02:12,855:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,872:INFO:Initializing load_model()
2024-09-12 10:02:12,872:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,888:INFO:Initializing load_model()
2024-09-12 10:02:12,890:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,896:INFO:Initializing load_model()
2024-09-12 10:02:12,896:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,904:INFO:Initializing load_model()
2024-09-12 10:02:12,904:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,910:INFO:Initializing load_model()
2024-09-12 10:02:12,911:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,916:INFO:Initializing load_model()
2024-09-12 10:02:12,917:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:02:12,991:INFO:Initializing predict_model()
2024-09-12 10:02:12,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B494650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A091300>)
2024-09-12 10:02:12,991:INFO:Checking exceptions
2024-09-12 10:02:12,992:INFO:Preloading libraries
2024-09-12 10:02:12,992:INFO:Set up data.
2024-09-12 10:02:13,012:INFO:Set up index.
2024-09-12 10:02:13,138:INFO:Initializing predict_model()
2024-09-12 10:02:13,139:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408046E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:13,139:INFO:Checking exceptions
2024-09-12 10:02:13,139:INFO:Preloading libraries
2024-09-12 10:02:13,139:INFO:Set up data.
2024-09-12 10:02:13,155:INFO:Set up index.
2024-09-12 10:02:13,276:INFO:Initializing predict_model()
2024-09-12 10:02:13,277:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:13,277:INFO:Checking exceptions
2024-09-12 10:02:13,277:INFO:Preloading libraries
2024-09-12 10:02:13,278:INFO:Set up data.
2024-09-12 10:02:13,294:INFO:Set up index.
2024-09-12 10:02:13,458:INFO:Initializing predict_model()
2024-09-12 10:02:13,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C487950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:13,458:INFO:Checking exceptions
2024-09-12 10:02:13,458:INFO:Preloading libraries
2024-09-12 10:02:13,460:INFO:Set up data.
2024-09-12 10:02:13,476:INFO:Set up index.
2024-09-12 10:02:13,652:INFO:Initializing predict_model()
2024-09-12 10:02:13,652:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B343A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:13,653:INFO:Checking exceptions
2024-09-12 10:02:13,653:INFO:Preloading libraries
2024-09-12 10:02:13,653:INFO:Set up data.
2024-09-12 10:02:13,668:INFO:Set up index.
2024-09-12 10:02:13,822:INFO:Initializing predict_model()
2024-09-12 10:02:13,822:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095169D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:13,823:INFO:Checking exceptions
2024-09-12 10:02:13,823:INFO:Preloading libraries
2024-09-12 10:02:13,823:INFO:Set up data.
2024-09-12 10:02:13,843:INFO:Set up index.
2024-09-12 10:02:13,999:INFO:Initializing predict_model()
2024-09-12 10:02:13,999:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409665090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:14,000:INFO:Checking exceptions
2024-09-12 10:02:14,000:INFO:Preloading libraries
2024-09-12 10:02:14,001:INFO:Set up data.
2024-09-12 10:02:14,019:INFO:Set up index.
2024-09-12 10:02:14,140:INFO:Initializing predict_model()
2024-09-12 10:02:14,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091C74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:14,141:INFO:Checking exceptions
2024-09-12 10:02:14,141:INFO:Preloading libraries
2024-09-12 10:02:14,142:INFO:Set up data.
2024-09-12 10:02:14,158:INFO:Set up index.
2024-09-12 10:02:14,286:INFO:Initializing predict_model()
2024-09-12 10:02:14,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254091C74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:14,287:INFO:Checking exceptions
2024-09-12 10:02:14,288:INFO:Preloading libraries
2024-09-12 10:02:14,288:INFO:Set up data.
2024-09-12 10:02:14,310:INFO:Set up index.
2024-09-12 10:02:14,424:INFO:Initializing predict_model()
2024-09-12 10:02:14,424:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:14,425:INFO:Checking exceptions
2024-09-12 10:02:14,425:INFO:Preloading libraries
2024-09-12 10:02:14,425:INFO:Set up data.
2024-09-12 10:02:14,441:INFO:Set up index.
2024-09-12 10:02:14,550:INFO:Initializing predict_model()
2024-09-12 10:02:14,551:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B342010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:02:14,551:INFO:Checking exceptions
2024-09-12 10:02:14,551:INFO:Preloading libraries
2024-09-12 10:02:14,552:INFO:Set up data.
2024-09-12 10:02:14,568:INFO:Set up index.
2024-09-12 10:02:14,752:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:14,753:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:02:14,763:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:02:14,763:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:03:42,554:INFO:Initializing load_model()
2024-09-12 10:03:42,556:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,559:INFO:Initializing load_model()
2024-09-12 10:03:42,561:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,568:INFO:Initializing load_model()
2024-09-12 10:03:42,568:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,645:INFO:Initializing load_model()
2024-09-12 10:03:42,645:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,661:INFO:Initializing load_model()
2024-09-12 10:03:42,661:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,681:INFO:Initializing load_model()
2024-09-12 10:03:42,681:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,699:INFO:Initializing load_model()
2024-09-12 10:03:42,700:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,706:INFO:Initializing load_model()
2024-09-12 10:03:42,706:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,713:INFO:Initializing load_model()
2024-09-12 10:03:42,713:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,720:INFO:Initializing load_model()
2024-09-12 10:03:42,720:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,729:INFO:Initializing load_model()
2024-09-12 10:03:42,729:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:42,808:INFO:Initializing predict_model()
2024-09-12 10:03:42,808:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409403B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A063D80>)
2024-09-12 10:03:42,808:INFO:Checking exceptions
2024-09-12 10:03:42,810:INFO:Preloading libraries
2024-09-12 10:03:42,811:INFO:Set up data.
2024-09-12 10:03:42,846:INFO:Set up index.
2024-09-12 10:03:43,022:INFO:Initializing predict_model()
2024-09-12 10:03:43,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547AAD3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:43,022:INFO:Checking exceptions
2024-09-12 10:03:43,022:INFO:Preloading libraries
2024-09-12 10:03:43,023:INFO:Set up data.
2024-09-12 10:03:43,045:INFO:Set up index.
2024-09-12 10:03:43,191:INFO:Initializing predict_model()
2024-09-12 10:03:43,191:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409531250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:43,191:INFO:Checking exceptions
2024-09-12 10:03:43,191:INFO:Preloading libraries
2024-09-12 10:03:43,192:INFO:Set up data.
2024-09-12 10:03:43,208:INFO:Set up index.
2024-09-12 10:03:43,433:INFO:Initializing predict_model()
2024-09-12 10:03:43,433:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:43,434:INFO:Checking exceptions
2024-09-12 10:03:43,434:INFO:Preloading libraries
2024-09-12 10:03:43,434:INFO:Set up data.
2024-09-12 10:03:43,458:INFO:Set up index.
2024-09-12 10:03:43,645:INFO:Initializing predict_model()
2024-09-12 10:03:43,645:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B4AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:43,645:INFO:Checking exceptions
2024-09-12 10:03:43,645:INFO:Preloading libraries
2024-09-12 10:03:43,646:INFO:Set up data.
2024-09-12 10:03:43,665:INFO:Set up index.
2024-09-12 10:03:43,830:INFO:Initializing predict_model()
2024-09-12 10:03:43,830:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:43,830:INFO:Checking exceptions
2024-09-12 10:03:43,831:INFO:Preloading libraries
2024-09-12 10:03:43,831:INFO:Set up data.
2024-09-12 10:03:43,852:INFO:Set up index.
2024-09-12 10:03:44,047:INFO:Initializing predict_model()
2024-09-12 10:03:44,047:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B4AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:44,048:INFO:Checking exceptions
2024-09-12 10:03:44,048:INFO:Preloading libraries
2024-09-12 10:03:44,048:INFO:Set up data.
2024-09-12 10:03:44,075:INFO:Set up index.
2024-09-12 10:03:44,199:INFO:Initializing predict_model()
2024-09-12 10:03:44,199:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547B1B4AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:44,200:INFO:Checking exceptions
2024-09-12 10:03:44,200:INFO:Preloading libraries
2024-09-12 10:03:44,200:INFO:Set up data.
2024-09-12 10:03:44,218:INFO:Set up index.
2024-09-12 10:03:44,334:INFO:Initializing predict_model()
2024-09-12 10:03:44,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4D9890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:44,335:INFO:Checking exceptions
2024-09-12 10:03:44,335:INFO:Preloading libraries
2024-09-12 10:03:44,335:INFO:Set up data.
2024-09-12 10:03:44,351:INFO:Set up index.
2024-09-12 10:03:44,489:INFO:Initializing predict_model()
2024-09-12 10:03:44,490:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F9FFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:44,490:INFO:Checking exceptions
2024-09-12 10:03:44,491:INFO:Preloading libraries
2024-09-12 10:03:44,491:INFO:Set up data.
2024-09-12 10:03:44,526:INFO:Set up index.
2024-09-12 10:03:44,658:INFO:Initializing predict_model()
2024-09-12 10:03:44,659:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1B2550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:03:44,659:INFO:Checking exceptions
2024-09-12 10:03:44,660:INFO:Preloading libraries
2024-09-12 10:03:44,661:INFO:Set up data.
2024-09-12 10:03:44,680:INFO:Set up index.
2024-09-12 10:03:45,180:INFO:Initializing load_model()
2024-09-12 10:03:45,181:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,183:INFO:Initializing load_model()
2024-09-12 10:03:45,183:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,186:INFO:Initializing load_model()
2024-09-12 10:03:45,187:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,221:INFO:Initializing load_model()
2024-09-12 10:03:45,222:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,229:INFO:Initializing load_model()
2024-09-12 10:03:45,229:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,234:INFO:Initializing load_model()
2024-09-12 10:03:45,234:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,240:INFO:Initializing load_model()
2024-09-12 10:03:45,240:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,244:INFO:Initializing load_model()
2024-09-12 10:03:45,244:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,248:INFO:Initializing load_model()
2024-09-12 10:03:45,248:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,253:INFO:Initializing load_model()
2024-09-12 10:03:45,253:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,257:INFO:Initializing load_model()
2024-09-12 10:03:45,257:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:03:45,331:INFO:Initializing predict_model()
2024-09-12 10:03:45,332:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B357A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A090540>)
2024-09-12 10:03:45,332:INFO:Checking exceptions
2024-09-12 10:03:45,332:INFO:Preloading libraries
2024-09-12 10:03:45,333:INFO:Set up data.
2024-09-12 10:03:45,348:INFO:Set up index.
2024-09-12 10:03:45,466:INFO:Initializing predict_model()
2024-09-12 10:03:45,467:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDFFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-12 10:03:45,467:INFO:Checking exceptions
2024-09-12 10:03:45,468:INFO:Preloading libraries
2024-09-12 10:03:45,469:INFO:Set up data.
2024-09-12 10:03:45,484:INFO:Set up index.
2024-09-12 10:03:45,602:INFO:Initializing predict_model()
2024-09-12 10:03:45,602:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-12 10:03:45,603:INFO:Checking exceptions
2024-09-12 10:03:45,603:INFO:Preloading libraries
2024-09-12 10:03:45,603:INFO:Set up data.
2024-09-12 10:03:45,617:INFO:Set up index.
2024-09-12 10:03:45,763:INFO:Initializing predict_model()
2024-09-12 10:03:45,763:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409CB1EE0>)
2024-09-12 10:03:45,764:INFO:Checking exceptions
2024-09-12 10:03:45,764:INFO:Preloading libraries
2024-09-12 10:03:45,765:INFO:Set up data.
2024-09-12 10:03:45,779:INFO:Set up index.
2024-09-12 10:03:45,950:INFO:Initializing predict_model()
2024-09-12 10:03:45,950:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:45,950:INFO:Checking exceptions
2024-09-12 10:03:45,951:INFO:Preloading libraries
2024-09-12 10:03:45,951:INFO:Set up data.
2024-09-12 10:03:45,965:INFO:Set up index.
2024-09-12 10:03:46,098:INFO:Initializing predict_model()
2024-09-12 10:03:46,098:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,098:INFO:Checking exceptions
2024-09-12 10:03:46,098:INFO:Preloading libraries
2024-09-12 10:03:46,099:INFO:Set up data.
2024-09-12 10:03:46,113:INFO:Set up index.
2024-09-12 10:03:46,255:INFO:Initializing predict_model()
2024-09-12 10:03:46,255:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,255:INFO:Checking exceptions
2024-09-12 10:03:46,256:INFO:Preloading libraries
2024-09-12 10:03:46,256:INFO:Set up data.
2024-09-12 10:03:46,275:INFO:Set up index.
2024-09-12 10:03:46,390:INFO:Initializing predict_model()
2024-09-12 10:03:46,391:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540949A490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,391:INFO:Checking exceptions
2024-09-12 10:03:46,391:INFO:Preloading libraries
2024-09-12 10:03:46,392:INFO:Set up data.
2024-09-12 10:03:46,407:INFO:Set up index.
2024-09-12 10:03:46,516:INFO:Initializing predict_model()
2024-09-12 10:03:46,517:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E58D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,517:INFO:Checking exceptions
2024-09-12 10:03:46,517:INFO:Preloading libraries
2024-09-12 10:03:46,518:INFO:Set up data.
2024-09-12 10:03:46,533:INFO:Set up index.
2024-09-12 10:03:46,645:INFO:Initializing predict_model()
2024-09-12 10:03:46,645:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4DBCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,646:INFO:Checking exceptions
2024-09-12 10:03:46,646:INFO:Preloading libraries
2024-09-12 10:03:46,646:INFO:Set up data.
2024-09-12 10:03:46,664:INFO:Set up index.
2024-09-12 10:03:46,773:INFO:Initializing predict_model()
2024-09-12 10:03:46,773:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35ED90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB9C0>)
2024-09-12 10:03:46,774:INFO:Checking exceptions
2024-09-12 10:03:46,774:INFO:Preloading libraries
2024-09-12 10:03:46,775:INFO:Set up data.
2024-09-12 10:03:46,790:INFO:Set up index.
2024-09-12 10:03:46,968:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:03:46,970:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:03:46,980:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:03:46,981:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:10,284:INFO:Initializing load_model()
2024-09-12 10:05:10,286:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,290:INFO:Initializing load_model()
2024-09-12 10:05:10,291:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,295:INFO:Initializing load_model()
2024-09-12 10:05:10,295:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,342:INFO:Initializing load_model()
2024-09-12 10:05:10,342:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,356:INFO:Initializing load_model()
2024-09-12 10:05:10,357:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,375:INFO:Initializing load_model()
2024-09-12 10:05:10,376:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,392:INFO:Initializing load_model()
2024-09-12 10:05:10,392:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,398:INFO:Initializing load_model()
2024-09-12 10:05:10,399:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,406:INFO:Initializing load_model()
2024-09-12 10:05:10,407:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,414:INFO:Initializing load_model()
2024-09-12 10:05:10,414:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,420:INFO:Initializing load_model()
2024-09-12 10:05:10,420:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:10,519:INFO:Initializing predict_model()
2024-09-12 10:05:10,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B5AFB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945FA60>)
2024-09-12 10:05:10,520:INFO:Checking exceptions
2024-09-12 10:05:10,520:INFO:Preloading libraries
2024-09-12 10:05:10,521:INFO:Set up data.
2024-09-12 10:05:10,541:INFO:Set up index.
2024-09-12 10:05:10,677:INFO:Initializing predict_model()
2024-09-12 10:05:10,677:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFD4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:10,678:INFO:Checking exceptions
2024-09-12 10:05:10,678:INFO:Preloading libraries
2024-09-12 10:05:10,678:INFO:Set up data.
2024-09-12 10:05:10,700:INFO:Set up index.
2024-09-12 10:05:10,847:INFO:Initializing predict_model()
2024-09-12 10:05:10,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:10,849:INFO:Checking exceptions
2024-09-12 10:05:10,849:INFO:Preloading libraries
2024-09-12 10:05:10,850:INFO:Set up data.
2024-09-12 10:05:10,874:INFO:Set up index.
2024-09-12 10:05:11,059:INFO:Initializing predict_model()
2024-09-12 10:05:11,060:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:11,060:INFO:Checking exceptions
2024-09-12 10:05:11,060:INFO:Preloading libraries
2024-09-12 10:05:11,061:INFO:Set up data.
2024-09-12 10:05:11,079:INFO:Set up index.
2024-09-12 10:05:11,266:INFO:Initializing predict_model()
2024-09-12 10:05:11,266:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:11,266:INFO:Checking exceptions
2024-09-12 10:05:11,267:INFO:Preloading libraries
2024-09-12 10:05:11,267:INFO:Set up data.
2024-09-12 10:05:11,290:INFO:Set up index.
2024-09-12 10:05:11,475:INFO:Initializing predict_model()
2024-09-12 10:05:11,475:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC6750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:11,475:INFO:Checking exceptions
2024-09-12 10:05:11,476:INFO:Preloading libraries
2024-09-12 10:05:11,476:INFO:Set up data.
2024-09-12 10:05:11,510:INFO:Set up index.
2024-09-12 10:05:11,697:INFO:Initializing predict_model()
2024-09-12 10:05:11,697:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:11,697:INFO:Checking exceptions
2024-09-12 10:05:11,697:INFO:Preloading libraries
2024-09-12 10:05:11,698:INFO:Set up data.
2024-09-12 10:05:11,722:INFO:Set up index.
2024-09-12 10:05:11,858:INFO:Initializing predict_model()
2024-09-12 10:05:11,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A29C2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:11,858:INFO:Checking exceptions
2024-09-12 10:05:11,859:INFO:Preloading libraries
2024-09-12 10:05:11,859:INFO:Set up data.
2024-09-12 10:05:11,878:INFO:Set up index.
2024-09-12 10:05:12,014:INFO:Initializing predict_model()
2024-09-12 10:05:12,014:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4BD8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:12,014:INFO:Checking exceptions
2024-09-12 10:05:12,015:INFO:Preloading libraries
2024-09-12 10:05:12,015:INFO:Set up data.
2024-09-12 10:05:12,033:INFO:Set up index.
2024-09-12 10:05:12,185:INFO:Initializing predict_model()
2024-09-12 10:05:12,185:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254097BAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:12,185:INFO:Checking exceptions
2024-09-12 10:05:12,185:INFO:Preloading libraries
2024-09-12 10:05:12,186:INFO:Set up data.
2024-09-12 10:05:12,210:INFO:Set up index.
2024-09-12 10:05:12,341:INFO:Initializing predict_model()
2024-09-12 10:05:12,341:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:05:12,342:INFO:Checking exceptions
2024-09-12 10:05:12,342:INFO:Preloading libraries
2024-09-12 10:05:12,342:INFO:Set up data.
2024-09-12 10:05:12,363:INFO:Set up index.
2024-09-12 10:05:12,565:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:12,566:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:12,578:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:12,580:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:14,029:INFO:Initializing load_model()
2024-09-12 10:05:14,030:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,034:INFO:Initializing load_model()
2024-09-12 10:05:14,034:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,048:INFO:Initializing load_model()
2024-09-12 10:05:14,048:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,097:INFO:Initializing load_model()
2024-09-12 10:05:14,097:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,112:INFO:Initializing load_model()
2024-09-12 10:05:14,112:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,129:INFO:Initializing load_model()
2024-09-12 10:05:14,130:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,146:INFO:Initializing load_model()
2024-09-12 10:05:14,146:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,153:INFO:Initializing load_model()
2024-09-12 10:05:14,153:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,159:INFO:Initializing load_model()
2024-09-12 10:05:14,159:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,164:INFO:Initializing load_model()
2024-09-12 10:05:14,165:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,171:INFO:Initializing load_model()
2024-09-12 10:05:14,171:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:14,239:INFO:Initializing predict_model()
2024-09-12 10:05:14,239:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6C9AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B37F740>)
2024-09-12 10:05:14,239:INFO:Checking exceptions
2024-09-12 10:05:14,240:INFO:Preloading libraries
2024-09-12 10:05:14,241:INFO:Set up data.
2024-09-12 10:05:14,258:INFO:Set up index.
2024-09-12 10:05:14,377:INFO:Initializing predict_model()
2024-09-12 10:05:14,377:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254095B8090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB880>)
2024-09-12 10:05:14,377:INFO:Checking exceptions
2024-09-12 10:05:14,378:INFO:Preloading libraries
2024-09-12 10:05:14,378:INFO:Set up data.
2024-09-12 10:05:14,393:INFO:Set up index.
2024-09-12 10:05:14,505:INFO:Initializing predict_model()
2024-09-12 10:05:14,505:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:14,505:INFO:Checking exceptions
2024-09-12 10:05:14,506:INFO:Preloading libraries
2024-09-12 10:05:14,506:INFO:Set up data.
2024-09-12 10:05:14,520:INFO:Set up index.
2024-09-12 10:05:14,692:INFO:Initializing predict_model()
2024-09-12 10:05:14,693:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099EC3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:14,693:INFO:Checking exceptions
2024-09-12 10:05:14,693:INFO:Preloading libraries
2024-09-12 10:05:14,694:INFO:Set up data.
2024-09-12 10:05:14,713:INFO:Set up index.
2024-09-12 10:05:14,888:INFO:Initializing predict_model()
2024-09-12 10:05:14,888:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:14,889:INFO:Checking exceptions
2024-09-12 10:05:14,889:INFO:Preloading libraries
2024-09-12 10:05:14,889:INFO:Set up data.
2024-09-12 10:05:14,908:INFO:Set up index.
2024-09-12 10:05:15,065:INFO:Initializing predict_model()
2024-09-12 10:05:15,066:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,066:INFO:Checking exceptions
2024-09-12 10:05:15,066:INFO:Preloading libraries
2024-09-12 10:05:15,067:INFO:Set up data.
2024-09-12 10:05:15,091:INFO:Set up index.
2024-09-12 10:05:15,252:INFO:Initializing predict_model()
2024-09-12 10:05:15,253:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B5AD350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,253:INFO:Checking exceptions
2024-09-12 10:05:15,254:INFO:Preloading libraries
2024-09-12 10:05:15,254:INFO:Set up data.
2024-09-12 10:05:15,271:INFO:Set up index.
2024-09-12 10:05:15,427:INFO:Initializing predict_model()
2024-09-12 10:05:15,427:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C487950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,428:INFO:Checking exceptions
2024-09-12 10:05:15,428:INFO:Preloading libraries
2024-09-12 10:05:15,429:INFO:Set up data.
2024-09-12 10:05:15,509:INFO:Set up index.
2024-09-12 10:05:15,648:INFO:Initializing predict_model()
2024-09-12 10:05:15,649:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFD5690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,649:INFO:Checking exceptions
2024-09-12 10:05:15,649:INFO:Preloading libraries
2024-09-12 10:05:15,650:INFO:Set up data.
2024-09-12 10:05:15,668:INFO:Set up index.
2024-09-12 10:05:15,809:INFO:Initializing predict_model()
2024-09-12 10:05:15,809:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,810:INFO:Checking exceptions
2024-09-12 10:05:15,810:INFO:Preloading libraries
2024-09-12 10:05:15,811:INFO:Set up data.
2024-09-12 10:05:15,826:INFO:Set up index.
2024-09-12 10:05:15,967:INFO:Initializing predict_model()
2024-09-12 10:05:15,967:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401BDBE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:15,967:INFO:Checking exceptions
2024-09-12 10:05:15,968:INFO:Preloading libraries
2024-09-12 10:05:15,968:INFO:Set up data.
2024-09-12 10:05:15,990:INFO:Set up index.
2024-09-12 10:05:16,175:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:16,176:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:16,186:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:16,187:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:53,450:INFO:Initializing load_model()
2024-09-12 10:05:53,452:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,457:INFO:Initializing load_model()
2024-09-12 10:05:53,457:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,462:INFO:Initializing load_model()
2024-09-12 10:05:53,462:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,519:INFO:Initializing load_model()
2024-09-12 10:05:53,519:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,535:INFO:Initializing load_model()
2024-09-12 10:05:53,535:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,549:INFO:Initializing load_model()
2024-09-12 10:05:53,549:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,566:INFO:Initializing load_model()
2024-09-12 10:05:53,567:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,573:INFO:Initializing load_model()
2024-09-12 10:05:53,573:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,581:INFO:Initializing load_model()
2024-09-12 10:05:53,581:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,587:INFO:Initializing load_model()
2024-09-12 10:05:53,587:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,593:INFO:Initializing load_model()
2024-09-12 10:05:53,593:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:53,686:INFO:Initializing predict_model()
2024-09-12 10:05:53,686:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A216C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540B37DB20>)
2024-09-12 10:05:53,687:INFO:Checking exceptions
2024-09-12 10:05:53,687:INFO:Preloading libraries
2024-09-12 10:05:53,688:INFO:Set up data.
2024-09-12 10:05:53,705:INFO:Set up index.
2024-09-12 10:05:53,835:INFO:Initializing predict_model()
2024-09-12 10:05:53,835:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093DB2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:53,835:INFO:Checking exceptions
2024-09-12 10:05:53,836:INFO:Preloading libraries
2024-09-12 10:05:53,836:INFO:Set up data.
2024-09-12 10:05:53,854:INFO:Set up index.
2024-09-12 10:05:53,983:INFO:Initializing predict_model()
2024-09-12 10:05:53,983:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD0D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:53,984:INFO:Checking exceptions
2024-09-12 10:05:53,984:INFO:Preloading libraries
2024-09-12 10:05:53,984:INFO:Set up data.
2024-09-12 10:05:54,002:INFO:Set up index.
2024-09-12 10:05:54,187:INFO:Initializing predict_model()
2024-09-12 10:05:54,188:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E4F04D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:54,189:INFO:Checking exceptions
2024-09-12 10:05:54,189:INFO:Preloading libraries
2024-09-12 10:05:54,190:INFO:Set up data.
2024-09-12 10:05:54,207:INFO:Set up index.
2024-09-12 10:05:54,386:INFO:Initializing predict_model()
2024-09-12 10:05:54,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E58D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:54,387:INFO:Checking exceptions
2024-09-12 10:05:54,387:INFO:Preloading libraries
2024-09-12 10:05:54,388:INFO:Set up data.
2024-09-12 10:05:54,402:INFO:Set up index.
2024-09-12 10:05:54,575:INFO:Initializing predict_model()
2024-09-12 10:05:54,576:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E58D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:54,576:INFO:Checking exceptions
2024-09-12 10:05:54,576:INFO:Preloading libraries
2024-09-12 10:05:54,577:INFO:Set up data.
2024-09-12 10:05:54,592:INFO:Set up index.
2024-09-12 10:05:54,742:INFO:Initializing predict_model()
2024-09-12 10:05:54,742:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFBEA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:54,743:INFO:Checking exceptions
2024-09-12 10:05:54,743:INFO:Preloading libraries
2024-09-12 10:05:54,743:INFO:Set up data.
2024-09-12 10:05:54,760:INFO:Set up index.
2024-09-12 10:05:54,880:INFO:Initializing predict_model()
2024-09-12 10:05:54,880:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFAB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:54,880:INFO:Checking exceptions
2024-09-12 10:05:54,881:INFO:Preloading libraries
2024-09-12 10:05:54,881:INFO:Set up data.
2024-09-12 10:05:54,897:INFO:Set up index.
2024-09-12 10:05:55,008:INFO:Initializing predict_model()
2024-09-12 10:05:55,008:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFFAB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:55,008:INFO:Checking exceptions
2024-09-12 10:05:55,008:INFO:Preloading libraries
2024-09-12 10:05:55,009:INFO:Set up data.
2024-09-12 10:05:55,026:INFO:Set up index.
2024-09-12 10:05:55,135:INFO:Initializing predict_model()
2024-09-12 10:05:55,135:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254096B5090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:55,136:INFO:Checking exceptions
2024-09-12 10:05:55,136:INFO:Preloading libraries
2024-09-12 10:05:55,137:INFO:Set up data.
2024-09-12 10:05:55,151:INFO:Set up index.
2024-09-12 10:05:55,261:INFO:Initializing predict_model()
2024-09-12 10:05:55,262:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A035490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:05:55,262:INFO:Checking exceptions
2024-09-12 10:05:55,262:INFO:Preloading libraries
2024-09-12 10:05:55,263:INFO:Set up data.
2024-09-12 10:05:55,278:INFO:Set up index.
2024-09-12 10:05:55,457:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:55,458:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:55,470:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:55,471:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:56,668:INFO:Initializing load_model()
2024-09-12 10:05:56,668:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,672:INFO:Initializing load_model()
2024-09-12 10:05:56,673:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,678:INFO:Initializing load_model()
2024-09-12 10:05:56,678:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,732:INFO:Initializing load_model()
2024-09-12 10:05:56,732:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,745:INFO:Initializing load_model()
2024-09-12 10:05:56,746:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,762:INFO:Initializing load_model()
2024-09-12 10:05:56,762:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,781:INFO:Initializing load_model()
2024-09-12 10:05:56,781:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,786:INFO:Initializing load_model()
2024-09-12 10:05:56,786:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,793:INFO:Initializing load_model()
2024-09-12 10:05:56,793:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,799:INFO:Initializing load_model()
2024-09-12 10:05:56,799:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,804:INFO:Initializing load_model()
2024-09-12 10:05:56,805:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:05:56,880:INFO:Initializing predict_model()
2024-09-12 10:05:56,880:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4E8190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945F420>)
2024-09-12 10:05:56,881:INFO:Checking exceptions
2024-09-12 10:05:56,881:INFO:Preloading libraries
2024-09-12 10:05:56,882:INFO:Set up data.
2024-09-12 10:05:56,901:INFO:Set up index.
2024-09-12 10:05:57,019:INFO:Initializing predict_model()
2024-09-12 10:05:57,019:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409209710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,020:INFO:Checking exceptions
2024-09-12 10:05:57,020:INFO:Preloading libraries
2024-09-12 10:05:57,021:INFO:Set up data.
2024-09-12 10:05:57,036:INFO:Set up index.
2024-09-12 10:05:57,152:INFO:Initializing predict_model()
2024-09-12 10:05:57,153:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,153:INFO:Checking exceptions
2024-09-12 10:05:57,153:INFO:Preloading libraries
2024-09-12 10:05:57,154:INFO:Set up data.
2024-09-12 10:05:57,167:INFO:Set up index.
2024-09-12 10:05:57,334:INFO:Initializing predict_model()
2024-09-12 10:05:57,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409665090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,335:INFO:Checking exceptions
2024-09-12 10:05:57,335:INFO:Preloading libraries
2024-09-12 10:05:57,336:INFO:Set up data.
2024-09-12 10:05:57,353:INFO:Set up index.
2024-09-12 10:05:57,526:INFO:Initializing predict_model()
2024-09-12 10:05:57,527:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4DA1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,527:INFO:Checking exceptions
2024-09-12 10:05:57,528:INFO:Preloading libraries
2024-09-12 10:05:57,529:INFO:Set up data.
2024-09-12 10:05:57,547:INFO:Set up index.
2024-09-12 10:05:57,699:INFO:Initializing predict_model()
2024-09-12 10:05:57,699:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FD8E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,699:INFO:Checking exceptions
2024-09-12 10:05:57,699:INFO:Preloading libraries
2024-09-12 10:05:57,700:INFO:Set up data.
2024-09-12 10:05:57,718:INFO:Set up index.
2024-09-12 10:05:57,885:INFO:Initializing predict_model()
2024-09-12 10:05:57,886:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407809090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:57,886:INFO:Checking exceptions
2024-09-12 10:05:57,886:INFO:Preloading libraries
2024-09-12 10:05:57,887:INFO:Set up data.
2024-09-12 10:05:57,904:INFO:Set up index.
2024-09-12 10:05:58,027:INFO:Initializing predict_model()
2024-09-12 10:05:58,027:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FC7D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:58,028:INFO:Checking exceptions
2024-09-12 10:05:58,028:INFO:Preloading libraries
2024-09-12 10:05:58,029:INFO:Set up data.
2024-09-12 10:05:58,046:INFO:Set up index.
2024-09-12 10:05:58,173:INFO:Initializing predict_model()
2024-09-12 10:05:58,174:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540952EB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:58,174:INFO:Checking exceptions
2024-09-12 10:05:58,174:INFO:Preloading libraries
2024-09-12 10:05:58,175:INFO:Set up data.
2024-09-12 10:05:58,191:INFO:Set up index.
2024-09-12 10:05:58,314:INFO:Initializing predict_model()
2024-09-12 10:05:58,314:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF46A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:58,314:INFO:Checking exceptions
2024-09-12 10:05:58,315:INFO:Preloading libraries
2024-09-12 10:05:58,315:INFO:Set up data.
2024-09-12 10:05:58,330:INFO:Set up index.
2024-09-12 10:05:58,439:INFO:Initializing predict_model()
2024-09-12 10:05:58,440:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E35EF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B8EB740>)
2024-09-12 10:05:58,440:INFO:Checking exceptions
2024-09-12 10:05:58,440:INFO:Preloading libraries
2024-09-12 10:05:58,441:INFO:Set up data.
2024-09-12 10:05:58,461:INFO:Set up index.
2024-09-12 10:05:58,638:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:58,639:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:05:58,650:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:05:58,651:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:06:39,216:INFO:Initializing load_model()
2024-09-12 10:06:39,217:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,221:INFO:Initializing load_model()
2024-09-12 10:06:39,222:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,227:INFO:Initializing load_model()
2024-09-12 10:06:39,228:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,300:INFO:Initializing load_model()
2024-09-12 10:06:39,300:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,318:INFO:Initializing load_model()
2024-09-12 10:06:39,319:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,335:INFO:Initializing load_model()
2024-09-12 10:06:39,336:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,355:INFO:Initializing load_model()
2024-09-12 10:06:39,355:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,364:INFO:Initializing load_model()
2024-09-12 10:06:39,365:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,371:INFO:Initializing load_model()
2024-09-12 10:06:39,371:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,378:INFO:Initializing load_model()
2024-09-12 10:06:39,378:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,384:INFO:Initializing load_model()
2024-09-12 10:06:39,385:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:39,466:INFO:Initializing predict_model()
2024-09-12 10:06:39,467:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540952E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945EB60>)
2024-09-12 10:06:39,467:INFO:Checking exceptions
2024-09-12 10:06:39,468:INFO:Preloading libraries
2024-09-12 10:06:39,468:INFO:Set up data.
2024-09-12 10:06:39,502:INFO:Set up index.
2024-09-12 10:06:39,679:INFO:Initializing predict_model()
2024-09-12 10:06:39,680:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254788F4050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:06:39,680:INFO:Checking exceptions
2024-09-12 10:06:39,680:INFO:Preloading libraries
2024-09-12 10:06:39,682:INFO:Set up data.
2024-09-12 10:06:39,703:INFO:Set up index.
2024-09-12 10:06:39,848:INFO:Initializing predict_model()
2024-09-12 10:06:39,848:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C83CB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:39,849:INFO:Checking exceptions
2024-09-12 10:06:39,849:INFO:Preloading libraries
2024-09-12 10:06:39,849:INFO:Set up data.
2024-09-12 10:06:39,867:INFO:Set up index.
2024-09-12 10:06:40,082:INFO:Initializing predict_model()
2024-09-12 10:06:40,082:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409B928D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:40,082:INFO:Checking exceptions
2024-09-12 10:06:40,083:INFO:Preloading libraries
2024-09-12 10:06:40,083:INFO:Set up data.
2024-09-12 10:06:40,100:INFO:Set up index.
2024-09-12 10:06:40,320:INFO:Initializing predict_model()
2024-09-12 10:06:40,320:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:40,320:INFO:Checking exceptions
2024-09-12 10:06:40,320:INFO:Preloading libraries
2024-09-12 10:06:40,321:INFO:Set up data.
2024-09-12 10:06:40,343:INFO:Set up index.
2024-09-12 10:06:40,514:INFO:Initializing predict_model()
2024-09-12 10:06:40,514:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540813DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:40,514:INFO:Checking exceptions
2024-09-12 10:06:40,514:INFO:Preloading libraries
2024-09-12 10:06:40,515:INFO:Set up data.
2024-09-12 10:06:40,533:INFO:Set up index.
2024-09-12 10:06:40,780:INFO:Initializing predict_model()
2024-09-12 10:06:40,780:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:40,781:INFO:Checking exceptions
2024-09-12 10:06:40,781:INFO:Preloading libraries
2024-09-12 10:06:40,782:INFO:Set up data.
2024-09-12 10:06:40,831:INFO:Set up index.
2024-09-12 10:06:41,001:INFO:Initializing predict_model()
2024-09-12 10:06:41,002:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B7CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:41,002:INFO:Checking exceptions
2024-09-12 10:06:41,002:INFO:Preloading libraries
2024-09-12 10:06:41,003:INFO:Set up data.
2024-09-12 10:06:41,029:INFO:Set up index.
2024-09-12 10:06:41,186:INFO:Initializing predict_model()
2024-09-12 10:06:41,186:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409B928D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:41,187:INFO:Checking exceptions
2024-09-12 10:06:41,187:INFO:Preloading libraries
2024-09-12 10:06:41,187:INFO:Set up data.
2024-09-12 10:06:41,209:INFO:Set up index.
2024-09-12 10:06:41,356:INFO:Initializing predict_model()
2024-09-12 10:06:41,357:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A7A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:41,357:INFO:Checking exceptions
2024-09-12 10:06:41,357:INFO:Preloading libraries
2024-09-12 10:06:41,359:INFO:Set up data.
2024-09-12 10:06:41,381:INFO:Set up index.
2024-09-12 10:06:41,538:INFO:Initializing predict_model()
2024-09-12 10:06:41,538:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408045DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547E307B00>)
2024-09-12 10:06:41,538:INFO:Checking exceptions
2024-09-12 10:06:41,539:INFO:Preloading libraries
2024-09-12 10:06:41,539:INFO:Set up data.
2024-09-12 10:06:41,560:INFO:Set up index.
2024-09-12 10:06:41,768:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:06:41,769:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:06:46,575:INFO:Initializing load_model()
2024-09-12 10:06:46,576:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,580:INFO:Initializing load_model()
2024-09-12 10:06:46,580:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,585:INFO:Initializing load_model()
2024-09-12 10:06:46,586:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,640:INFO:Initializing load_model()
2024-09-12 10:06:46,641:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,657:INFO:Initializing load_model()
2024-09-12 10:06:46,657:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,675:INFO:Initializing load_model()
2024-09-12 10:06:46,675:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,692:INFO:Initializing load_model()
2024-09-12 10:06:46,692:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,698:INFO:Initializing load_model()
2024-09-12 10:06:46,698:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,704:INFO:Initializing load_model()
2024-09-12 10:06:46,704:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,711:INFO:Initializing load_model()
2024-09-12 10:06:46,711:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,717:INFO:Initializing load_model()
2024-09-12 10:06:46,717:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:06:46,783:INFO:Initializing predict_model()
2024-09-12 10:06:46,783:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540955A810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BECA0>)
2024-09-12 10:06:46,783:INFO:Checking exceptions
2024-09-12 10:06:46,784:INFO:Preloading libraries
2024-09-12 10:06:46,784:INFO:Set up data.
2024-09-12 10:06:46,799:INFO:Set up index.
2024-09-12 10:06:46,919:INFO:Initializing predict_model()
2024-09-12 10:06:46,919:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B34C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002547B0EB880>)
2024-09-12 10:06:46,920:INFO:Checking exceptions
2024-09-12 10:06:46,920:INFO:Preloading libraries
2024-09-12 10:06:46,921:INFO:Set up data.
2024-09-12 10:06:46,937:INFO:Set up index.
2024-09-12 10:06:47,053:INFO:Initializing predict_model()
2024-09-12 10:06:47,053:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,053:INFO:Checking exceptions
2024-09-12 10:06:47,054:INFO:Preloading libraries
2024-09-12 10:06:47,054:INFO:Set up data.
2024-09-12 10:06:47,070:INFO:Set up index.
2024-09-12 10:06:47,239:INFO:Initializing predict_model()
2024-09-12 10:06:47,240:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,241:INFO:Checking exceptions
2024-09-12 10:06:47,241:INFO:Preloading libraries
2024-09-12 10:06:47,242:INFO:Set up data.
2024-09-12 10:06:47,259:INFO:Set up index.
2024-09-12 10:06:47,432:INFO:Initializing predict_model()
2024-09-12 10:06:47,432:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407834190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,432:INFO:Checking exceptions
2024-09-12 10:06:47,433:INFO:Preloading libraries
2024-09-12 10:06:47,433:INFO:Set up data.
2024-09-12 10:06:47,449:INFO:Set up index.
2024-09-12 10:06:47,607:INFO:Initializing predict_model()
2024-09-12 10:06:47,607:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,607:INFO:Checking exceptions
2024-09-12 10:06:47,608:INFO:Preloading libraries
2024-09-12 10:06:47,608:INFO:Set up data.
2024-09-12 10:06:47,631:INFO:Set up index.
2024-09-12 10:06:47,793:INFO:Initializing predict_model()
2024-09-12 10:06:47,793:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD42850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,794:INFO:Checking exceptions
2024-09-12 10:06:47,794:INFO:Preloading libraries
2024-09-12 10:06:47,795:INFO:Set up data.
2024-09-12 10:06:47,812:INFO:Set up index.
2024-09-12 10:06:47,942:INFO:Initializing predict_model()
2024-09-12 10:06:47,942:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:47,942:INFO:Checking exceptions
2024-09-12 10:06:47,943:INFO:Preloading libraries
2024-09-12 10:06:47,943:INFO:Set up data.
2024-09-12 10:06:47,961:INFO:Set up index.
2024-09-12 10:06:48,089:INFO:Initializing predict_model()
2024-09-12 10:06:48,089:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C487950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:48,090:INFO:Checking exceptions
2024-09-12 10:06:48,090:INFO:Preloading libraries
2024-09-12 10:06:48,090:INFO:Set up data.
2024-09-12 10:06:48,105:INFO:Set up index.
2024-09-12 10:06:48,218:INFO:Initializing predict_model()
2024-09-12 10:06:48,218:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DEB0A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:48,219:INFO:Checking exceptions
2024-09-12 10:06:48,219:INFO:Preloading libraries
2024-09-12 10:06:48,220:INFO:Set up data.
2024-09-12 10:06:48,235:INFO:Set up index.
2024-09-12 10:06:48,350:INFO:Initializing predict_model()
2024-09-12 10:06:48,350:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407B2D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254065F76A0>)
2024-09-12 10:06:48,350:INFO:Checking exceptions
2024-09-12 10:06:48,350:INFO:Preloading libraries
2024-09-12 10:06:48,351:INFO:Set up data.
2024-09-12 10:06:48,368:INFO:Set up index.
2024-09-12 10:06:48,546:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:583: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(filtered_prediction[score_column]):

2024-09-12 10:06:48,547:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:584: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction[score_column] = filtered_prediction[score_column].astype(float)

2024-09-12 10:12:10,876:INFO:Initializing load_model()
2024-09-12 10:12:10,878:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,882:INFO:Initializing load_model()
2024-09-12 10:12:10,883:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,903:INFO:Initializing load_model()
2024-09-12 10:12:10,903:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,945:INFO:Initializing load_model()
2024-09-12 10:12:10,945:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,964:INFO:Initializing load_model()
2024-09-12 10:12:10,965:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,981:INFO:Initializing load_model()
2024-09-12 10:12:10,981:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:10,998:INFO:Initializing load_model()
2024-09-12 10:12:10,998:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:11,004:INFO:Initializing load_model()
2024-09-12 10:12:11,004:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:11,010:INFO:Initializing load_model()
2024-09-12 10:12:11,011:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:11,017:INFO:Initializing load_model()
2024-09-12 10:12:11,017:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:11,024:INFO:Initializing load_model()
2024-09-12 10:12:11,025:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:11,100:INFO:Initializing predict_model()
2024-09-12 10:12:11,100:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B34E290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540945F240>)
2024-09-12 10:12:11,101:INFO:Checking exceptions
2024-09-12 10:12:11,101:INFO:Preloading libraries
2024-09-12 10:12:11,102:INFO:Set up data.
2024-09-12 10:12:11,126:INFO:Set up index.
2024-09-12 10:12:11,340:INFO:Initializing predict_model()
2024-09-12 10:12:11,340:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:11,341:INFO:Checking exceptions
2024-09-12 10:12:11,341:INFO:Preloading libraries
2024-09-12 10:12:11,342:INFO:Set up data.
2024-09-12 10:12:11,369:INFO:Set up index.
2024-09-12 10:12:11,550:INFO:Initializing predict_model()
2024-09-12 10:12:11,551:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254078CB990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:11,551:INFO:Checking exceptions
2024-09-12 10:12:11,551:INFO:Preloading libraries
2024-09-12 10:12:11,551:INFO:Set up data.
2024-09-12 10:12:11,568:INFO:Set up index.
2024-09-12 10:12:11,757:INFO:Initializing predict_model()
2024-09-12 10:12:11,759:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:11,759:INFO:Checking exceptions
2024-09-12 10:12:11,759:INFO:Preloading libraries
2024-09-12 10:12:11,760:INFO:Set up data.
2024-09-12 10:12:11,778:INFO:Set up index.
2024-09-12 10:12:11,967:INFO:Initializing predict_model()
2024-09-12 10:12:11,968:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:11,968:INFO:Checking exceptions
2024-09-12 10:12:11,968:INFO:Preloading libraries
2024-09-12 10:12:11,968:INFO:Set up data.
2024-09-12 10:12:11,988:INFO:Set up index.
2024-09-12 10:12:12,145:INFO:Initializing predict_model()
2024-09-12 10:12:12,146:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,146:INFO:Checking exceptions
2024-09-12 10:12:12,146:INFO:Preloading libraries
2024-09-12 10:12:12,147:INFO:Set up data.
2024-09-12 10:12:12,163:INFO:Set up index.
2024-09-12 10:12:12,308:INFO:Initializing predict_model()
2024-09-12 10:12:12,308:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547E58EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,309:INFO:Checking exceptions
2024-09-12 10:12:12,309:INFO:Preloading libraries
2024-09-12 10:12:12,310:INFO:Set up data.
2024-09-12 10:12:12,324:INFO:Set up index.
2024-09-12 10:12:12,439:INFO:Initializing predict_model()
2024-09-12 10:12:12,439:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409664D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,440:INFO:Checking exceptions
2024-09-12 10:12:12,440:INFO:Preloading libraries
2024-09-12 10:12:12,441:INFO:Set up data.
2024-09-12 10:12:12,457:INFO:Set up index.
2024-09-12 10:12:12,570:INFO:Initializing predict_model()
2024-09-12 10:12:12,570:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DF74BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,570:INFO:Checking exceptions
2024-09-12 10:12:12,571:INFO:Preloading libraries
2024-09-12 10:12:12,571:INFO:Set up data.
2024-09-12 10:12:12,588:INFO:Set up index.
2024-09-12 10:12:12,708:INFO:Initializing predict_model()
2024-09-12 10:12:12,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407834190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,708:INFO:Checking exceptions
2024-09-12 10:12:12,709:INFO:Preloading libraries
2024-09-12 10:12:12,709:INFO:Set up data.
2024-09-12 10:12:12,728:INFO:Set up index.
2024-09-12 10:12:12,839:INFO:Initializing predict_model()
2024-09-12 10:12:12,840:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B5E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409F882C0>)
2024-09-12 10:12:12,840:INFO:Checking exceptions
2024-09-12 10:12:12,840:INFO:Preloading libraries
2024-09-12 10:12:12,841:INFO:Set up data.
2024-09-12 10:12:12,857:INFO:Set up index.
2024-09-12 10:12:13,043:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:587: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  

2024-09-12 10:12:13,044:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:588: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  # Filter predictions based on prediction_label

2024-09-12 10:12:22,243:INFO:Initializing load_model()
2024-09-12 10:12:22,244:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,249:INFO:Initializing load_model()
2024-09-12 10:12:22,249:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,256:INFO:Initializing load_model()
2024-09-12 10:12:22,256:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,311:INFO:Initializing load_model()
2024-09-12 10:12:22,311:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,326:INFO:Initializing load_model()
2024-09-12 10:12:22,327:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,346:INFO:Initializing load_model()
2024-09-12 10:12:22,346:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,363:INFO:Initializing load_model()
2024-09-12 10:12:22,363:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,369:INFO:Initializing load_model()
2024-09-12 10:12:22,370:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,376:INFO:Initializing load_model()
2024-09-12 10:12:22,376:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,382:INFO:Initializing load_model()
2024-09-12 10:12:22,382:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,389:INFO:Initializing load_model()
2024-09-12 10:12:22,389:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:12:22,457:INFO:Initializing predict_model()
2024-09-12 10:12:22,458:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B30E310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A0918A0>)
2024-09-12 10:12:22,458:INFO:Checking exceptions
2024-09-12 10:12:22,458:INFO:Preloading libraries
2024-09-12 10:12:22,459:INFO:Set up data.
2024-09-12 10:12:22,475:INFO:Set up index.
2024-09-12 10:12:22,596:INFO:Initializing predict_model()
2024-09-12 10:12:22,597:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025408166910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:22,597:INFO:Checking exceptions
2024-09-12 10:12:22,597:INFO:Preloading libraries
2024-09-12 10:12:22,598:INFO:Set up data.
2024-09-12 10:12:22,615:INFO:Set up index.
2024-09-12 10:12:22,729:INFO:Initializing predict_model()
2024-09-12 10:12:22,730:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:22,730:INFO:Checking exceptions
2024-09-12 10:12:22,730:INFO:Preloading libraries
2024-09-12 10:12:22,732:INFO:Set up data.
2024-09-12 10:12:22,747:INFO:Set up index.
2024-09-12 10:12:22,912:INFO:Initializing predict_model()
2024-09-12 10:12:22,912:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:22,913:INFO:Checking exceptions
2024-09-12 10:12:22,913:INFO:Preloading libraries
2024-09-12 10:12:22,914:INFO:Set up data.
2024-09-12 10:12:22,929:INFO:Set up index.
2024-09-12 10:12:23,105:INFO:Initializing predict_model()
2024-09-12 10:12:23,105:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409823610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,106:INFO:Checking exceptions
2024-09-12 10:12:23,106:INFO:Preloading libraries
2024-09-12 10:12:23,107:INFO:Set up data.
2024-09-12 10:12:23,123:INFO:Set up index.
2024-09-12 10:12:23,285:INFO:Initializing predict_model()
2024-09-12 10:12:23,286:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254094A6910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,287:INFO:Checking exceptions
2024-09-12 10:12:23,287:INFO:Preloading libraries
2024-09-12 10:12:23,288:INFO:Set up data.
2024-09-12 10:12:23,316:INFO:Set up index.
2024-09-12 10:12:23,498:INFO:Initializing predict_model()
2024-09-12 10:12:23,498:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A05BF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,498:INFO:Checking exceptions
2024-09-12 10:12:23,499:INFO:Preloading libraries
2024-09-12 10:12:23,499:INFO:Set up data.
2024-09-12 10:12:23,517:INFO:Set up index.
2024-09-12 10:12:23,643:INFO:Initializing predict_model()
2024-09-12 10:12:23,643:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FCA210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,644:INFO:Checking exceptions
2024-09-12 10:12:23,644:INFO:Preloading libraries
2024-09-12 10:12:23,644:INFO:Set up data.
2024-09-12 10:12:23,662:INFO:Set up index.
2024-09-12 10:12:23,787:INFO:Initializing predict_model()
2024-09-12 10:12:23,787:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFD5690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,788:INFO:Checking exceptions
2024-09-12 10:12:23,788:INFO:Preloading libraries
2024-09-12 10:12:23,788:INFO:Set up data.
2024-09-12 10:12:23,805:INFO:Set up index.
2024-09-12 10:12:23,916:INFO:Initializing predict_model()
2024-09-12 10:12:23,917:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4BD850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:23,917:INFO:Checking exceptions
2024-09-12 10:12:23,917:INFO:Preloading libraries
2024-09-12 10:12:23,918:INFO:Set up data.
2024-09-12 10:12:23,933:INFO:Set up index.
2024-09-12 10:12:24,042:INFO:Initializing predict_model()
2024-09-12 10:12:24,042:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547FE6C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254080B3C40>)
2024-09-12 10:12:24,042:INFO:Checking exceptions
2024-09-12 10:12:24,043:INFO:Preloading libraries
2024-09-12 10:12:24,043:INFO:Set up data.
2024-09-12 10:12:24,058:INFO:Set up index.
2024-09-12 10:12:24,240:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:587: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  

2024-09-12 10:12:24,241:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:588: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  # Filter predictions based on prediction_label

2024-09-12 10:17:33,425:INFO:Initializing load_model()
2024-09-12 10:17:33,427:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,433:INFO:Initializing load_model()
2024-09-12 10:17:33,433:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,437:INFO:Initializing load_model()
2024-09-12 10:17:33,438:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,493:INFO:Initializing load_model()
2024-09-12 10:17:33,493:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,507:INFO:Initializing load_model()
2024-09-12 10:17:33,507:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,527:INFO:Initializing load_model()
2024-09-12 10:17:33,528:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,545:INFO:Initializing load_model()
2024-09-12 10:17:33,546:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,552:INFO:Initializing load_model()
2024-09-12 10:17:33,552:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,558:INFO:Initializing load_model()
2024-09-12 10:17:33,559:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,565:INFO:Initializing load_model()
2024-09-12 10:17:33,566:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,572:INFO:Initializing load_model()
2024-09-12 10:17:33,573:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:17:33,639:INFO:Initializing predict_model()
2024-09-12 10:17:33,640:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A217690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540942CFE0>)
2024-09-12 10:17:33,640:INFO:Checking exceptions
2024-09-12 10:17:33,640:INFO:Preloading libraries
2024-09-12 10:17:33,640:INFO:Set up data.
2024-09-12 10:17:33,661:INFO:Set up index.
2024-09-12 10:17:33,847:INFO:Initializing predict_model()
2024-09-12 10:17:33,847:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B55A850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:33,847:INFO:Checking exceptions
2024-09-12 10:17:33,847:INFO:Preloading libraries
2024-09-12 10:17:33,848:INFO:Set up data.
2024-09-12 10:17:33,867:INFO:Set up index.
2024-09-12 10:17:34,034:INFO:Initializing predict_model()
2024-09-12 10:17:34,035:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540920A0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:34,035:INFO:Checking exceptions
2024-09-12 10:17:34,035:INFO:Preloading libraries
2024-09-12 10:17:34,036:INFO:Set up data.
2024-09-12 10:17:34,055:INFO:Set up index.
2024-09-12 10:17:34,236:INFO:Initializing predict_model()
2024-09-12 10:17:34,236:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:34,236:INFO:Checking exceptions
2024-09-12 10:17:34,236:INFO:Preloading libraries
2024-09-12 10:17:34,237:INFO:Set up data.
2024-09-12 10:17:34,266:INFO:Set up index.
2024-09-12 10:17:34,453:INFO:Initializing predict_model()
2024-09-12 10:17:34,453:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:34,453:INFO:Checking exceptions
2024-09-12 10:17:34,453:INFO:Preloading libraries
2024-09-12 10:17:34,454:INFO:Set up data.
2024-09-12 10:17:34,475:INFO:Set up index.
2024-09-12 10:17:34,662:INFO:Initializing predict_model()
2024-09-12 10:17:34,662:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401485590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:34,663:INFO:Checking exceptions
2024-09-12 10:17:34,663:INFO:Preloading libraries
2024-09-12 10:17:34,664:INFO:Set up data.
2024-09-12 10:17:34,689:INFO:Set up index.
2024-09-12 10:17:34,856:INFO:Initializing predict_model()
2024-09-12 10:17:34,856:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FDE1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:34,856:INFO:Checking exceptions
2024-09-12 10:17:34,857:INFO:Preloading libraries
2024-09-12 10:17:34,857:INFO:Set up data.
2024-09-12 10:17:34,875:INFO:Set up index.
2024-09-12 10:17:35,019:INFO:Initializing predict_model()
2024-09-12 10:17:35,020:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409533BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:35,020:INFO:Checking exceptions
2024-09-12 10:17:35,020:INFO:Preloading libraries
2024-09-12 10:17:35,021:INFO:Set up data.
2024-09-12 10:17:35,064:INFO:Set up index.
2024-09-12 10:17:35,219:INFO:Initializing predict_model()
2024-09-12 10:17:35,219:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:35,220:INFO:Checking exceptions
2024-09-12 10:17:35,220:INFO:Preloading libraries
2024-09-12 10:17:35,220:INFO:Set up data.
2024-09-12 10:17:35,244:INFO:Set up index.
2024-09-12 10:17:35,365:INFO:Initializing predict_model()
2024-09-12 10:17:35,365:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254010460D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:35,365:INFO:Checking exceptions
2024-09-12 10:17:35,365:INFO:Preloading libraries
2024-09-12 10:17:35,366:INFO:Set up data.
2024-09-12 10:17:35,385:INFO:Set up index.
2024-09-12 10:17:35,501:INFO:Initializing predict_model()
2024-09-12 10:17:35,501:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B4E2ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409205B20>)
2024-09-12 10:17:35,502:INFO:Checking exceptions
2024-09-12 10:17:35,502:INFO:Preloading libraries
2024-09-12 10:17:35,502:INFO:Set up data.
2024-09-12 10:17:35,528:INFO:Set up index.
2024-09-12 10:17:35,795:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:589: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  if show_recommended and not show_not_recommended:

2024-09-12 10:17:35,796:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:590: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  filtered_prediction = filtered_prediction[filtered_prediction['prediction_label'] == 1]

2024-09-12 10:21:23,657:INFO:Initializing load_model()
2024-09-12 10:21:23,660:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,665:INFO:Initializing load_model()
2024-09-12 10:21:23,665:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,670:INFO:Initializing load_model()
2024-09-12 10:21:23,670:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,737:INFO:Initializing load_model()
2024-09-12 10:21:23,738:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,755:INFO:Initializing load_model()
2024-09-12 10:21:23,755:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,773:INFO:Initializing load_model()
2024-09-12 10:21:23,773:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,792:INFO:Initializing load_model()
2024-09-12 10:21:23,792:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,798:INFO:Initializing load_model()
2024-09-12 10:21:23,799:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,816:INFO:Initializing load_model()
2024-09-12 10:21:23,818:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,825:INFO:Initializing load_model()
2024-09-12 10:21:23,825:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,841:INFO:Initializing load_model()
2024-09-12 10:21:23,841:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:23,898:INFO:Initializing predict_model()
2024-09-12 10:21:23,899:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540B6F5650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540936E340>)
2024-09-12 10:21:23,899:INFO:Checking exceptions
2024-09-12 10:21:23,900:INFO:Preloading libraries
2024-09-12 10:21:23,900:INFO:Set up data.
2024-09-12 10:21:23,925:INFO:Set up index.
2024-09-12 10:21:24,060:INFO:Initializing predict_model()
2024-09-12 10:21:24,060:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409F09B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:24,060:INFO:Checking exceptions
2024-09-12 10:21:24,061:INFO:Preloading libraries
2024-09-12 10:21:24,062:INFO:Set up data.
2024-09-12 10:21:24,083:INFO:Set up index.
2024-09-12 10:21:24,236:INFO:Initializing predict_model()
2024-09-12 10:21:24,236:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540661B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:24,236:INFO:Checking exceptions
2024-09-12 10:21:24,238:INFO:Preloading libraries
2024-09-12 10:21:24,239:INFO:Set up data.
2024-09-12 10:21:24,259:INFO:Set up index.
2024-09-12 10:21:24,455:INFO:Initializing predict_model()
2024-09-12 10:21:24,456:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD0D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:24,456:INFO:Checking exceptions
2024-09-12 10:21:24,456:INFO:Preloading libraries
2024-09-12 10:21:24,457:INFO:Set up data.
2024-09-12 10:21:24,475:INFO:Set up index.
2024-09-12 10:21:24,669:INFO:Initializing predict_model()
2024-09-12 10:21:24,669:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:24,669:INFO:Checking exceptions
2024-09-12 10:21:24,669:INFO:Preloading libraries
2024-09-12 10:21:24,670:INFO:Set up data.
2024-09-12 10:21:24,689:INFO:Set up index.
2024-09-12 10:21:24,852:INFO:Initializing predict_model()
2024-09-12 10:21:24,853:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547C82FC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:24,853:INFO:Checking exceptions
2024-09-12 10:21:24,853:INFO:Preloading libraries
2024-09-12 10:21:24,854:INFO:Set up data.
2024-09-12 10:21:24,878:INFO:Set up index.
2024-09-12 10:21:25,057:INFO:Initializing predict_model()
2024-09-12 10:21:25,057:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409585710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:25,057:INFO:Checking exceptions
2024-09-12 10:21:25,057:INFO:Preloading libraries
2024-09-12 10:21:25,058:INFO:Set up data.
2024-09-12 10:21:25,075:INFO:Set up index.
2024-09-12 10:21:25,201:INFO:Initializing predict_model()
2024-09-12 10:21:25,201:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:25,201:INFO:Checking exceptions
2024-09-12 10:21:25,202:INFO:Preloading libraries
2024-09-12 10:21:25,202:INFO:Set up data.
2024-09-12 10:21:25,221:INFO:Set up index.
2024-09-12 10:21:25,348:INFO:Initializing predict_model()
2024-09-12 10:21:25,349:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409AE5710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:25,349:INFO:Checking exceptions
2024-09-12 10:21:25,349:INFO:Preloading libraries
2024-09-12 10:21:25,350:INFO:Set up data.
2024-09-12 10:21:25,370:INFO:Set up index.
2024-09-12 10:21:25,490:INFO:Initializing predict_model()
2024-09-12 10:21:25,491:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E6010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:25,491:INFO:Checking exceptions
2024-09-12 10:21:25,491:INFO:Preloading libraries
2024-09-12 10:21:25,492:INFO:Set up data.
2024-09-12 10:21:25,510:INFO:Set up index.
2024-09-12 10:21:25,628:INFO:Initializing predict_model()
2024-09-12 10:21:25,628:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547DFD5690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540661F060>)
2024-09-12 10:21:25,628:INFO:Checking exceptions
2024-09-12 10:21:25,629:INFO:Preloading libraries
2024-09-12 10:21:25,629:INFO:Set up data.
2024-09-12 10:21:25,645:INFO:Set up index.
2024-09-12 10:21:25,825:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:571: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  show_recommended = st.checkbox("Show Recommended")

2024-09-12 10:21:25,826:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:572: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  show_not_recommended = st.checkbox("Show Not Recommended")

2024-09-12 10:21:48,517:INFO:Initializing load_model()
2024-09-12 10:21:48,517:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,521:INFO:Initializing load_model()
2024-09-12 10:21:48,522:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,527:INFO:Initializing load_model()
2024-09-12 10:21:48,527:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,588:INFO:Initializing load_model()
2024-09-12 10:21:48,588:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,604:INFO:Initializing load_model()
2024-09-12 10:21:48,604:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,624:INFO:Initializing load_model()
2024-09-12 10:21:48,624:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,642:INFO:Initializing load_model()
2024-09-12 10:21:48,642:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,649:INFO:Initializing load_model()
2024-09-12 10:21:48,649:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,655:INFO:Initializing load_model()
2024-09-12 10:21:48,655:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,661:INFO:Initializing load_model()
2024-09-12 10:21:48,661:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,667:INFO:Initializing load_model()
2024-09-12 10:21:48,667:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:21:48,728:INFO:Initializing predict_model()
2024-09-12 10:21:48,728:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A1004D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002540A1F77E0>)
2024-09-12 10:21:48,729:INFO:Checking exceptions
2024-09-12 10:21:48,729:INFO:Preloading libraries
2024-09-12 10:21:48,730:INFO:Set up data.
2024-09-12 10:21:48,747:INFO:Set up index.
2024-09-12 10:21:48,889:INFO:Initializing predict_model()
2024-09-12 10:21:48,889:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CD0D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:48,890:INFO:Checking exceptions
2024-09-12 10:21:48,890:INFO:Preloading libraries
2024-09-12 10:21:48,891:INFO:Set up data.
2024-09-12 10:21:48,918:INFO:Set up index.
2024-09-12 10:21:49,055:INFO:Initializing predict_model()
2024-09-12 10:21:49,055:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409FE0F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,055:INFO:Checking exceptions
2024-09-12 10:21:49,055:INFO:Preloading libraries
2024-09-12 10:21:49,056:INFO:Set up data.
2024-09-12 10:21:49,072:INFO:Set up index.
2024-09-12 10:21:49,248:INFO:Initializing predict_model()
2024-09-12 10:21:49,248:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401F10750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,248:INFO:Checking exceptions
2024-09-12 10:21:49,249:INFO:Preloading libraries
2024-09-12 10:21:49,250:INFO:Set up data.
2024-09-12 10:21:49,266:INFO:Set up index.
2024-09-12 10:21:49,443:INFO:Initializing predict_model()
2024-09-12 10:21:49,444:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002540A0C08D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,444:INFO:Checking exceptions
2024-09-12 10:21:49,444:INFO:Preloading libraries
2024-09-12 10:21:49,445:INFO:Set up data.
2024-09-12 10:21:49,461:INFO:Set up index.
2024-09-12 10:21:49,614:INFO:Initializing predict_model()
2024-09-12 10:21:49,614:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409496550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,615:INFO:Checking exceptions
2024-09-12 10:21:49,615:INFO:Preloading libraries
2024-09-12 10:21:49,616:INFO:Set up data.
2024-09-12 10:21:49,632:INFO:Set up index.
2024-09-12 10:21:49,781:INFO:Initializing predict_model()
2024-09-12 10:21:49,782:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,782:INFO:Checking exceptions
2024-09-12 10:21:49,782:INFO:Preloading libraries
2024-09-12 10:21:49,783:INFO:Set up data.
2024-09-12 10:21:49,803:INFO:Set up index.
2024-09-12 10:21:49,935:INFO:Initializing predict_model()
2024-09-12 10:21:49,937:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:49,937:INFO:Checking exceptions
2024-09-12 10:21:49,937:INFO:Preloading libraries
2024-09-12 10:21:49,938:INFO:Set up data.
2024-09-12 10:21:49,957:INFO:Set up index.
2024-09-12 10:21:50,098:INFO:Initializing predict_model()
2024-09-12 10:21:50,099:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:50,099:INFO:Checking exceptions
2024-09-12 10:21:50,099:INFO:Preloading libraries
2024-09-12 10:21:50,100:INFO:Set up data.
2024-09-12 10:21:50,115:INFO:Set up index.
2024-09-12 10:21:50,229:INFO:Initializing predict_model()
2024-09-12 10:21:50,229:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407A424D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:50,230:INFO:Checking exceptions
2024-09-12 10:21:50,230:INFO:Preloading libraries
2024-09-12 10:21:50,231:INFO:Set up data.
2024-09-12 10:21:50,247:INFO:Set up index.
2024-09-12 10:21:50,355:INFO:Initializing predict_model()
2024-09-12 10:21:50,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099E5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025409204720>)
2024-09-12 10:21:50,356:INFO:Checking exceptions
2024-09-12 10:21:50,356:INFO:Preloading libraries
2024-09-12 10:21:50,356:INFO:Set up data.
2024-09-12 10:21:50,375:INFO:Set up index.
2024-09-12 10:21:50,554:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:571: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  show_recommended = st.checkbox("Show Recommended")

2024-09-12 10:21:50,555:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:572: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  show_not_recommended = st.checkbox("Show Not Recommended")

2024-09-12 10:21:50,567:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:571: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  show_recommended = st.checkbox("Show Recommended")

2024-09-12 10:21:50,568:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:572: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  show_not_recommended = st.checkbox("Show Not Recommended")

2024-09-12 10:28:32,950:INFO:Initializing load_model()
2024-09-12 10:28:32,952:INFO:load_model(model_name=model_Class_Traditional Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:32,956:INFO:Initializing load_model()
2024-09-12 10:28:32,956:INFO:load_model(model_name=model_Class_Sweeper Keeper, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:32,961:INFO:Initializing load_model()
2024-09-12 10:28:32,961:INFO:load_model(model_name=model_Class_Ball-Playing Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,004:INFO:Initializing load_model()
2024-09-12 10:28:33,004:INFO:load_model(model_name=model_Class_No-Nonsense Defender, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,019:INFO:Initializing load_model()
2024-09-12 10:28:33,019:INFO:load_model(model_name=model_Class_Full-Back, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,036:INFO:Initializing load_model()
2024-09-12 10:28:33,036:INFO:load_model(model_name=model_Class_All-Action Midfielder, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,052:INFO:Initializing load_model()
2024-09-12 10:28:33,053:INFO:load_model(model_name=model_Class_Midfield Playmaker, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,058:INFO:Initializing load_model()
2024-09-12 10:28:33,058:INFO:load_model(model_name=model_Class_Traditional Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,073:INFO:Initializing load_model()
2024-09-12 10:28:33,073:INFO:load_model(model_name=model_Class_Inverted Winger, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,081:INFO:Initializing load_model()
2024-09-12 10:28:33,081:INFO:load_model(model_name=model_Class_Goal Poacher, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,100:INFO:Initializing load_model()
2024-09-12 10:28:33,101:INFO:load_model(model_name=model_Class_Target Man, platform=None, authentication=None, verbose=True)
2024-09-12 10:28:33,156:INFO:Initializing predict_model()
2024-09-12 10:28:33,156:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409407250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=407))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254094BE8E0>)
2024-09-12 10:28:33,157:INFO:Checking exceptions
2024-09-12 10:28:33,157:INFO:Preloading libraries
2024-09-12 10:28:33,158:INFO:Set up data.
2024-09-12 10:28:33,180:INFO:Set up index.
2024-09-12 10:28:33,328:INFO:Initializing predict_model()
2024-09-12 10:28:33,328:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002547CDA3BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6706))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:33,328:INFO:Checking exceptions
2024-09-12 10:28:33,328:INFO:Preloading libraries
2024-09-12 10:28:33,329:INFO:Set up data.
2024-09-12 10:28:33,346:INFO:Set up index.
2024-09-12 10:28:33,493:INFO:Initializing predict_model()
2024-09-12 10:28:33,493:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254099D6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=4353))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:33,494:INFO:Checking exceptions
2024-09-12 10:28:33,494:INFO:Preloading libraries
2024-09-12 10:28:33,494:INFO:Set up data.
2024-09-12 10:28:33,512:INFO:Set up index.
2024-09-12 10:28:33,680:INFO:Initializing predict_model()
2024-09-12 10:28:33,681:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401098D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=805))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:33,681:INFO:Checking exceptions
2024-09-12 10:28:33,681:INFO:Preloading libraries
2024-09-12 10:28:33,682:INFO:Set up data.
2024-09-12 10:28:33,701:INFO:Set up index.
2024-09-12 10:28:33,888:INFO:Initializing predict_model()
2024-09-12 10:28:33,888:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401098D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:33,888:INFO:Checking exceptions
2024-09-12 10:28:33,888:INFO:Preloading libraries
2024-09-12 10:28:33,889:INFO:Set up data.
2024-09-12 10:28:33,909:INFO:Set up index.
2024-09-12 10:28:34,076:INFO:Initializing predict_model()
2024-09-12 10:28:34,076:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401098D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,076:INFO:Checking exceptions
2024-09-12 10:28:34,077:INFO:Preloading libraries
2024-09-12 10:28:34,077:INFO:Set up data.
2024-09-12 10:28:34,096:INFO:Set up index.
2024-09-12 10:28:34,245:INFO:Initializing predict_model()
2024-09-12 10:28:34,245:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025401098D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=1470))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,245:INFO:Checking exceptions
2024-09-12 10:28:34,246:INFO:Preloading libraries
2024-09-12 10:28:34,246:INFO:Set up data.
2024-09-12 10:28:34,266:INFO:Set up index.
2024-09-12 10:28:34,394:INFO:Initializing predict_model()
2024-09-12 10:28:34,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025409B92810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=4443))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,395:INFO:Checking exceptions
2024-09-12 10:28:34,395:INFO:Preloading libraries
2024-09-12 10:28:34,396:INFO:Set up data.
2024-09-12 10:28:34,417:INFO:Set up index.
2024-09-12 10:28:34,636:INFO:Initializing predict_model()
2024-09-12 10:28:34,637:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B6A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=6135))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,637:INFO:Checking exceptions
2024-09-12 10:28:34,637:INFO:Preloading libraries
2024-09-12 10:28:34,638:INFO:Set up data.
2024-09-12 10:28:34,666:INFO:Set up index.
2024-09-12 10:28:34,796:INFO:Initializing predict_model()
2024-09-12 10:28:34,796:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025407834110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', RidgeClassifier(random_state=6006))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,796:INFO:Checking exceptions
2024-09-12 10:28:34,796:INFO:Preloading libraries
2024-09-12 10:28:34,797:INFO:Set up data.
2024-09-12 10:28:34,813:INFO:Set up index.
2024-09-12 10:28:34,923:INFO:Initializing predict_model()
2024-09-12 10:28:34,923:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254093B6D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Goals per game', 'Assists',
                                             'Accurate per game',
                                             'Acc. long balls', 'Acc. crosses',
                                             'Interceptions per game',
                                             'Balls recovered per game',
                                             'Dribbled past per game',
                                             'Clearances per game',
                                             'Succ. dribbles',
                                             'Total duels won',
                                             'Aerial duels won', 'Clean sheets',
                                             'Saves per game'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=8146))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254096619E0>)
2024-09-12 10:28:34,923:INFO:Checking exceptions
2024-09-12 10:28:34,924:INFO:Preloading libraries
2024-09-12 10:28:34,924:INFO:Set up data.
2024-09-12 10:28:34,943:INFO:Set up index.
2024-09-12 10:28:35,174:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:573: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  

2024-09-12 10:28:35,174:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:574: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  for model_name in models.keys():

2024-09-12 10:28:35,183:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:573: DeprecationWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, pd.CategoricalDtype) instead
  

2024-09-12 10:28:35,184:WARNING:P:\DAB Slides\Capstone\Goal-2030\App Phase 2b - Realtime Pull\localstreamlitapp-working.py:574: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  for model_name in models.keys():

